!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVE	./silver/models/subscriptions.py	/^        ACTIVE = 'active'$/;"	v	class:Subscription.STATES
APIConflictException	./silver/api/exceptions.py	/^class APIConflictException(APIException):$/;"	c
APIGetAssert	./silver/tests/spec/util/api_get_assert.py	/^class APIGetAssert(APITestCase):$/;"	c
AdminUserFactory	./silver/tests/factories.py	/^class AdminUserFactory(factory.django.DjangoModelFactory):$/;"	c
AutoDateTimeField	./silver/utils/models.py	/^class AutoDateTimeField(models.DateTimeField):$/;"	c
Automatic	./silver/payment_processors/mixins.py	/^    Automatic = "automatic"$/;"	v	class:PaymentProcessorTypes
AutomaticProcessorMixin	./silver/payment_processors/mixins.py	/^class AutomaticProcessorMixin(BaseActionableProcessor):$/;"	c
BaseActionableProcessor	./silver/payment_processors/mixins.py	/^class BaseActionableProcessor(object):$/;"	c
BaseBillingEntity	./silver/models/billing_entities/base.py	/^class BaseBillingEntity(LiveModel):$/;"	c
BillingDocumentAdmin	./silver/admin.py	/^class BillingDocumentAdmin(ModelAdmin):$/;"	c
BillingDocumentBase	./silver/models/documents/base.py	/^class BillingDocumentBase(models.Model):$/;"	c
BillingDocumentFilter	./silver/api/filters.py	/^class BillingDocumentFilter(FilterSet):$/;"	c
BillingDocumentForm	./silver/admin.py	/^class BillingDocumentForm(forms.ModelForm):$/;"	c
BillingDocumentManager	./silver/models/documents/base.py	/^class BillingDocumentManager(models.Manager):$/;"	c
BillingDocumentQuerySet	./silver/models/documents/base.py	/^class BillingDocumentQuerySet(models.QuerySet):$/;"	c
BillingLog	./silver/models/subscriptions.py	/^class BillingLog(models.Model):$/;"	c
BillingLogInLine	./silver/admin.py	/^class BillingLogInLine(TabularInline):$/;"	c
CANCELED	./silver/models/documents/base.py	/^        CANCELED = 'canceled'$/;"	v	class:BillingDocumentBase.STATES
CANCELED	./silver/models/subscriptions.py	/^        CANCELED = 'canceled'$/;"	v	class:Subscription.STATES
CANCEL_CODES	./silver/models/transactions/codes.py	/^CANCEL_CODES = {$/;"	v
CANCEL_OPTIONS	./silver/models/subscriptions.py	/^    class CANCEL_OPTIONS(object):$/;"	c	class:Subscription
CELERY_BEAT_SCHEDULE	./settings.py	/^CELERY_BEAT_SCHEDULE = {$/;"	v
CELERY_BROKER_URL	./settings.py	/^CELERY_BROKER_URL = 'redis:\/\/localhost:6379\/'$/;"	v
Canceled	./silver/models/transactions/transaction.py	/^        Canceled = 'canceled'$/;"	v	class:Transaction.States
Command	./silver/management/commands/execute_transactions.py	/^class Command(BaseCommand):$/;"	c
Command	./silver/management/commands/fetch_transactions_status.py	/^class Command(BaseCommand):$/;"	c
Command	./silver/management/commands/generate_docs.py	/^class Command(BaseCommand):$/;"	c
Command	./silver/management/commands/generate_pdfs.py	/^class Command(BaseCommand):$/;"	c
Command	./silver/management/commands/seed.py	/^class Command(BaseCommand):$/;"	c
Command	./silver/management/commands/tweak_billing_log.py	/^class Command(BaseCommand):$/;"	c
CurrencyConverter	./silver/currencies.py	/^    CurrencyConverter = DummyConverter()$/;"	v
CurrencyConverter	./silver/currencies.py	/^    CurrencyConverter = import_string(settings.SILVER_CURRENCY_CONVERTER)()$/;"	v
Customer	./silver/models/billing_entities/customer.py	/^class Customer(BaseBillingEntity):$/;"	c
CustomerAdmin	./silver/admin.py	/^class CustomerAdmin(LiveModelAdmin):$/;"	c
CustomerDetail	./silver/api/views/billing_entities_views.py	/^class CustomerDetail(generics.RetrieveUpdateDestroyAPIView):$/;"	c
CustomerFactory	./silver/tests/factories.py	/^class CustomerFactory(factory.django.DjangoModelFactory):$/;"	c
CustomerFilter	./silver/api/filters.py	/^class CustomerFilter(FilterSet):$/;"	c
CustomerList	./silver/api/views/billing_entities_views.py	/^class CustomerList(generics.ListCreateAPIView):$/;"	c
CustomerSerializer	./silver/api/serializers/billing_entities_serializers.py	/^class CustomerSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
CustomerUrl	./silver/api/serializers/common.py	/^class CustomerUrl(HyperlinkedRelatedField):$/;"	c
DATABASES	./settings.py	/^DATABASES = {$/;"	v
DAY	./silver/models/plans.py	/^        DAY = 'day'$/;"	v	class:Plan.INTERVALS
DEBUG	./settings.py	/^DEBUG = False$/;"	v
DEFAULT_DOC_STATE	./silver/models/billing_entities/provider.py	/^    class DEFAULT_DOC_STATE(object):$/;"	c	class:Provider
DOCS_GENERATION_TIME_LIMIT	./silver/tasks.py	/^DOCS_GENERATION_TIME_LIMIT = getattr(settings, 'DOCS_GENERATION_TIME_LIMIT',$/;"	v
DOCUMENT_DEFAULT_STATE	./silver/models/billing_entities/provider.py	/^    DOCUMENT_DEFAULT_STATE = Choices($/;"	v	class:Provider
DRAFT	./silver/models/billing_entities/provider.py	/^        DRAFT = 'draft'$/;"	v	class:Provider.DEFAULT_DOC_STATE
DRAFT	./silver/models/documents/base.py	/^        DRAFT = 'draft'$/;"	v	class:BillingDocumentBase.STATES
DocEntryCreate	./silver/api/views/documents_views.py	/^class DocEntryCreate(generics.CreateAPIView):$/;"	c
DocEntryUpdateDestroy	./silver/api/views/documents_views.py	/^class DocEntryUpdateDestroy(APIView):$/;"	c
DocumentAutocomplete	./silver/views.py	/^class DocumentAutocomplete(autocomplete.Select2QuerySetView):$/;"	c
DocumentEntry	./silver/models/documents/entries.py	/^class DocumentEntry(models.Model):$/;"	c
DocumentEntryFactory	./silver/tests/factories.py	/^class DocumentEntryFactory(factory.django.DjangoModelFactory):$/;"	c
DocumentEntryForm	./silver/admin.py	/^class DocumentEntryForm(forms.ModelForm):$/;"	c
DocumentEntryInline	./silver/admin.py	/^class DocumentEntryInline(TabularInline):$/;"	c
DocumentEntrySerializer	./silver/api/serializers/documents_serializers.py	/^class DocumentEntrySerializer(serializers.HyperlinkedModelSerializer):$/;"	c
DocumentList	./silver/api/views/documents_views.py	/^class DocumentList(ListAPIView):$/;"	c
DocumentSerializer	./silver/api/serializers/documents_serializers.py	/^class DocumentSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
DocumentUrl	./silver/api/serializers/documents_serializers.py	/^class DocumentUrl(serializers.HyperlinkedIdentityField):$/;"	c
DocumentsGenerator	./silver/documents_generator.py	/^class DocumentsGenerator(object):$/;"	c
DueDateFilter	./silver/admin.py	/^class DueDateFilter(SimpleListFilter):$/;"	c
DummyConverter	./silver/currencies.py	/^class DummyConverter(object):$/;"	c
EMAIL_BACKEND	./settings.py	/^EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'$/;"	v
ENDED	./silver/models/subscriptions.py	/^        ENDED = 'ended'$/;"	v	class:Subscription.STATES
END_OF_BILLING_CYCLE	./silver/models/subscriptions.py	/^        END_OF_BILLING_CYCLE = 'end_of_billing_cycle'$/;"	v	class:Subscription.CANCEL_OPTIONS
EXECUTE_TRANSACTION_TIME_LIMIT	./silver/tasks.py	/^EXECUTE_TRANSACTION_TIME_LIMIT = getattr(settings, 'EXECUTE_TRANSACTION_TIME_LIMIT',$/;"	v
EXTERNAL_APPS	./settings.py	/^EXTERNAL_APPS = [$/;"	v
FAIL_CODES	./silver/models/transactions/codes.py	/^FAIL_CODES = {$/;"	v
FETCH_TRANSACTION_STATUS_TIME_LIMIT	./silver/tasks.py	/^FETCH_TRANSACTION_STATUS_TIME_LIMIT = getattr(settings, 'FETCH_TRANSACTION_STATUS_TIME_LIMIT',$/;"	v
FIXTURE_DIRS	./settings.py	/^FIXTURE_DIRS = ($/;"	v
FLOWS	./silver/models/billing_entities/provider.py	/^    class FLOWS(object):$/;"	c	class:Provider
FLOW_CHOICES	./silver/models/billing_entities/provider.py	/^    FLOW_CHOICES = Choices($/;"	v	class:Provider
FREEZED_TIME	./silver/tests/spec/test_documents.py	/^FREEZED_TIME = '2017-01-24T12:46:07Z'$/;"	v
Failed	./silver/models/transactions/transaction.py	/^        Failed = 'failed'$/;"	v	class:Transaction.States
FailingVoidTriggeredProcessor	./silver/tests/fixtures.py	/^class FailingVoidTriggeredProcessor(TriggeredProcessor):$/;"	c
GenericTransactionForm	./silver/payment_processors/forms.py	/^class GenericTransactionForm(Form):$/;"	c
GenericTransactionView	./silver/payment_processors/views.py	/^class GenericTransactionView(View):$/;"	c
HOOK_EVENTS	./settings.py	/^HOOK_EVENTS = _HOOK_EVENTS$/;"	v
HOOK_EVENTS	./silver/__init__.py	/^HOOK_EVENTS = {$/;"	v
INACTIVE	./silver/models/subscriptions.py	/^        INACTIVE = 'inactive'$/;"	v	class:Subscription.STATES
INSTALLED_APPS	./settings.py	/^INSTALLED_APPS = EXTERNAL_APPS + INTERNAL_APPS$/;"	v
INTERNAL_APPS	./settings.py	/^INTERNAL_APPS = [$/;"	v
INTERVALS	./silver/models/plans.py	/^    class INTERVALS(object):$/;"	c	class:Plan
INTERVAL_CHOICES	./silver/models/plans.py	/^    INTERVAL_CHOICES = Choices($/;"	v	class:Plan
INVOICE	./silver/models/billing_entities/provider.py	/^        INVOICE = 'invoice'$/;"	v	class:Provider.FLOWS
ISSUED	./silver/models/billing_entities/provider.py	/^        ISSUED = 'issued'$/;"	v	class:Provider.DEFAULT_DOC_STATE
ISSUED	./silver/models/documents/base.py	/^        ISSUED = 'issued'$/;"	v	class:BillingDocumentBase.STATES
Initial	./silver/models/transactions/transaction.py	/^        Initial = 'initial'$/;"	v	class:Transaction.States
Invoice	./silver/models/documents/invoice.py	/^class Invoice(BillingDocumentBase):$/;"	c
InvoiceAdmin	./silver/admin.py	/^class InvoiceAdmin(BillingDocumentAdmin):$/;"	c
InvoiceAdminTestCase	./silver/tests/admin/test_invoice.py	/^class InvoiceAdminTestCase(TestCase):$/;"	c
InvoiceAutocomplete	./silver/views.py	/^class InvoiceAutocomplete(DocumentAutocomplete):$/;"	c
InvoiceDocumentEntryInline	./silver/admin.py	/^class InvoiceDocumentEntryInline(DocumentEntryInline):$/;"	c
InvoiceEntryCreate	./silver/api/views/documents_views.py	/^class InvoiceEntryCreate(DocEntryCreate):$/;"	c
InvoiceEntryUpdateDestroy	./silver/api/views/documents_views.py	/^class InvoiceEntryUpdateDestroy(DocEntryUpdateDestroy):$/;"	c
InvoiceFactory	./silver/tests/factories.py	/^class InvoiceFactory(factory.django.DjangoModelFactory):$/;"	c
InvoiceFilter	./silver/api/filters.py	/^class InvoiceFilter(BillingDocumentFilter):$/;"	c
InvoiceForm	./silver/admin.py	/^class InvoiceForm(BillingDocumentForm):$/;"	c
InvoiceListCreate	./silver/api/views/documents_views.py	/^class InvoiceListCreate(generics.ListCreateAPIView):$/;"	c
InvoiceManager	./silver/models/documents/invoice.py	/^class InvoiceManager(BillingDocumentManager):$/;"	c
InvoiceRetrieveUpdate	./silver/api/views/documents_views.py	/^class InvoiceRetrieveUpdate(generics.RetrieveUpdateAPIView):$/;"	c
InvoiceSerializer	./silver/api/serializers/documents_serializers.py	/^class InvoiceSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
InvoiceStateHandler	./silver/api/views/documents_views.py	/^class InvoiceStateHandler(APIView):$/;"	c
LOCK_MANAGER_CONNECTION	./settings.py	/^LOCK_MANAGER_CONNECTION = {'host': 'localhost', 'port': 6379, 'db': 1}$/;"	v
LinkHeaderPagination	./silver/api/pagination.py	/^class LinkHeaderPagination(PageNumberPagination):$/;"	c
LiveModelAdmin	./silver/admin.py	/^class LiveModelAdmin(ModelAdmin):$/;"	c
MEDIA_ROOT	./settings.py	/^MEDIA_ROOT = PROJECT_ROOT + '\/app_media\/'$/;"	v
MEDIA_URL	./settings.py	/^MEDIA_URL = '\/app_media\/'$/;"	v
MFUnitsLogSerializer	./silver/api/serializers/subscriptions_serializers.py	/^class MFUnitsLogSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
MFUnitsLogUrl	./silver/api/serializers/subscriptions_serializers.py	/^class MFUnitsLogUrl(serializers.HyperlinkedRelatedField):$/;"	c
MIDDLEWARE_CLASSES	./settings.py	/^MIDDLEWARE_CLASSES = ($/;"	v
MONTH	./silver/models/plans.py	/^        MONTH = 'month'$/;"	v	class:Plan.INTERVALS
Manual	./silver/payment_processors/mixins.py	/^    Manual = "manual"$/;"	v	class:PaymentProcessorTypes
ManualProcessor	./silver/payment_processors/manual.py	/^class ManualProcessor(PaymentProcessorBase, ManualProcessorMixin):$/;"	c
ManualProcessor	./silver/tests/fixtures.py	/^class ManualProcessor(PaymentProcessorBase, ManualProcessorMixin):$/;"	c
ManualProcessorMixin	./silver/payment_processors/mixins.py	/^class ManualProcessorMixin(object):$/;"	c
Meta	./silver/admin.py	/^    class Meta:$/;"	c	class:DocumentEntryForm
Meta	./silver/admin.py	/^    class Meta:$/;"	c	class:InvoiceForm
Meta	./silver/admin.py	/^    class Meta:$/;"	c	class:PlanForm
Meta	./silver/admin.py	/^    class Meta:$/;"	c	class:ProformaForm
Meta	./silver/admin.py	/^    class Meta:$/;"	c	class:TransactionForm
Meta	./silver/api/filters.py	/^    class Meta(BillingDocumentFilter.Meta):$/;"	c	class:InvoiceFilter
Meta	./silver/api/filters.py	/^    class Meta(BillingDocumentFilter.Meta):$/;"	c	class:ProformaFilter
Meta	./silver/api/filters.py	/^    class Meta:$/;"	c	class:BillingDocumentFilter
Meta	./silver/api/filters.py	/^    class Meta:$/;"	c	class:CustomerFilter
Meta	./silver/api/filters.py	/^    class Meta:$/;"	c	class:MeteredFeaturesFilter
Meta	./silver/api/filters.py	/^    class Meta:$/;"	c	class:PaymentMethodFilter
Meta	./silver/api/filters.py	/^    class Meta:$/;"	c	class:PlanFilter
Meta	./silver/api/filters.py	/^    class Meta:$/;"	c	class:ProviderFilter
Meta	./silver/api/filters.py	/^    class Meta:$/;"	c	class:SubscriptionFilter
Meta	./silver/api/filters.py	/^    class Meta:$/;"	c	class:TransactionFilter
Meta	./silver/api/serializers/billing_entities_serializers.py	/^    class Meta:$/;"	c	class:CustomerSerializer
Meta	./silver/api/serializers/billing_entities_serializers.py	/^    class Meta:$/;"	c	class:ProviderSerializer
Meta	./silver/api/serializers/common.py	/^    class Meta:$/;"	c	class:MeteredFeatureSerializer
Meta	./silver/api/serializers/documents_serializers.py	/^    class Meta:$/;"	c	class:DocumentEntrySerializer
Meta	./silver/api/serializers/documents_serializers.py	/^    class Meta:$/;"	c	class:DocumentSerializer
Meta	./silver/api/serializers/documents_serializers.py	/^    class Meta:$/;"	c	class:InvoiceSerializer
Meta	./silver/api/serializers/documents_serializers.py	/^    class Meta:$/;"	c	class:ProformaSerializer
Meta	./silver/api/serializers/payment_methods_serializers.py	/^    class Meta:$/;"	c	class:PaymentMethodSerializer
Meta	./silver/api/serializers/plans_serializer.py	/^    class Meta:$/;"	c	class:PlanSerializer
Meta	./silver/api/serializers/product_codes_serializer.py	/^    class Meta:$/;"	c	class:ProductCodeSerializer
Meta	./silver/api/serializers/subscriptions_serializers.py	/^    class Meta(MeteredFeatureSerializer.Meta):$/;"	c	class:MeteredFeatureInSubscriptionSerializer
Meta	./silver/api/serializers/subscriptions_serializers.py	/^    class Meta(SubscriptionSerializer.Meta):$/;"	c	class:SubscriptionDetailSerializer
Meta	./silver/api/serializers/subscriptions_serializers.py	/^    class Meta:$/;"	c	class:MFUnitsLogSerializer
Meta	./silver/api/serializers/subscriptions_serializers.py	/^    class Meta:$/;"	c	class:SubscriptionSerializer
Meta	./silver/api/serializers/transaction_serializers.py	/^    class Meta:$/;"	c	class:TransactionSerializer
Meta	./silver/models/billing_entities/base.py	/^    class Meta:$/;"	c	class:BaseBillingEntity
Meta	./silver/models/billing_entities/customer.py	/^    class Meta:$/;"	c	class:Customer
Meta	./silver/models/billing_entities/provider.py	/^    class Meta:$/;"	c	class:Provider
Meta	./silver/models/documents/base.py	/^    class Meta:$/;"	c	class:BillingDocumentBase
Meta	./silver/models/documents/entries.py	/^    class Meta:$/;"	c	class:DocumentEntry
Meta	./silver/models/documents/invoice.py	/^    class Meta:$/;"	c	class:Invoice
Meta	./silver/models/documents/proforma.py	/^    class Meta:$/;"	c	class:Proforma
Meta	./silver/models/payment_methods.py	/^    class Meta:$/;"	c	class:PaymentMethod
Meta	./silver/models/plans.py	/^    class Meta:$/;"	c	class:MeteredFeature
Meta	./silver/models/plans.py	/^    class Meta:$/;"	c	class:Plan
Meta	./silver/models/subscriptions.py	/^    class Meta:$/;"	c	class:BillingLog
Meta	./silver/models/subscriptions.py	/^    class Meta:$/;"	c	class:MeteredFeatureUnitsLog
Meta	./silver/models/transactions/transaction.py	/^    class Meta:$/;"	c	class:Transaction
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:AdminUserFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:CustomerFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:DocumentEntryFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:InvoiceFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:MeteredFeatureFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:MeteredFeatureUnitsLogFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:PDFFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:PaymentMethodFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:PlanFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:ProductCodeFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:ProformaFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:ProviderFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:SubscriptionFactory
Meta	./silver/tests/factories.py	/^    class Meta:$/;"	c	class:TransactionFactory
MeteredFeature	./silver/models/plans.py	/^class MeteredFeature(models.Model):$/;"	c
MeteredFeatureDetail	./silver/api/views/subscription_views.py	/^class MeteredFeatureDetail(generics.RetrieveAPIView):$/;"	c
MeteredFeatureFactory	./silver/tests/factories.py	/^class MeteredFeatureFactory(factory.django.DjangoModelFactory):$/;"	c
MeteredFeatureInSubscriptionSerializer	./silver/api/serializers/subscriptions_serializers.py	/^class MeteredFeatureInSubscriptionSerializer(MeteredFeatureSerializer):$/;"	c
MeteredFeatureList	./silver/api/views/subscription_views.py	/^class MeteredFeatureList(generics.ListCreateAPIView):$/;"	c
MeteredFeatureSerializer	./silver/api/serializers/common.py	/^class MeteredFeatureSerializer(serializers.ModelSerializer):$/;"	c
MeteredFeatureUnitsLog	./silver/models/subscriptions.py	/^class MeteredFeatureUnitsLog(models.Model):$/;"	c
MeteredFeatureUnitsLogDetail	./silver/api/views/subscription_views.py	/^class MeteredFeatureUnitsLogDetail(APIView):$/;"	c
MeteredFeatureUnitsLogFactory	./silver/tests/factories.py	/^class MeteredFeatureUnitsLogFactory(factory.django.DjangoModelFactory):$/;"	c
MeteredFeatureUnitsLogInLine	./silver/admin.py	/^class MeteredFeatureUnitsLogInLine(TabularInline):$/;"	c
MeteredFeaturesFilter	./silver/api/filters.py	/^class MeteredFeaturesFilter(FilterSet):$/;"	c
Migration	./silver/migrations/0001_initial.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0002_auto_20150416_1009.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0003_auto_20150417_0634.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0004_auto_20150429_1731.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0005_auto_20150429_1732.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0006_auto_20150430_1457.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0007_auto_20150430_1549.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0008_auto_20150430_1804.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0009_auto_20150717_1428.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0031_auto_20170125_1343.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0032_auto_20170201_1342.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0033_auto_20170203_1540.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0034_auto_20170203_1644.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0035_auto_20170206_0941.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0036_auto_20170514_1627.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0037_auto_20170719_1159.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0038_auto_20170724_0708.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0039_auto_20170811_1101.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0040_auto_20170925_0646.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0041_auto_20170929_1045.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0042_compute_totals_in_document_view.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0043_auto_20171113_1048.py	/^class Migration(migrations.Migration):$/;"	c
Migration	./silver/migrations/0044_auto_20171115_1809.py	/^class Migration(migrations.Migration):$/;"	c
MultipleCharFilter	./silver/api/filters.py	/^class MultipleCharFilter(CharFilter):$/;"	c
NOW	./silver/models/subscriptions.py	/^        NOW = 'now'$/;"	v	class:Subscription.CANCEL_OPTIONS
ONE_DAY	./silver/utils/dates.py	/^ONE_DAY = timedelta(days=1)$/;"	v
ONE_MONTH	./silver/utils/dates.py	/^ONE_MONTH = relativedelta(months=1)$/;"	v
PAID	./silver/models/documents/base.py	/^        PAID = 'paid'$/;"	v	class:BillingDocumentBase.STATES
PAYMENT_DUE_DAYS	./silver/models/billing_entities/base.py	/^PAYMENT_DUE_DAYS = getattr(settings, 'SILVER_DEFAULT_DUE_DAYS', 5)$/;"	v
PAYMENT_DUE_DAYS	./silver/models/billing_entities/customer.py	/^PAYMENT_DUE_DAYS = getattr(settings, 'SILVER_DEFAULT_DUE_DAYS', 5)$/;"	v
PAYMENT_DUE_DAYS	./silver/models/billing_entities/provider.py	/^PAYMENT_DUE_DAYS = getattr(settings, 'SILVER_DEFAULT_DUE_DAYS', 5)$/;"	v
PAYMENT_DUE_DAYS	./silver/models/documents/base.py	/^PAYMENT_DUE_DAYS = getattr(settings, 'SILVER_DEFAULT_DUE_DAYS', 5)$/;"	v
PAYMENT_DUE_DAYS	./silver/tests/spec/test_invoice.py	/^PAYMENT_DUE_DAYS = getattr(settings, 'SILVER_DEFAULT_DUE_DAYS', 5)$/;"	v
PAYMENT_DUE_DAYS	./silver/tests/spec/test_proforma.py	/^PAYMENT_DUE_DAYS = getattr(settings, 'SILVER_DEFAULT_DUE_DAYS', 5)$/;"	v
PAYMENT_METHOD_SECRET	./settings.py	/^PAYMENT_METHOD_SECRET = b'YOUR_FERNET_KEY_HERE'  # Fernet.generate_key()$/;"	v
PAYMENT_PROCESSORS	./settings.py	/^PAYMENT_PROCESSORS = {$/;"	v
PAYMENT_PROCESSORS	./settings_test.py	/^PAYMENT_PROCESSORS = {$/;"	v
PAYMENT_PROCESSORS	./silver/tests/fixtures.py	/^PAYMENT_PROCESSORS = {$/;"	v
PDF	./silver/models/documents/pdf.py	/^class PDF(Model):$/;"	c
PDFFactory	./silver/tests/factories.py	/^class PDFFactory(factory.django.DjangoModelFactory):$/;"	c
PDFRetrieve	./silver/api/views/documents_views.py	/^class PDFRetrieve(generics.RetrieveAPIView):$/;"	c
PDFUrl	./silver/api/serializers/common.py	/^class PDFUrl(serializers.HyperlinkedRelatedField):$/;"	c
PDF_GENERATION_TIME_LIMIT	./settings.py	/^PDF_GENERATION_TIME_LIMIT = 60$/;"	v
PDF_GENERATION_TIME_LIMIT	./silver/tasks.py	/^PDF_GENERATION_TIME_LIMIT = getattr(settings, 'PDF_GENERATION_TIME_LIMIT',$/;"	v
PROFORMA	./silver/models/billing_entities/provider.py	/^        PROFORMA = 'proforma'$/;"	v	class:Provider.FLOWS
PROJECT_ROOT	./settings.py	/^PROJECT_ROOT = os.path.dirname(__file__)$/;"	v
PaymentMethod	./silver/models/payment_methods.py	/^class PaymentMethod(models.Model):$/;"	c
PaymentMethodAction	./silver/api/views/payment_method_views.py	/^class PaymentMethodAction(APIView):$/;"	c
PaymentMethodAdmin	./silver/admin.py	/^class PaymentMethodAdmin(ModelAdmin):$/;"	c
PaymentMethodAutocomplete	./silver/views.py	/^class PaymentMethodAutocomplete(autocomplete.Select2QuerySetView):$/;"	c
PaymentMethodDetail	./silver/api/views/payment_method_views.py	/^class PaymentMethodDetail(RetrieveUpdateAPIView):$/;"	c
PaymentMethodFactory	./silver/tests/factories.py	/^class PaymentMethodFactory(factory.django.DjangoModelFactory):$/;"	c
PaymentMethodFilter	./silver/api/filters.py	/^class PaymentMethodFilter(FilterSet):$/;"	c
PaymentMethodInvalid	./silver/models/payment_methods.py	/^class PaymentMethodInvalid(Exception):$/;"	c
PaymentMethodList	./silver/api/views/payment_method_views.py	/^class PaymentMethodList(ListCreateAPIView):$/;"	c
PaymentMethodSerializer	./silver/api/serializers/payment_methods_serializers.py	/^class PaymentMethodSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
PaymentMethodTransactionsUrl	./silver/api/serializers/common.py	/^class PaymentMethodTransactionsUrl(serializers.HyperlinkedIdentityField):$/;"	c
PaymentMethodUrl	./silver/api/serializers/payment_methods_serializers.py	/^class PaymentMethodUrl(serializers.HyperlinkedRelatedField):$/;"	c
PaymentProcessorBase	./silver/payment_processors/base.py	/^class PaymentProcessorBase(object):$/;"	c
PaymentProcessorDetail	./silver/api/views/payment_method_views.py	/^class PaymentProcessorDetail(RetrieveAPIView):$/;"	c
PaymentProcessorList	./silver/api/views/payment_method_views.py	/^class PaymentProcessorList(ListAPIView):$/;"	c
PaymentProcessorSerializer	./silver/api/serializers/payment_methods_serializers.py	/^class PaymentProcessorSerializer(serializers.Serializer):$/;"	c
PaymentProcessorTypes	./silver/payment_processors/mixins.py	/^class PaymentProcessorTypes(object):$/;"	c
PaymentProcessorUrl	./silver/api/serializers/payment_methods_serializers.py	/^class PaymentProcessorUrl(serializers.HyperlinkedRelatedField):$/;"	c
PaymentProcessors	./silver/models/payment_methods.py	/^    class PaymentProcessors:$/;"	c	class:PaymentMethod
Pending	./silver/models/transactions/transaction.py	/^        Pending = 'pending'$/;"	v	class:Transaction.States
Plan	./silver/models/plans.py	/^class Plan(models.Model):$/;"	c
PlanAdmin	./silver/admin.py	/^class PlanAdmin(ModelAdmin):$/;"	c
PlanDetail	./silver/api/views/plan_views.py	/^class PlanDetail(generics.RetrieveDestroyAPIView):$/;"	c
PlanFactory	./silver/tests/factories.py	/^class PlanFactory(factory.django.DjangoModelFactory):$/;"	c
PlanFilter	./silver/api/filters.py	/^class PlanFilter(FilterSet):$/;"	c
PlanForm	./silver/admin.py	/^class PlanForm(forms.ModelForm):$/;"	c
PlanList	./silver/api/views/plan_views.py	/^class PlanList(generics.ListCreateAPIView):$/;"	c
PlanManager	./silver/models/plans.py	/^class PlanManager(models.Manager):$/;"	c
PlanMeteredFeatures	./silver/api/views/plan_views.py	/^class PlanMeteredFeatures(generics.ListAPIView):$/;"	c
PlanSerializer	./silver/api/serializers/plans_serializer.py	/^class PlanSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
ProductCode	./silver/models/product_codes.py	/^class ProductCode(models.Model):$/;"	c
ProductCodeFactory	./silver/tests/factories.py	/^class ProductCodeFactory(factory.django.DjangoModelFactory):$/;"	c
ProductCodeListCreate	./silver/api/views/product_code_views.py	/^class ProductCodeListCreate(generics.ListCreateAPIView):$/;"	c
ProductCodeRelatedField	./silver/api/serializers/product_codes_serializer.py	/^class ProductCodeRelatedField(serializers.SlugRelatedField):$/;"	c
ProductCodeRetrieveUpdate	./silver/api/views/product_code_views.py	/^class ProductCodeRetrieveUpdate(generics.RetrieveUpdateAPIView):$/;"	c
ProductCodeSerializer	./silver/api/serializers/product_codes_serializer.py	/^class ProductCodeSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
Proforma	./silver/models/documents/proforma.py	/^class Proforma(BillingDocumentBase):$/;"	c
ProformaAdmin	./silver/admin.py	/^class ProformaAdmin(BillingDocumentAdmin):$/;"	c
ProformaAdminTestCase	./silver/tests/admin/test_proforma.py	/^class ProformaAdminTestCase(TestCase):$/;"	c
ProformaAutocomplete	./silver/views.py	/^class ProformaAutocomplete(DocumentAutocomplete):$/;"	c
ProformaDocumentEntryInline	./silver/admin.py	/^class ProformaDocumentEntryInline(DocumentEntryInline):$/;"	c
ProformaEntryCreate	./silver/api/views/documents_views.py	/^class ProformaEntryCreate(DocEntryCreate):$/;"	c
ProformaEntryUpdateDestroy	./silver/api/views/documents_views.py	/^class ProformaEntryUpdateDestroy(DocEntryUpdateDestroy):$/;"	c
ProformaFactory	./silver/tests/factories.py	/^class ProformaFactory(factory.django.DjangoModelFactory):$/;"	c
ProformaFilter	./silver/api/filters.py	/^class ProformaFilter(BillingDocumentFilter):$/;"	c
ProformaForm	./silver/admin.py	/^class ProformaForm(BillingDocumentForm):$/;"	c
ProformaInvoiceRetrieveCreate	./silver/api/views/documents_views.py	/^class ProformaInvoiceRetrieveCreate(APIView):$/;"	c
ProformaListCreate	./silver/api/views/documents_views.py	/^class ProformaListCreate(generics.ListCreateAPIView):$/;"	c
ProformaManager	./silver/models/documents/proforma.py	/^class ProformaManager(BillingDocumentManager):$/;"	c
ProformaRetrieveUpdate	./silver/api/views/documents_views.py	/^class ProformaRetrieveUpdate(generics.RetrieveUpdateAPIView):$/;"	c
ProformaSerializer	./silver/api/serializers/documents_serializers.py	/^class ProformaSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
ProformaStateHandler	./silver/api/views/documents_views.py	/^class ProformaStateHandler(APIView):$/;"	c
Provider	./silver/models/billing_entities/provider.py	/^class Provider(BaseBillingEntity):$/;"	c
ProviderAdmin	./silver/admin.py	/^class ProviderAdmin(LiveModelAdmin):$/;"	c
ProviderFactory	./silver/tests/factories.py	/^class ProviderFactory(factory.django.DjangoModelFactory):$/;"	c
ProviderFilter	./silver/api/filters.py	/^class ProviderFilter(FilterSet):$/;"	c
ProviderListCreate	./silver/api/views/billing_entities_views.py	/^class ProviderListCreate(ListBulkCreateAPIView):$/;"	c
ProviderRetrieveUpdateDestroy	./silver/api/views/billing_entities_views.py	/^class ProviderRetrieveUpdateDestroy(generics.RetrieveUpdateDestroyAPIView):$/;"	c
ProviderSerializer	./silver/api/serializers/billing_entities_serializers.py	/^class ProviderSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
ProviderUrl	./silver/api/serializers/billing_entities_serializers.py	/^class ProviderUrl(HyperlinkedRelatedField):$/;"	c
REFUND_CODES	./silver/models/transactions/codes.py	/^REFUND_CODES = {$/;"	v
REST_FRAMEWORK	./settings.py	/^REST_FRAMEWORK = {$/;"	v
ROOT_URLCONF	./settings.py	/^ROOT_URLCONF = 'silver.urls'$/;"	v
RateNotFound	./silver/currencies.py	/^class RateNotFound(Exception):$/;"	c
Refunded	./silver/models/transactions/transaction.py	/^        Refunded = 'refunded'$/;"	v	class:Transaction.States
SECRET_KEY	./settings.py	/^SECRET_KEY = 'secret'$/;"	v
SILVER_AUTOMATICALLY_CREATE_TRANSACTIONS	./settings.py	/^SILVER_AUTOMATICALLY_CREATE_TRANSACTIONS = True$/;"	v
SILVER_DEFAULT_DUE_DAYS	./settings.py	/^SILVER_DEFAULT_DUE_DAYS = 5$/;"	v
SILVER_DOCUMENT_PREFIX	./settings.py	/^SILVER_DOCUMENT_PREFIX = 'documents\/'$/;"	v
SILVER_DOCUMENT_STORAGE	./settings.py	/^SILVER_DOCUMENT_STORAGE = None$/;"	v
SILVER_PAYMENT_TOKEN_EXPIRATION	./settings.py	/^SILVER_PAYMENT_TOKEN_EXPIRATION = datetime.timedelta(minutes=5)$/;"	v
SITE_ID	./settings.py	/^SITE_ID = 1$/;"	v
STATES	./silver/models/documents/base.py	/^    class STATES(object):$/;"	c	class:BillingDocumentBase
STATES	./silver/models/subscriptions.py	/^    class STATES(object):$/;"	c	class:Subscription
STATE_CHOICES	./silver/models/documents/base.py	/^    STATE_CHOICES = Choices($/;"	v	class:BillingDocumentBase
STATE_CHOICES	./silver/models/subscriptions.py	/^    STATE_CHOICES = Choices($/;"	v	class:Subscription
STATIC_ROOT	./settings.py	/^STATIC_ROOT = PROJECT_ROOT + '\/app_static\/'$/;"	v
STATIC_URL	./settings.py	/^STATIC_URL = '\/app_static\/'$/;"	v
Settled	./silver/models/transactions/transaction.py	/^        Settled = 'settled'$/;"	v	class:Transaction.States
States	./silver/models/transactions/transaction.py	/^    class States:$/;"	c	class:Transaction
Subscription	./silver/models/subscriptions.py	/^class Subscription(models.Model):$/;"	c
SubscriptionActivate	./silver/api/views/subscription_views.py	/^class SubscriptionActivate(APIView):$/;"	c
SubscriptionAdmin	./silver/admin.py	/^class SubscriptionAdmin(ModelAdmin):$/;"	c
SubscriptionCancel	./silver/api/views/subscription_views.py	/^class SubscriptionCancel(APIView):$/;"	c
SubscriptionDetail	./silver/api/views/subscription_views.py	/^class SubscriptionDetail(generics.RetrieveUpdateAPIView):$/;"	c
SubscriptionDetailSerializer	./silver/api/serializers/subscriptions_serializers.py	/^class SubscriptionDetailSerializer(SubscriptionSerializer):$/;"	c
SubscriptionFactory	./silver/tests/factories.py	/^class SubscriptionFactory(factory.django.DjangoModelFactory):$/;"	c
SubscriptionFilter	./silver/api/filters.py	/^class SubscriptionFilter(FilterSet):$/;"	c
SubscriptionList	./silver/api/views/subscription_views.py	/^class SubscriptionList(generics.ListCreateAPIView):$/;"	c
SubscriptionReactivate	./silver/api/views/subscription_views.py	/^class SubscriptionReactivate(APIView):$/;"	c
SubscriptionSerializer	./silver/api/serializers/subscriptions_serializers.py	/^class SubscriptionSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
SubscriptionUrl	./silver/api/serializers/subscriptions_serializers.py	/^class SubscriptionUrl(serializers.HyperlinkedRelatedField):$/;"	c
TEMPLATES	./settings.py	/^TEMPLATES = [$/;"	v
TIME_ZONE	./settings.py	/^TIME_ZONE = 'UTC'$/;"	v
TRANSACTION_SAVE_TIME_LIMIT	./settings.py	/^TRANSACTION_SAVE_TIME_LIMIT = 5$/;"	v
TestCustomerEndpoints	./silver/tests/spec/test_customer.py	/^class TestCustomerEndpoints(APITestCase):$/;"	c
TestDocumentEndpoints	./silver/tests/spec/test_documents.py	/^class TestDocumentEndpoints(APITestCase):$/;"	c
TestDocumentsTransactions	./silver/tests/integration/test_documents_transactions.py	/^class TestDocumentsTransactions(TestCase):$/;"	c
TestDocumentsTransactions	./silver/tests/integration/test_transactions_payment_methods.py	/^class TestDocumentsTransactions(TestCase):$/;"	c
TestExecuteTransactionsCommand	./silver/tests/commands/test_execute_transactions.py	/^class TestExecuteTransactionsCommand(TestCase):$/;"	c
TestGenerateDocsArguments	./silver/tests/commands/test_generate_docs_args.py	/^class TestGenerateDocsArguments(TestCase):$/;"	c
TestInvoice	./silver/tests/unit/test_invoice.py	/^class TestInvoice(TestCase):$/;"	c
TestInvoiceEndpoints	./silver/tests/spec/test_invoice.py	/^class TestInvoiceEndpoints(APITestCase):$/;"	c
TestInvoiceGenerationCommand	./silver/tests/commands/test_generate_docs.py	/^class TestInvoiceGenerationCommand(TestCase):$/;"	c
TestMeteredFeatureEndpoint	./silver/tests/spec/test_metered_feature.py	/^class TestMeteredFeatureEndpoint(APITestCase):$/;"	c
TestPaymentMethodEndpoints	./silver/tests/spec/test_payment_method.py	/^class TestPaymentMethodEndpoints(APIGetAssert):$/;"	c
TestPaymentMethodSerializer	./silver/tests/unit/test_payment_method_serializer.py	/^class TestPaymentMethodSerializer(TestCase):$/;"	c
TestPaymentProcessorsEndpoints	./silver/tests/spec/test_payment_processors.py	/^class TestPaymentProcessorsEndpoints(APITestCase):$/;"	c
TestPaymentUrls	./silver/tests/spec/test_payments.py	/^class TestPaymentUrls(APITestCase):$/;"	c
TestPaymentsUtilMethods	./silver/tests/unit/test_payments_util.py	/^class TestPaymentsUtilMethods(TestCase):$/;"	c
TestPlanEndpoint	./silver/tests/spec/test_plan.py	/^class TestPlanEndpoint(APITestCase):$/;"	c
TestProforma	./silver/tests/unit/test_proforma.py	/^class TestProforma(TestCase):$/;"	c
TestProformaEndpoints	./silver/tests/spec/test_proforma.py	/^class TestProformaEndpoints(APITestCase):$/;"	c
TestProviderEndpoints	./silver/tests/spec/test_provider.py	/^class TestProviderEndpoints(APITestCase):$/;"	c
TestSubscription	./silver/tests/unit/test_subscription.py	/^class TestSubscription(TestCase):$/;"	c
TestSubscriptionEndpoint	./silver/tests/spec/test_subscription.py	/^class TestSubscriptionEndpoint(APITestCase):$/;"	c
TestSubscriptionShouldBeBilled	./silver/tests/unit/test_subscription.py	/^class TestSubscriptionShouldBeBilled(TestCase):$/;"	c
TestTransactionEndpoint	./silver/tests/spec/test_transactions.py	/^class TestTransactionEndpoint(APITestCase):$/;"	c
TestUpdateTransactionsStatusCommand	./silver/tests/commands/test_update_transactions_status.py	/^class TestUpdateTransactionsStatusCommand(TestCase):$/;"	c
Transaction	./silver/models/transactions/transaction.py	/^class Transaction(models.Model):$/;"	c
TransactionAction	./silver/api/views/transaction_views.py	/^class TransactionAction(APIView):$/;"	c
TransactionAdmin	./silver/admin.py	/^class TransactionAdmin(ModelAdmin):$/;"	c
TransactionDetail	./silver/api/views/transaction_views.py	/^class TransactionDetail(RetrieveUpdateAPIView):$/;"	c
TransactionFactory	./silver/tests/factories.py	/^class TransactionFactory(factory.django.DjangoModelFactory):$/;"	c
TransactionFilter	./silver/api/filters.py	/^class TransactionFilter(FilterSet):$/;"	c
TransactionForm	./silver/admin.py	/^class TransactionForm(forms.ModelForm):$/;"	c
TransactionList	./silver/api/views/transaction_views.py	/^class TransactionList(ListCreateAPIView):$/;"	c
TransactionPaymentUrl	./silver/api/serializers/transaction_serializers.py	/^class TransactionPaymentUrl(serializers.HyperlinkedIdentityField):$/;"	c
TransactionSerializer	./silver/api/serializers/transaction_serializers.py	/^class TransactionSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
TransactionUrl	./silver/api/serializers/transaction_serializers.py	/^class TransactionUrl(serializers.HyperlinkedIdentityField):$/;"	c
Triggered	./silver/payment_processors/mixins.py	/^    Triggered = "triggered"$/;"	v	class:PaymentProcessorTypes
TriggeredProcessor	./silver/tests/fixtures.py	/^class TriggeredProcessor(PaymentProcessorBase, TriggeredProcessorMixin):$/;"	c
TriggeredProcessorMixin	./silver/payment_processors/mixins.py	/^class TriggeredProcessorMixin(BaseActionableProcessor):$/;"	c
USE_TZ	./settings.py	/^USE_TZ = True$/;"	v
UnsavedForeignKey	./silver/utils/models.py	/^class UnsavedForeignKey(models.ForeignKey):$/;"	c
UnsupportedMediaPathException	./silver/utils/pdf.py	/^class UnsupportedMediaPathException(Exception):$/;"	c
WEEK	./silver/models/plans.py	/^        WEEK = 'week'$/;"	v	class:Plan.INTERVALS
YEAR	./silver/models/plans.py	/^        YEAR = 'year'$/;"	v	class:Plan.INTERVALS
_INTERVALS_CODES	./silver/models/subscriptions.py	/^    _INTERVALS_CODES = {$/;"	v	class:Subscription
__eq__	./silver/payment_processors/base.py	/^    def __eq__(self, other):$/;"	m	class:PaymentProcessorBase	file:
__init__	./silver/admin.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:BillingDocumentForm
__init__	./silver/admin.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:TransactionForm
__init__	./silver/api/serializers/documents_serializers.py	/^    def __init__(self, proforma_view_name, invoice_view_name, *args, **kwargs):$/;"	m	class:DocumentUrl
__init__	./silver/api/serializers/payment_methods_serializers.py	/^    def __init__(self, view_name=None, **kwargs):$/;"	m	class:PaymentProcessorUrl
__init__	./silver/api/serializers/product_codes_serializer.py	/^    def __init__(self, **kwargs):$/;"	m	class:ProductCodeRelatedField
__init__	./silver/currencies.py	/^    def __init__(self, from_currency=None, to_currency=None, date=None):$/;"	m	class:RateNotFound
__init__	./silver/models/billing_entities/customer.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Customer
__init__	./silver/models/billing_entities/provider.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Provider
__init__	./silver/models/documents/base.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:BillingDocumentBase
__init__	./silver/models/documents/invoice.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Invoice
__init__	./silver/models/documents/proforma.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Proforma
__init__	./silver/models/payment_methods.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:PaymentMethod
__init__	./silver/models/transactions/transaction.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Transaction
__init__	./silver/payment_processors/base.py	/^    def __init__(self, name):$/;"	m	class:PaymentProcessorBase
__init__	./silver/payment_processors/forms.py	/^    def __init__(self, payment_method, transaction, request=None, *args, **kwargs):$/;"	m	class:GenericTransactionForm
__init__	./silver/tests/commands/test_generate_docs.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:TestInvoiceGenerationCommand
__init__	./silver/tests/commands/test_generate_docs_args.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:TestGenerateDocsArguments
__init__	./silver/views.py	/^    def __init__(self, **kwargs):$/;"	m	class:InvoiceAutocomplete
__init__	./silver/views.py	/^    def __init__(self, **kwargs):$/;"	m	class:ProformaAutocomplete
__ne__	./silver/payment_processors/base.py	/^    def __ne__(self, other):$/;"	m	class:PaymentProcessorBase	file:
__repr__	./silver/payment_processors/base.py	/^    def __repr__(self):$/;"	m	class:PaymentProcessorBase	file:
__str__	./silver/currencies.py	/^    def __str__(self):$/;"	m	class:RateNotFound	file:
__str__	./silver/payment_processors/base.py	/^    def __str__(self):$/;"	m	class:PaymentProcessorBase	file:
__unicode__	./silver/models/billing_entities/base.py	/^    def __unicode__(self):$/;"	m	class:BaseBillingEntity	file:
__unicode__	./silver/models/documents/base.py	/^    def __unicode__(self):$/;"	m	class:BillingDocumentBase	file:
__unicode__	./silver/models/documents/entries.py	/^    def __unicode__(self):$/;"	m	class:DocumentEntry	file:
__unicode__	./silver/models/payment_methods.py	/^    def __unicode__(self):$/;"	m	class:PaymentMethod	file:
__unicode__	./silver/models/plans.py	/^    def __unicode__(self):$/;"	m	class:MeteredFeature	file:
__unicode__	./silver/models/plans.py	/^    def __unicode__(self):$/;"	m	class:Plan	file:
__unicode__	./silver/models/product_codes.py	/^    def __unicode__(self):$/;"	m	class:ProductCode	file:
__unicode__	./silver/models/subscriptions.py	/^    def __unicode__(self):$/;"	m	class:BillingLog	file:
__unicode__	./silver/models/subscriptions.py	/^    def __unicode__(self):$/;"	m	class:MeteredFeatureUnitsLog	file:
__unicode__	./silver/models/subscriptions.py	/^    def __unicode__(self):$/;"	m	class:Subscription	file:
__unicode__	./silver/models/transactions/transaction.py	/^    def __unicode__(self):$/;"	m	class:Transaction	file:
__unicode__	./silver/payment_processors/base.py	/^    def __unicode__(self):$/;"	m	class:PaymentProcessorBase	file:
__version__	./silver/api/__init__.py	/^__version__ = '0.1.2'$/;"	v
_add_mfs	./silver/models/subscriptions.py	/^    def _add_mfs(self, start_date, end_date, invoice=None, proforma=None):$/;"	m	class:Subscription
_add_mfs_for_trial	./silver/models/subscriptions.py	/^    def _add_mfs_for_trial(self, start_date, end_date, invoice=None,$/;"	m	class:Subscription
_add_plan_trial	./silver/models/subscriptions.py	/^    def _add_plan_trial(self, start_date, end_date, invoice=None,$/;"	m	class:Subscription
_add_plan_value	./silver/models/subscriptions.py	/^    def _add_plan_value(self, start_date, end_date, invoice=None,$/;"	m	class:Subscription
_add_trial_value	./silver/models/subscriptions.py	/^    def _add_trial_value(self, start_date, end_date, invoice=None,$/;"	m	class:Subscription
_base_entry_context	./silver/models/subscriptions.py	/^    def _base_entry_context(self):$/;"	m	class:Subscription
_bill_subscription_into_document	./silver/documents_generator.py	/^    def _bill_subscription_into_document(self, subscription, billing_date, document=None):$/;"	m	class:DocumentsGenerator
_build_entry_context	./silver/models/subscriptions.py	/^    def _build_entry_context(self, context):$/;"	m	class:Subscription
_cancel	./silver/models/documents/base.py	/^    def _cancel(self, cancel_date=None):$/;"	m	class:BillingDocumentBase
_cancel_at_end_of_billing_cycle	./silver/models/subscriptions.py	/^    def _cancel_at_end_of_billing_cycle(self):$/;"	m	class:Subscription
_cancel_now	./silver/models/subscriptions.py	/^    def _cancel_now(self):$/;"	m	class:Subscription
_compute_monthly_totals	./silver/admin.py	/^    def _compute_monthly_totals(self, model_klass, provider, documents):$/;"	m	class:ProviderAdmin
_create	./silver/tests/factories.py	/^    def _create(cls, model_class, *args, **kwargs):$/;"	m	class:TransactionFactory
_create_document	./silver/documents_generator.py	/^    def _create_document(self, subscription, billing_date):$/;"	m	class:DocumentsGenerator
_cycle_end_date	./silver/models/subscriptions.py	/^    def _cycle_end_date(self, reference_date=None, ignore_trial=None, granulate=None):$/;"	m	class:Subscription
_cycle_start_date	./silver/models/subscriptions.py	/^    def _cycle_start_date(self, reference_date=None, ignore_trial=None, granulate=None):$/;"	m	class:Subscription
_document_entries	./silver/models/documents/base.py	/^    _document_entries = None$/;"	v	class:BillingDocumentBase
_download_pdf	./silver/admin.py	/^    def _download_pdf(self, url, base_path):$/;"	m	class:BillingDocumentAdmin
_entries	./silver/models/documents/base.py	/^    def _entries(self):$/;"	m	class:BillingDocumentBase
_entry_description	./silver/models/subscriptions.py	/^    def _entry_description(self, context):$/;"	m	class:Subscription
_entry_unit	./silver/models/subscriptions.py	/^    def _entry_unit(self, context):$/;"	m	class:Subscription
_exception_thrower	./silver/tests/admin/test_invoice.py	/^        def _exception_thrower(*args):$/;"	f	function:InvoiceAdminTestCase.test_actions_failed_no_log_entries
_exception_thrower	./silver/tests/admin/test_proforma.py	/^        def _exception_thrower(*args):$/;"	f	function:ProformaAdminTestCase.test_actions_failed_no_log_entries
_filter_providers	./silver/tests/spec/test_provider.py	/^    def _filter_providers(self, *args, **kwargs):$/;"	m	class:TestProviderEndpoints
_generate_all	./silver/documents_generator.py	/^    def _generate_all(self, billing_date=None, customers=None,$/;"	m	class:DocumentsGenerator
_generate_for_single_subscription	./silver/documents_generator.py	/^    def _generate_for_single_subscription(self, subscription=None, billing_date=None,$/;"	m	class:DocumentsGenerator
_generate_for_user_with_consolidated_billing	./silver/documents_generator.py	/^    def _generate_for_user_with_consolidated_billing(self, customer, billing_date, force_generate):$/;"	m	class:DocumentsGenerator
_generate_for_user_without_consolidated_billing	./silver/documents_generator.py	/^    def _generate_for_user_without_consolidated_billing(self, customer, billing_date,$/;"	m	class:DocumentsGenerator
_generate_number	./silver/models/documents/base.py	/^    def _generate_number(self, default_starting_number=1):$/;"	m	class:BillingDocumentBase
_get_aligned_start_date_after_date	./silver/models/subscriptions.py	/^    def _get_aligned_start_date_after_date(self, reference_date, interval_type,$/;"	m	class:Subscription
_get_consumed_units	./silver/models/subscriptions.py	/^    def _get_consumed_units(self, metered_feature, proration_percent,$/;"	m	class:Subscription
_get_consumed_units_from_total_included_in_trial	./silver/models/subscriptions.py	/^    def _get_consumed_units_from_total_included_in_trial(self, metered_feature,$/;"	m	class:Subscription
_get_decimal_places	./silver/tests/unit/test_invoice.py	/^    def _get_decimal_places(self, number):$/;"	m	class:TestInvoice
_get_decimal_places	./silver/tests/unit/test_proforma.py	/^    def _get_decimal_places(self, number):$/;"	m	class:TestProforma
_get_entries	./silver/models/documents/base.py	/^    def _get_entries(self):$/;"	m	class:BillingDocumentBase
_get_expected_data	./silver/tests/spec/test_documents.py	/^    def _get_expected_data(self, document, transactions=None):$/;"	m	class:TestDocumentEndpoints
_get_extra_consumed_units_during_trial	./silver/models/subscriptions.py	/^    def _get_extra_consumed_units_during_trial(self, metered_feature,$/;"	m	class:Subscription
_get_interval_end_date	./silver/models/subscriptions.py	/^    def _get_interval_end_date(self, date=None):$/;"	m	class:Subscription
_get_jwt_token	./silver/utils/payments.py	/^def _get_jwt_token(transaction):$/;"	f
_get_last_start_date_within_range	./silver/models/subscriptions.py	/^    def _get_last_start_date_within_range(self, range_start, range_end,$/;"	m	class:Subscription
_get_proration_status_and_percent	./silver/models/subscriptions.py	/^    def _get_proration_status_and_percent(self, start_date, end_date):$/;"	m	class:Subscription
_has_existing_customer_with_consolidated_billing	./silver/models/subscriptions.py	/^    def _has_existing_customer_with_consolidated_billing(self):$/;"	m	class:Subscription
_ignore_trial_end	./silver/models/subscriptions.py	/^    def _ignore_trial_end(self):$/;"	m	class:Subscription
_issue	./silver/models/documents/base.py	/^    def _issue(self, issue_date=None, due_date=None):$/;"	m	class:BillingDocumentBase
_jwt_token	./silver/tests/spec/test_documents.py	/^    def _jwt_token(self, *args, **kwargs):$/;"	m	class:TestDocumentEndpoints
_last_state	./silver/models/documents/base.py	/^    _last_state = None$/;"	v	class:BillingDocumentBase
_log_should_be_billed_result	./silver/models/subscriptions.py	/^    def _log_should_be_billed_result(self, billing_date, interval_end):$/;"	m	class:Subscription
_log_subscription_billing	./silver/documents_generator.py	/^    def _log_subscription_billing(self, document, subscription):$/;"	m	class:DocumentsGenerator
_log_value_state	./silver/models/subscriptions.py	/^    def _log_value_state(self, value_state):$/;"	m	class:Subscription
_model	./silver/admin.py	/^    def _model(self):$/;"	m	class:BillingDocumentAdmin
_model	./silver/admin.py	/^    def _model(self):$/;"	m	class:InvoiceAdmin
_model	./silver/admin.py	/^    def _model(self):$/;"	m	class:ProformaAdmin
_model_name	./silver/admin.py	/^    def _model_name(self):$/;"	m	class:BillingDocumentAdmin
_model_name	./silver/admin.py	/^    def _model_name(self):$/;"	m	class:InvoiceAdmin
_model_name	./silver/admin.py	/^    def _model_name(self):$/;"	m	class:ProformaAdmin
_new_invoice	./silver/models/documents/proforma.py	/^    def _new_invoice(self):$/;"	m	class:Proforma
_pay	./silver/models/documents/base.py	/^    def _pay(self, paid_date=None):$/;"	m	class:BillingDocumentBase
_provider	./silver/models/transactions/transaction.py	/^    _provider = None$/;"	v	class:Transaction
_should_activate_with_free_trial	./silver/models/subscriptions.py	/^    def _should_activate_with_free_trial(self):$/;"	m	class:Subscription
_starting_number	./silver/models/documents/invoice.py	/^    def _starting_number(self):$/;"	m	class:Invoice
_starting_number	./silver/models/documents/proforma.py	/^    def _starting_number(self):$/;"	m	class:Proforma
_storage	./silver/models/documents/base.py	/^    _storage = _storage_klass(*_storage[1], **_storage[2])$/;"	v
_storage	./silver/models/documents/base.py	/^_storage = getattr(settings, 'SILVER_DOCUMENT_STORAGE', None)$/;"	v
_storage_klass	./silver/models/documents/base.py	/^    _storage_klass = import_string(_storage[0])$/;"	v
_total	./silver/models/documents/base.py	/^    _total = models.DecimalField(max_digits=19, decimal_places=2,$/;"	v	class:BillingDocumentBase
_total_in_transaction_currency	./silver/models/documents/base.py	/^    _total_in_transaction_currency = models.DecimalField(max_digits=19,$/;"	v	class:BillingDocumentBase
_transaction_data	./silver/tests/spec/test_transactions.py	/^    def _transaction_data(self, transaction):$/;"	m	class:TestTransactionEndpoint
abstract	./silver/models/billing_entities/base.py	/^        abstract = True$/;"	v	class:BaseBillingEntity.Meta
action	./silver/management/commands/tweak_billing_log.py	/^                    action='store',$/;"	v	class:Command
actions	./silver/admin.py	/^    actions = BillingDocumentAdmin.actions + ['create_invoice']$/;"	v	class:ProformaAdmin
actions	./silver/admin.py	/^    actions = ['activate', 'cancel_now', 'cancel_at_end_of_cycle', 'end']$/;"	v	class:SubscriptionAdmin
actions	./silver/admin.py	/^    actions = ['delete_selected']$/;"	v	class:LiveModelAdmin
actions	./silver/admin.py	/^    actions = ['execute', 'process', 'cancel', 'settle', 'fail']$/;"	v	class:TransactionAdmin
actions	./silver/admin.py	/^    actions = ['generate_all_documents']$/;"	v	class:CustomerAdmin
actions	./silver/admin.py	/^    actions = ['generate_monthly_totals']$/;"	v	class:ProviderAdmin
actions	./silver/admin.py	/^    actions = ['issue', 'pay', 'cancel', 'clone', 'download_selected_documents',$/;"	v	class:BillingDocumentAdmin
activate	./silver/admin.py	/^    def activate(self, request, queryset):$/;"	m	class:SubscriptionAdmin
activate	./silver/models/subscriptions.py	/^    def activate(self, start_date=None, trial_end_date=None):$/;"	m	class:Subscription
active	./silver/api/filters.py	/^    active = BooleanFilter(name='is_active', lookup_expr='iexact')$/;"	v	class:CustomerFilter
add_arguments	./silver/management/commands/execute_transactions.py	/^    def add_arguments(self, parser):$/;"	m	class:Command
add_arguments	./silver/management/commands/fetch_transactions_status.py	/^    def add_arguments(self, parser):$/;"	m	class:Command
add_arguments	./silver/management/commands/generate_docs.py	/^    def add_arguments(self, parser):$/;"	m	class:Command
add_subscription_cycles_to_document	./silver/documents_generator.py	/^    def add_subscription_cycles_to_document(self, billing_date, metered_features_billed_up_to,$/;"	m	class:DocumentsGenerator
added_at	./silver/models/payment_methods.py	/^    added_at = models.DateTimeField(default=timezone.now)$/;"	v	class:PaymentMethod
address	./silver/models/billing_entities/base.py	/^    def address(self):$/;"	m	class:BaseBillingEntity
address_1	./silver/models/billing_entities/base.py	/^    address_1 = models.CharField(max_length=128)$/;"	v	class:BaseBillingEntity
address_1	./silver/tests/factories.py	/^    address_1 = factory.Sequence(lambda n: faker.address())$/;"	v	class:CustomerFactory
address_1	./silver/tests/factories.py	/^    address_1 = factory.Sequence(lambda n: faker.address())$/;"	v	class:ProviderFactory
address_2	./silver/models/billing_entities/base.py	/^    address_2 = models.CharField(max_length=128, blank=True, null=True)$/;"	v	class:BaseBillingEntity
address_2	./silver/tests/factories.py	/^    address_2 = factory.Sequence(lambda n: faker.address())$/;"	v	class:CustomerFactory
address_2	./silver/tests/factories.py	/^    address_2 = factory.Sequence(lambda n: faker.address())$/;"	v	class:ProviderFactory
admin_change_url	./silver/models/documents/base.py	/^    def admin_change_url(self):$/;"	m	class:BillingDocumentBase
allow_unsaved_instance_assignment	./silver/utils/models.py	/^    allow_unsaved_instance_assignment = True$/;"	v	class:UnsavedForeignKey
allowed_actions	./silver/api/views/payment_method_views.py	/^    allowed_actions = ('cancel', )$/;"	v	class:PaymentMethodAction
allowed_actions	./silver/api/views/transaction_views.py	/^    allowed_actions = ('cancel', )$/;"	v	class:TransactionAction
allowed_currencies	./silver/api/serializers/payment_methods_serializers.py	/^    allowed_currencies = serializers.ListField()$/;"	v	class:PaymentProcessorSerializer
allowed_currencies	./silver/models/payment_methods.py	/^    def allowed_currencies(self):$/;"	m	class:PaymentMethod
allowed_currencies	./silver/payment_processors/base.py	/^    allowed_currencies = ()$/;"	v	class:PaymentProcessorBase
allowed_currencies	./silver/tests/fixtures.py	/^    def allowed_currencies(self):$/;"	m	class:TriggeredProcessor
amount	./silver/api/serializers/transaction_serializers.py	/^    amount = serializers.DecimalField(required=False, decimal_places=2,$/;"	v	class:TransactionSerializer
amount	./silver/models/plans.py	/^    amount = models.DecimalField($/;"	v	class:Plan
amount	./silver/models/transactions/transaction.py	/^    amount = models.DecimalField($/;"	v	class:Transaction
amount	./silver/tests/factories.py	/^    amount = factory.Sequence(lambda n: n)$/;"	v	class:PlanFactory
amount_paid_in_transaction_currency	./silver/models/documents/base.py	/^    def amount_paid_in_transaction_currency(self):$/;"	m	class:BillingDocumentBase
amount_pending_in_transaction_currency	./silver/models/documents/base.py	/^    def amount_pending_in_transaction_currency(self):$/;"	m	class:BillingDocumentBase
amount_to_be_charged_in_transaction_currency	./silver/models/documents/base.py	/^    def amount_to_be_charged_in_transaction_currency(self):$/;"	m	class:BillingDocumentBase
archived_customer	./silver/models/documents/base.py	/^    archived_customer = JSONField(default=dict, null=True, blank=True)$/;"	v	class:BillingDocumentBase
archived_provider	./silver/models/documents/base.py	/^    archived_provider = JSONField(default=dict, null=True, blank=True)$/;"	v	class:BillingDocumentBase
as_choices	./silver/models/payment_methods.py	/^        def as_choices(cls):$/;"	m	class:PaymentMethod.PaymentProcessors
as_choices	./silver/models/transactions/transaction.py	/^        def as_choices(cls):$/;"	m	class:Transaction.States
as_list	./silver/models/payment_methods.py	/^        def as_list(cls):$/;"	m	class:PaymentMethod.PaymentProcessors
as_list	./silver/models/transactions/transaction.py	/^        def as_list(cls):$/;"	m	class:Transaction.States
assert_get_data	./silver/tests/spec/util/api_get_assert.py	/^    def assert_get_data(self, url, expected_data):$/;"	m	class:APIGetAssert
bases	./silver/migrations/0043_auto_20171113_1048.py	/^            bases=('silver.billingdocumentbase',),$/;"	v	class:Migration
billed_up_to_dates	./silver/models/subscriptions.py	/^    def billed_up_to_dates(self):$/;"	m	class:Subscription
billing_date	./silver/models/subscriptions.py	/^    billing_date = models.DateField($/;"	v	class:BillingLog
billing_name	./silver/models/billing_entities/base.py	/^    def billing_name(self):$/;"	m	class:BaseBillingEntity
blank	./silver/migrations/0001_initial.py	/^                blank=True,$/;"	v	class:Migration
blank	./silver/migrations/0008_auto_20150430_1804.py	/^                blank=True,$/;"	v	class:Migration
blank	./silver/migrations/0009_auto_20150717_1428.py	/^                blank=True),$/;"	v	class:Migration
bucket_end_date	./silver/models/subscriptions.py	/^    def bucket_end_date(self, reference_date=None):$/;"	m	class:Subscription
bucket_start_date	./silver/models/subscriptions.py	/^    def bucket_start_date(self, reference_date=None):$/;"	m	class:Subscription
build_absolute_test_url	./silver/tests/utils.py	/^def build_absolute_test_url(relative_path):$/;"	f
can_be_consumed	./silver/models/transactions/transaction.py	/^    def can_be_consumed(self):$/;"	m	class:Transaction
cancel	./silver/admin.py	/^    def cancel(self, request, queryset):$/;"	m	class:InvoiceAdmin
cancel	./silver/admin.py	/^    def cancel(self, request, queryset):$/;"	m	class:ProformaAdmin
cancel	./silver/admin.py	/^    def cancel(self, request, queryset):$/;"	m	class:TransactionAdmin
cancel	./silver/models/documents/base.py	/^    def cancel(self, cancel_date=None):$/;"	m	class:BillingDocumentBase
cancel	./silver/models/payment_methods.py	/^    def cancel(self):$/;"	m	class:PaymentMethod
cancel	./silver/models/subscriptions.py	/^    def cancel(self, when):$/;"	m	class:Subscription
cancel	./silver/models/transactions/transaction.py	/^    def cancel(self, cancel_code='default', cancel_reason='Unknown cancel reason'):$/;"	m	class:Transaction
cancel_at_end_of_cycle	./silver/admin.py	/^    def cancel_at_end_of_cycle(self, request, queryset):$/;"	m	class:SubscriptionAdmin
cancel_billing_documents	./silver/models/subscriptions.py	/^def cancel_billing_documents(sender, instance, **kwargs):$/;"	f
cancel_code	./silver/models/transactions/transaction.py	/^    cancel_code = models.CharField($/;"	v	class:Transaction
cancel_date	./silver/api/filters.py	/^    cancel_date = DateFilter(name='cancel_date', lookup_expr='iexact')$/;"	v	class:BillingDocumentFilter
cancel_date	./silver/models/documents/base.py	/^    cancel_date = models.DateField(null=True, blank=True)$/;"	v	class:BillingDocumentBase
cancel_date	./silver/models/subscriptions.py	/^    cancel_date = models.DateField($/;"	v	class:Subscription
cancel_date	./silver/tests/factories.py	/^    cancel_date = factory.LazyAttribute($/;"	v	class:InvoiceFactory
cancel_date	./silver/tests/factories.py	/^    cancel_date = factory.LazyAttribute($/;"	v	class:ProformaFactory
cancel_now	./silver/admin.py	/^    def cancel_now(self, request, queryset):$/;"	m	class:SubscriptionAdmin
canceled	./silver/api/filters.py	/^    canceled = BooleanFilter(name='canceled')$/;"	v	class:PaymentMethodFilter
canceled	./silver/models/payment_methods.py	/^    canceled = models.BooleanField(default=False)$/;"	v	class:PaymentMethod
change_pdf_dirty_from_boolean_to_integer	./silver/migrations/0038_auto_20170724_0708.py	/^def change_pdf_dirty_from_boolean_to_integer(apps, schema_editor):$/;"	f
change_pdf_dirty_from_integer_to_boolean	./silver/migrations/0038_auto_20170724_0708.py	/^def change_pdf_dirty_from_integer_to_boolean(apps, schema_editor):$/;"	f
choices	./silver/admin.py	/^        choices=(BLANK_CHOICE_DASH + list(currencies)), required=False,$/;"	v	class:BillingDocumentForm
choices	./silver/models/transactions/transaction.py	/^        choices=[(code, code) for code in CANCEL_CODES.keys()], max_length=32,$/;"	v	class:Transaction.States
choices	./silver/models/transactions/transaction.py	/^        choices=[(code, code) for code in FAIL_CODES.keys()], max_length=32,$/;"	v	class:Transaction.States
choices	./silver/models/transactions/transaction.py	/^        choices=[(code, code) for code in REFUND_CODES.keys()], max_length=32,$/;"	v	class:Transaction.States
city	./silver/models/billing_entities/base.py	/^    city = models.CharField(max_length=128)$/;"	v	class:BaseBillingEntity
city	./silver/tests/factories.py	/^    city = factory.Sequence(lambda n: faker.city())$/;"	v	class:CustomerFactory
city	./silver/tests/factories.py	/^    city = factory.Sequence(lambda n: faker.city())$/;"	v	class:ProviderFactory
clean	./silver/admin.py	/^    def clean(self):$/;"	m	class:PlanForm
clean	./silver/admin.py	/^    def clean(self):$/;"	m	class:TransactionForm
clean	./silver/admin.py	/^    def clean(self, *args, **kwargs):$/;"	m	class:BillingDocumentForm
clean	./silver/models/billing_entities/customer.py	/^    def clean(self):$/;"	m	class:Customer
clean	./silver/models/billing_entities/provider.py	/^    def clean(self):$/;"	m	class:Provider
clean	./silver/models/documents/base.py	/^    def clean(self):$/;"	m	class:BillingDocumentBase
clean	./silver/models/documents/proforma.py	/^    def clean(self):$/;"	m	class:Proforma
clean	./silver/models/subscriptions.py	/^    def clean(self):$/;"	m	class:MeteredFeatureUnitsLog
clean	./silver/models/subscriptions.py	/^    def clean(self):$/;"	m	class:Subscription
clean	./silver/models/transactions/transaction.py	/^    def clean(self):$/;"	m	class:Transaction
clean_with_previous_instance	./silver/models/payment_methods.py	/^    def clean_with_previous_instance(self, previous_instance):$/;"	m	class:PaymentMethod
clean_with_previous_instance	./silver/models/transactions/transaction.py	/^    def clean_with_previous_instance(self, previous_instance):$/;"	m	class:Transaction
clone	./silver/admin.py	/^    def clone(self, request, queryset):$/;"	m	class:InvoiceAdmin
clone	./silver/admin.py	/^    def clone(self, request, queryset):$/;"	m	class:ProformaAdmin
clone	./silver/models/documents/entries.py	/^    def clone(self):$/;"	m	class:DocumentEntry
clone_into_draft	./silver/models/documents/base.py	/^    def clone_into_draft(self):$/;"	m	class:BillingDocumentBase
common_fields	./silver/admin.py	/^    common_fields = ['company', 'address_1', 'address_2', 'city',$/;"	v	class:BillingDocumentAdmin
company	./silver/api/filters.py	/^    company = CharFilter(name='company', lookup_expr='icontains')$/;"	v	class:CustomerFilter
company	./silver/api/filters.py	/^    company = CharFilter(name='company', lookup_expr='icontains')$/;"	v	class:ProviderFilter
company	./silver/models/billing_entities/base.py	/^    company = models.CharField(max_length=128, blank=True, null=True)$/;"	v	class:BaseBillingEntity
company	./silver/tests/factories.py	/^    company = factory.Sequence(lambda n: faker.company())$/;"	v	class:CustomerFactory
company	./silver/tests/factories.py	/^    company = factory.Sequence(lambda n: faker.company())$/;"	v	class:ProviderFactory
complete_payment_view	./silver/views.py	/^def complete_payment_view(request, transaction, expired=None):$/;"	f
compute_total	./silver/models/documents/base.py	/^    def compute_total(self):$/;"	m	class:BillingDocumentBase
compute_total_in_transaction_currency	./silver/models/documents/base.py	/^    def compute_total_in_transaction_currency(self):$/;"	m	class:BillingDocumentBase
consolidated_billing	./silver/api/filters.py	/^    consolidated_billing = CharFilter(name='consolidated_billing',$/;"	v	class:CustomerFilter
consolidated_billing	./silver/models/billing_entities/customer.py	/^    consolidated_billing = models.BooleanField($/;"	v	class:Customer
consolidated_billing	./silver/tests/factories.py	/^    consolidated_billing = True$/;"	v	class:CustomerFactory
consumed_units	./silver/models/subscriptions.py	/^    consumed_units = models.DecimalField(max_digits=19, decimal_places=4,$/;"	v	class:MeteredFeatureUnitsLog
consumed_units	./silver/tests/factories.py	/^    consumed_units = factory.fuzzy.FuzzyDecimal(low=0.01, high=50000.00,$/;"	v	class:MeteredFeatureUnitsLogFactory
convert	./silver/currencies.py	/^    def convert(self, amount, from_currency, to_currency, date):$/;"	m	class:DummyConverter
countries	./silver/utils/international.py	/^countries = sorted([(country.alpha_2, country.name) for country in$/;"	v
country	./silver/api/filters.py	/^    country = CharFilter(name='country', lookup_expr='icontains')$/;"	v	class:CustomerFilter
country	./silver/models/billing_entities/base.py	/^    country = models.CharField(choices=countries, max_length=3)$/;"	v	class:BaseBillingEntity
country	./silver/tests/factories.py	/^    country = factory.Sequence(lambda n: faker.country_code())$/;"	v	class:CustomerFactory
country	./silver/tests/factories.py	/^    country = factory.Sequence(lambda n: faker.country_code())$/;"	v	class:ProviderFactory
create	./silver/api/serializers/common.py	/^    def create(self, validated_data):$/;"	m	class:MeteredFeatureSerializer
create	./silver/api/serializers/documents_serializers.py	/^    def create(self, validated_data):$/;"	m	class:InvoiceSerializer
create	./silver/api/serializers/documents_serializers.py	/^    def create(self, validated_data):$/;"	m	class:ProformaSerializer
create	./silver/api/serializers/plans_serializer.py	/^    def create(self, validated_data):$/;"	m	class:PlanSerializer
create_invoice	./silver/admin.py	/^    def create_invoice(self, request, queryset):$/;"	m	class:ProformaAdmin
create_invoice	./silver/models/documents/proforma.py	/^    def create_invoice(self):$/;"	m	class:Proforma
create_only_fields	./silver/admin.py	/^        create_only_fields = ['amount', 'currency', 'proforma', 'invoice',$/;"	v	class:TransactionForm.Meta
create_payment_method	./silver/tests/spec/test_payment_method.py	/^    def create_payment_method(self, *args, **kwargs):$/;"	m	class:TestPaymentMethodEndpoints
create_transaction_for_document	./silver/models/documents/base.py	/^def create_transaction_for_document(document):$/;"	f
create_transactions_for_issued_documents	./silver/models/payment_methods.py	/^def create_transactions_for_issued_documents(payment_method):$/;"	f
created_at	./silver/models/subscriptions.py	/^    created_at = models.DateTimeField(auto_now_add=timezone.now)$/;"	v	class:BillingLog
created_at	./silver/models/transactions/transaction.py	/^    created_at = models.DateTimeField(default=timezone.now)$/;"	v	class:Transaction
currencies	./silver/utils/international.py	/^currencies = sorted([(currency.alpha_3,$/;"	v
currency	./silver/api/filters.py	/^    currency = CharFilter(name='currency', lookup_expr='icontains')$/;"	v	class:PlanFilter
currency	./silver/api/filters.py	/^    currency = CharFilter(name='currency', lookup_expr='iexact')$/;"	v	class:TransactionFilter
currency	./silver/api/filters.py	/^    currency = MultipleCharFilter(name='currency', lookup_expr='icontains')$/;"	v	class:BillingDocumentFilter
currency	./silver/models/billing_entities/customer.py	/^    currency = models.CharField($/;"	v	class:Customer
currency	./silver/models/documents/base.py	/^    currency = models.CharField($/;"	v	class:BillingDocumentBase
currency	./silver/models/plans.py	/^    currency = models.CharField($/;"	v	class:Plan
currency	./silver/models/transactions/transaction.py	/^    currency = models.CharField($/;"	v	class:Transaction
currency	./silver/tests/factories.py	/^    currency = 'RON'$/;"	v	class:InvoiceFactory
currency	./silver/tests/factories.py	/^    currency = 'RON'$/;"	v	class:ProformaFactory
currency	./silver/tests/factories.py	/^    currency = 'USD'$/;"	v	class:PlanFactory
customer	./silver/api/filters.py	/^    customer = NumberFilter(name='customer__pk', lookup_expr='iexact')$/;"	v	class:BillingDocumentFilter
customer	./silver/api/serializers/documents_serializers.py	/^    customer = CustomerUrl(view_name='customer-detail',$/;"	v	class:DocumentSerializer
customer	./silver/api/serializers/documents_serializers.py	/^    customer = CustomerUrl(view_name='customer-detail',$/;"	v	class:InvoiceSerializer
customer	./silver/api/serializers/documents_serializers.py	/^    customer = CustomerUrl(view_name='customer-detail',$/;"	v	class:ProformaSerializer
customer	./silver/api/serializers/transaction_serializers.py	/^    customer = CustomerUrl(view_name='customer-detail', read_only=True)$/;"	v	class:TransactionSerializer
customer	./silver/models/documents/base.py	/^    customer = models.ForeignKey('Customer')$/;"	v	class:BillingDocumentBase
customer	./silver/models/payment_methods.py	/^    customer = models.ForeignKey(Customer)$/;"	v	class:PaymentMethod
customer	./silver/models/subscriptions.py	/^    customer = models.ForeignKey($/;"	v	class:Subscription
customer	./silver/models/transactions/transaction.py	/^    def customer(self):$/;"	m	class:Transaction
customer	./silver/tests/factories.py	/^        customer=factory.SelfAttribute('..payment_method.customer'),$/;"	v	class:TransactionFactory.Meta
customer	./silver/tests/factories.py	/^    customer = factory.SubFactory(CustomerFactory)$/;"	v	class:InvoiceFactory
customer	./silver/tests/factories.py	/^    customer = factory.SubFactory(CustomerFactory)$/;"	v	class:PaymentMethodFactory
customer	./silver/tests/factories.py	/^    customer = factory.SubFactory(CustomerFactory)$/;"	v	class:ProformaFactory
customer	./silver/tests/factories.py	/^    customer = factory.SubFactory(CustomerFactory)$/;"	v	class:SubscriptionFactory
customer_company	./silver/api/filters.py	/^    customer_company = CharFilter(name='customer__company',$/;"	v	class:BillingDocumentFilter
customer_name	./silver/api/filters.py	/^    customer_name = CharFilter(name='customer__name', lookup_expr='icontains')$/;"	v	class:BillingDocumentFilter
customer_name_split_forward	./silver/migrations/0032_auto_20170201_1342.py	/^    def customer_name_split_forward(apps, schema_editor):$/;"	m	class:Migration
customer_name_split_reverse	./silver/migrations/0032_auto_20170201_1342.py	/^    def customer_name_split_reverse(apps, schema_editor):$/;"	m	class:Migration
customer_reference	./silver/models/billing_entities/customer.py	/^    customer_reference = models.CharField($/;"	v	class:Customer
customer_reference	./silver/tests/factories.py	/^    customer_reference = factory.Sequence(lambda n: faker.uuid4())$/;"	v	class:CustomerFactory
customer_search_fields	./silver/admin.py	/^    customer_search_fields = ['customer__{field}'.format(field=field)$/;"	v	class:BillingDocumentAdmin
cycle_billing_duration	./silver/models/billing_entities/provider.py	/^    cycle_billing_duration = models.DurationField($/;"	v	class:Provider
cycle_billing_duration	./silver/models/plans.py	/^    cycle_billing_duration = models.DurationField($/;"	v	class:Plan
cycle_billing_duration	./silver/models/subscriptions.py	/^    def cycle_billing_duration(self):$/;"	m	class:Subscription
cycle_end_date	./silver/models/subscriptions.py	/^    def cycle_end_date(self, reference_date=None):$/;"	m	class:Subscription
cycle_start_date	./silver/models/subscriptions.py	/^    def cycle_start_date(self, reference_date=None):$/;"	m	class:Subscription
data	./silver/models/payment_methods.py	/^    data = JSONField(blank=True, null=True, default={})$/;"	v	class:PaymentMethod
data	./silver/models/transactions/transaction.py	/^    data = JSONField(default={}, null=True, blank=True)$/;"	v	class:Transaction
date	./silver/management/commands/generate_docs.py	/^def date(date_str):$/;"	f
date_hierarchy	./silver/admin.py	/^    date_hierarchy = 'issue_date'$/;"	v	class:BillingDocumentAdmin
db_index	./silver/models/documents/base.py	/^                              db_index=True)$/;"	v	class:BillingDocumentBase.STATES
db_index	./silver/models/plans.py	/^        db_index=True$/;"	v	class:Plan.INTERVALS
db_index	./silver/models/plans.py	/^        db_index=True,$/;"	v	class:MeteredFeature
decimal_places	./silver/migrations/0008_auto_20150430_1804.py	/^                decimal_places=4,$/;"	v	class:Migration
decimal_places	./silver/models/documents/base.py	/^                                                         decimal_places=2,$/;"	v	class:BillingDocumentBase.STATES
decorator	./silver/utils/decorators.py	/^    def decorator(request, token):$/;"	f	function:get_transaction_from_token
decrypt_data	./silver/models/payment_methods.py	/^    def decrypt_data(self, crypted_data):$/;"	m	class:PaymentMethod
default	./silver/models/billing_entities/customer.py	/^        default=PAYMENT_DUE_DAYS,$/;"	v	class:Customer.Meta
default	./silver/models/billing_entities/provider.py	/^        default=DOCUMENT_DEFAULT_STATE.draft,$/;"	v	class:Provider.Meta
default	./silver/models/billing_entities/provider.py	/^        default=FLOWS.PROFORMA,$/;"	v	class:Provider.Meta
default	./silver/models/billing_entities/provider.py	/^        default=False,$/;"	v	class:Provider.Meta
default	./silver/models/billing_entities/provider.py	/^        default=True,$/;"	v	class:Provider.Meta
default	./silver/models/plans.py	/^        default=0,$/;"	v	class:Plan.INTERVALS
default_detail	./silver/api/exceptions.py	/^                     'with the current state of the resource.'$/;"	v	class:APIConflictException
default_document_state	./silver/models/billing_entities/provider.py	/^    default_document_state = models.CharField($/;"	v	class:Provider
default_series	./silver/models/documents/invoice.py	/^    def default_series(self):$/;"	m	class:Invoice
default_series	./silver/models/documents/proforma.py	/^    def default_series(self):$/;"	m	class:Proforma
delete	./silver/api/views/documents_views.py	/^    def delete(self, request, *args, **kwargs):$/;"	m	class:DocEntryUpdateDestroy
delete	./silver/api/views/documents_views.py	/^    def delete(self, request, *args, **kwargs):$/;"	m	class:InvoiceEntryUpdateDestroy
delete	./silver/api/views/documents_views.py	/^    def delete(self, request, *args, **kwargs):$/;"	m	class:ProformaEntryUpdateDestroy
delete	./silver/api/views/plan_views.py	/^    def delete(self, request, *args, **kwargs):$/;"	m	class:PlanDetail
delete	./silver/models/payment_methods.py	/^    def delete(self, using=None):$/;"	m	class:PaymentMethod
delete_invoice_pdf_from_storage	./silver/models/documents/invoice.py	/^def delete_invoice_pdf_from_storage(sender, instance, **kwargs):$/;"	f
delete_model	./silver/admin.py	/^    def delete_model(self, request, obj):$/;"	m	class:LiveModelAdmin
delete_proforma_pdf_from_storage	./silver/models/documents/proforma.py	/^def delete_proforma_pdf_from_storage(sender, instance, **kwargs):$/;"	f
delete_selected	./silver/admin.py	/^    def delete_selected(self, request, queryset):$/;"	m	class:LiveModelAdmin
dependencies	./silver/migrations/0001_initial.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0002_auto_20150416_1009.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0003_auto_20150417_0634.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0004_auto_20150429_1731.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0005_auto_20150429_1732.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0006_auto_20150430_1457.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0007_auto_20150430_1549.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0008_auto_20150430_1804.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0009_auto_20150717_1428.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0031_auto_20170125_1343.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0032_auto_20170201_1342.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0033_auto_20170203_1540.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0034_auto_20170203_1644.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0035_auto_20170206_0941.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0036_auto_20170514_1627.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0037_auto_20170719_1159.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0038_auto_20170724_0708.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0039_auto_20170811_1101.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0040_auto_20170925_0646.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0041_auto_20170929_1045.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0042_compute_totals_in_document_view.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0043_auto_20171113_1048.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	./silver/migrations/0044_auto_20171115_1809.py	/^    dependencies = [$/;"	v	class:Migration
description	./silver/admin.py	/^    def description(self, obj):$/;"	m	class:PlanAdmin
description	./silver/models/documents/entries.py	/^    description = models.CharField(max_length=1024)$/;"	v	class:DocumentEntry
description	./silver/models/subscriptions.py	/^    description = models.CharField(max_length=1024, blank=True, null=True)$/;"	v	class:Subscription
description	./silver/tests/factories.py	/^    description = factory.Sequence(lambda n: 'Description{cnt}'.format(cnt=n))$/;"	v	class:DocumentEntryFactory
dest	./silver/management/commands/tweak_billing_log.py	/^                    dest='date'),$/;"	v	class:Command
dirty	./silver/models/documents/pdf.py	/^    dirty = PositiveIntegerField(default=0)$/;"	v	class:PDF
disabled	./silver/api/filters.py	/^    disabled = BooleanFilter(name='disabled')$/;"	v	class:TransactionFilter
display_info	./silver/models/payment_methods.py	/^    display_info = models.CharField(max_length=256, null=True, blank=True)$/;"	v	class:PaymentMethod
document	./silver/models/documents/entries.py	/^    def document(self):$/;"	m	class:DocumentEntry
document	./silver/models/transactions/transaction.py	/^    def document(self):$/;"	m	class:Transaction
document	./silver/models/transactions/transaction.py	/^    def document(self, value):$/;"	m	class:Transaction
documents_pdf_path	./silver/models/documents/base.py	/^def documents_pdf_path(document, filename):$/;"	f
download_selected_documents	./silver/admin.py	/^    def download_selected_documents(self, request, queryset):$/;"	m	class:BillingDocumentAdmin
due_date	./silver/api/filters.py	/^    due_date = DateFilter(name='due_date', lookup_expr='iexact')$/;"	v	class:BillingDocumentFilter
due_date	./silver/models/documents/base.py	/^    due_date = models.DateField(null=True, blank=True)$/;"	v	class:BillingDocumentBase
due_this_month	./silver/models/documents/base.py	/^    def due_this_month(self):$/;"	m	class:BillingDocumentQuerySet
due_today	./silver/models/documents/base.py	/^    def due_today(self):$/;"	m	class:BillingDocumentQuerySet
email	./silver/api/filters.py	/^    email = CharFilter(name='email', lookup_expr='icontains')$/;"	v	class:CustomerFilter
email	./silver/api/filters.py	/^    email = CharFilter(name='email', lookup_expr='icontains')$/;"	v	class:ProviderFilter
email	./silver/models/billing_entities/base.py	/^    email = models.CharField(blank=True, null=True, max_length=254)$/;"	v	class:BaseBillingEntity
email	./silver/tests/factories.py	/^    email = 'admin@admin.com'$/;"	v	class:AdminUserFactory
email	./silver/tests/factories.py	/^    email = factory.Sequence(lambda n: faker.company_email())$/;"	v	class:CustomerFactory
email	./silver/tests/factories.py	/^    email = factory.Sequence(lambda n: faker.company_email())$/;"	v	class:ProviderFactory
enabled	./silver/api/filters.py	/^    enabled = BooleanFilter(name='enabled', lookup_expr='iexact')$/;"	v	class:PlanFilter
enabled	./silver/models/plans.py	/^    enabled = models.BooleanField(default=True,$/;"	v	class:Plan
enabled	./silver/tests/factories.py	/^    enabled = factory.Sequence(lambda n: n % 2 != 0)$/;"	v	class:PlanFactory
encrypt_data	./silver/models/payment_methods.py	/^    def encrypt_data(self, data):$/;"	m	class:PaymentMethod
end	./silver/admin.py	/^    def end(self, request, queryset):$/;"	m	class:SubscriptionAdmin
end	./silver/models/subscriptions.py	/^    def end(self):$/;"	m	class:Subscription
end_date	./silver/api/serializers/subscriptions_serializers.py	/^    end_date = serializers.DateField(read_only=True)$/;"	v	class:MFUnitsLogSerializer
end_date	./silver/models/documents/entries.py	/^    end_date = models.DateField(null=True, blank=True)$/;"	v	class:DocumentEntry
end_date	./silver/models/subscriptions.py	/^    end_date = models.DateField(editable=False)$/;"	v	class:MeteredFeatureUnitsLog
end_date	./silver/tests/factories.py	/^    end_date = factory.Sequence($/;"	v	class:DocumentEntryFactory
ended_at	./silver/api/serializers/subscriptions_serializers.py	/^    ended_at = serializers.DateField(read_only=True)$/;"	v	class:SubscriptionSerializer
ended_at	./silver/models/subscriptions.py	/^    ended_at = models.DateField($/;"	v	class:Subscription
entries	./silver/models/documents/base.py	/^    def entries(self):$/;"	m	class:BillingDocumentBase
entries	./silver/models/documents/invoice.py	/^    def entries(self):$/;"	m	class:Invoice
entries	./silver/models/documents/proforma.py	/^    def entries(self):$/;"	m	class:Proforma
exclude	./silver/admin.py	/^    exclude = ['live']$/;"	v	class:CustomerAdmin
exclude	./silver/admin.py	/^    exclude = ['live']$/;"	v	class:ProviderAdmin
execute	./silver/admin.py	/^    def execute(self, request, queryset):$/;"	m	class:TransactionAdmin
execute_transaction	./silver/payment_processors/mixins.py	/^    def execute_transaction(self, transaction):$/;"	m	class:BaseActionableProcessor
execute_transaction	./silver/tasks.py	/^def execute_transaction(transaction_id):$/;"	f
execute_transaction	./silver/tests/fixtures.py	/^    def execute_transaction(self, transaction):$/;"	m	class:TriggeredProcessor
execute_transactions	./silver/tasks.py	/^def execute_transactions(transaction_ids=None):$/;"	f
external_reference	./silver/models/transactions/transaction.py	/^    external_reference = models.CharField(max_length=256, null=True, blank=True)$/;"	v	class:Transaction
extra	./silver/admin.py	/^    extra = 0$/;"	v	class:DocumentEntryInline
extra	./silver/admin.py	/^    extra = 0$/;"	v	class:MeteredFeatureUnitsLogInLine
extra	./silver/models/billing_entities/base.py	/^    extra = models.TextField($/;"	v	class:BaseBillingEntity
extra	./silver/tests/factories.py	/^    extra = factory.Sequence(lambda n: faker.text())$/;"	v	class:CustomerFactory
extra	./silver/tests/factories.py	/^    extra = factory.Sequence(lambda n: faker.text())$/;"	v	class:ProviderFactory
extra_kwargs	./silver/api/serializers/documents_serializers.py	/^        extra_kwargs = {$/;"	v	class:InvoiceSerializer.Meta
extra_kwargs	./silver/api/serializers/documents_serializers.py	/^        extra_kwargs = {$/;"	v	class:ProformaSerializer.Meta
extra_kwargs	./silver/api/serializers/payment_methods_serializers.py	/^        extra_kwargs = {$/;"	v	class:PaymentMethodSerializer.Meta
extra_kwargs	./silver/api/serializers/subscriptions_serializers.py	/^        extra_kwargs = {'customer': {'lookup_url_kwarg': 'customer_pk'}}$/;"	v	class:SubscriptionSerializer.Meta
extra_kwargs	./silver/api/serializers/transaction_serializers.py	/^        extra_kwargs = {'amount': {'required': False},$/;"	v	class:TransactionSerializer.Meta
fail	./silver/admin.py	/^    def fail(self, request, queryset):$/;"	m	class:TransactionAdmin
fail	./silver/models/transactions/transaction.py	/^    def fail(self, fail_code='default', fail_reason='Unknown fail reason'):$/;"	m	class:Transaction
fail_code	./silver/models/transactions/transaction.py	/^    fail_code = models.CharField($/;"	v	class:Transaction
failing_void_processor	./settings_test.py	/^failing_void_processor = 'failing_void'$/;"	v
failing_void_processor	./silver/tests/fixtures.py	/^failing_void_processor = 'failing_void'$/;"	v
faker	./silver/tests/factories.py	/^faker = Faker(locale='hu_HU')$/;"	v
fetch_resources	./silver/utils/pdf.py	/^def fetch_resources(uri, rel):$/;"	f
fetch_transaction_status	./silver/payment_processors/mixins.py	/^    def fetch_transaction_status(self, transaction):$/;"	m	class:BaseActionableProcessor
fetch_transaction_status	./silver/tasks.py	/^def fetch_transaction_status(transaction_id):$/;"	f
fetch_transaction_status	./silver/tests/fixtures.py	/^    def fetch_transaction_status(self, transaction):$/;"	m	class:TriggeredProcessor
fetch_transactions_status	./silver/tasks.py	/^def fetch_transactions_status(transaction_ids=None):$/;"	f
field	./silver/migrations/0001_initial.py	/^            field=models.ForeignKey($/;"	v	class:Migration
field	./silver/migrations/0001_initial.py	/^            field=models.ForeignKey(to='silver.Provider'),$/;"	v	class:Migration
field	./silver/migrations/0001_initial.py	/^            field=models.OneToOneField($/;"	v	class:Migration
field	./silver/migrations/0001_initial.py	/^            field=silver.utils.models.UnsavedForeignKey($/;"	v	class:Migration
field	./silver/migrations/0002_auto_20150416_1009.py	/^            field=models.CharField(max_length=1024),$/;"	v	class:Migration
field	./silver/migrations/0002_auto_20150416_1009.py	/^            field=models.CharField(max_length=1024, null=True, blank=True),$/;"	v	class:Migration
field	./silver/migrations/0002_auto_20150416_1009.py	/^            field=models.ForeignKey(help_text=b'The product code for this plan.', to='silver.ProductCode'),$/;"	v	class:Migration
field	./silver/migrations/0003_auto_20150417_0634.py	/^            field=jsonfield.fields.JSONField(null=True, blank=True),$/;"	v	class:Migration
field	./silver/migrations/0004_auto_20150429_1731.py	/^            field=models.CharField(max_length=20, null=True, blank=True),$/;"	v	class:Migration
field	./silver/migrations/0006_auto_20150430_1457.py	/^            field=models.CharField(db_index=True, max_length=20, null=True, blank=True),$/;"	v	class:Migration
field	./silver/migrations/0006_auto_20150430_1457.py	/^            field=models.CharField(help_text=b'Display name of the plan.', max_length=200, db_index=True),$/;"	v	class:Migration
field	./silver/migrations/0006_auto_20150430_1457.py	/^            field=models.CharField(help_text=b'The feature display name.', max_length=200, db_index=True),$/;"	v	class:Migration
field	./silver/migrations/0006_auto_20150430_1457.py	/^            field=models.DateField(db_index=True, null=True, blank=True),$/;"	v	class:Migration
field	./silver/migrations/0006_auto_20150430_1457.py	/^            field=models.IntegerField(db_index=True, null=True, blank=True),$/;"	v	class:Migration
field	./silver/migrations/0007_auto_20150430_1549.py	/^            field=models.PositiveIntegerField(help_text=b'Number of trial '$/;"	v	class:Migration
field	./silver/migrations/0008_auto_20150430_1804.py	/^            field=models.DecimalField($/;"	v	class:Migration
field	./silver/migrations/0008_auto_20150430_1804.py	/^            field=models.DecimalField(max_digits=19, decimal_places=4),$/;"	v	class:Migration
field	./silver/migrations/0009_auto_20150717_1428.py	/^            field=models.DateField($/;"	v	class:Migration
field	./silver/migrations/0009_auto_20150717_1428.py	/^            field=models.PositiveIntegerField($/;"	v	class:Migration
field	./silver/migrations/0031_auto_20170125_1343.py	/^            field=models.CharField(blank=True, max_length=4, null=True, help_text=b'Used to enforce a certain currency when making transactionsfor the customer.', choices=[('AED', 'UAE Dirham'), ('AFN', 'Afghani'), ('ALL', 'Lek'), ('AMD', 'Armenian Dram'), ('ANG', 'Netherlands Antillean Guilder'), ('AOA', 'Kwanza'), ('ARS', 'Argentine Peso'), ('AUD', 'Australian Dollar'), ('AWG', 'Aruban Florin'), ('AZN', 'Azerbaijanian Manat'), ('BAM', 'Convertible Mark'), ('BBD', 'Barbados Dollar'), ('BDT', 'Taka'), ('BGN', 'Bulgarian Lev'), ('BHD', 'Bahraini Dinar'), ('BIF', 'Burundi Franc'), ('BMD', 'Bermudian Dollar'), ('BND', 'Brunei Dollar'), ('BOB', 'Boliviano'), ('BRL', 'Brazilian Real'), ('BSD', 'Bahamian Dollar'), ('BTN', 'Ngultrum'), ('BWP', 'Pula'), ('BYR', 'Belarusian Ruble'), ('BZD', 'Belize Dollar'), ('CAD', 'Canadian Dollar'), ('CDF', 'Congolese Franc'), ('CHF', 'Swiss Franc'), ('CLP', 'Chilean Peso'), ('CNY', 'Yuan Renminbi'), ('COP', 'Colombian Peso'), ('CRC', 'Costa Rican Colon'), ('CUC', 'Peso Convertible'), ('CUP', 'Cuban Peso'), ('CVE', 'Cabo Verde Escudo'), ('CZK', 'Czech Koruna'), ('DJF', 'Djibouti Franc'), ('DKK', 'Danish Krone'), ('DOP', 'Dominican Peso'), ('DZD', 'Algerian Dinar'), ('EGP', 'Egyptian Pound'), ('ERN', 'Nakfa'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('FJD', 'Fiji Dollar'), ('FKP', 'Falkland Islands Pound'), ('GBP', 'Pound Sterling'), ('GEL', 'Lari'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('GMD', 'Dalasi'), ('GNF', 'Guinea Franc'), ('GTQ', 'Quetzal'), ('GYD', 'Guyana Dollar'), ('HKD', 'Hong Kong Dollar'), ('HNL', 'Lempira'), ('HRK', 'Kuna'), ('HTG', 'Gourde'), ('HUF', 'Forint'), ('IDR', 'Rupiah'), ('ILS', 'New Israeli Sheqel'), ('INR', 'Indian Rupee'), ('IQD', 'Iraqi Dinar'), ('IRR', 'Iranian Rial'), ('ISK', 'Iceland Krona'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('JPY', 'Yen'), ('KES', 'Kenyan Shilling'), ('KGS', 'Som'), ('KHR', 'Riel'), ('KMF', 'Comoro Franc'), ('KPW', 'North Korean Won'), ('KRW', 'Won'), ('KWD', 'Kuwaiti Dinar'), ('KYD', 'Cayman Islands Dollar'), ('KZT', 'Tenge'), ('LAK', 'Kip'), ('LBP', 'Lebanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('LRD', 'Liberian Dollar'), ('LSL', 'Loti'), ('LYD', 'Libyan Dinar'), ('MAD', 'Moroccan Dirham'), ('MDL', 'Moldovan Leu'), ('MGA', 'Malagasy Ariary'), ('MKD', 'Denar'), ('MMK', 'Kyat'), ('MNT', 'Tugrik'), ('MOP', 'Pataca'), ('MRO', 'Ouguiya'), ('MUR', 'Mauritius Rupee'), ('MVR', 'Rufiyaa'), ('MWK', 'Malawi Kwacha'), ('MXN', 'Mexican Peso'), ('MYR', 'Malaysian Ringgit'), ('MZN', 'Mozambique Metical'), ('NAD', 'Namibia Dollar'), ('NGN', 'Naira'), ('NIO', 'Cordoba Oro'), ('NOK', 'Norwegian Krone'), ('NPR', 'Nepalese Rupee'), ('NZD', 'New Zealand Dollar'), ('OMR', 'Rial Omani'), ('PAB', 'Balboa'), ('PEN', 'Sol'), ('PGK', 'Kina'), ('PHP', 'Philippine Peso'), ('PKR', 'Pakistan Rupee'), ('PLN', 'Zloty'), ('PYG', 'Guarani'), ('QAR', 'Qatari Rial'), ('RON', 'Romanian Leu'), ('RSD', 'Serbian Dinar'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('SAR', 'Saudi Riyal'), ('SBD', 'Solomon Islands Dollar'), ('SCR', 'Seychelles Rupee'), ('SDG', 'Sudanese Pound'), ('SEK', 'Swedish Krona'), ('SGD', 'Singapore Dollar'), ('SHP', 'Saint Helena Pound'), ('SLL', 'Leone'), ('SOS', 'Somali Shilling'), ('SRD', 'Surinam Dollar'), ('SSP', 'South Sudanese Pound'), ('STD', 'Dobra'), ('SVC', 'El Salvador Colon'), ('SYP', 'Syrian Pound'), ('SZL', 'Lilangeni'), ('THB', 'Baht'), ('TJS', 'Somoni'), ('TMT', 'Turkmenistan New Manat'), ('TND', 'Tunisian Dinar'), ('TOP', 'Pa\\u2019anga'), ('TRY', 'Turkish Lira'), ('TTD', 'Trinidad and Tobago Dollar'), ('TWD', 'New Taiwan Dollar'), ('TZS', 'Tanzanian Shilling'), ('UAH', 'Hryvnia'), ('UGX', 'Uganda Shilling'), ('USD', 'US Dollar'), ('UYU', 'Peso Uruguayo'), ('UZS', 'Uzbekistan Sum'), ('VEF', 'Bol\\xedvar'), ('VND', 'Dong'), ('VUV', 'Vatu'), ('WST', 'Tala'), ('XAF', 'CFA Franc BEAC'), ('XAG', 'Silver'), ('XAU', 'Gold'), ('XBA', 'Bond Markets Unit European Composite Unit (EURCO)'), ('XBB', 'Bond Markets Unit European Monetary Unit (E.M.U.-6)'), ('XBC', 'Bond Markets Unit European Unit of Account 9 (E.U.A.-9)'), ('XBD', 'Bond Markets Unit European Unit of Account 17 (E.U.A.-17)'), ('XCD', 'East Caribbean Dollar'), ('XDR', 'SDR (Special Drawing Right)'), ('XOF', 'CFA Franc BCEAO'), ('XPD', 'Palladium'), ('XPF', 'CFP Franc'), ('XPT', 'Platinum'), ('XSU', 'Sucre'), ('XTS', 'Codes specifically reserved for testing purposes'), ('XUA', 'ADB Unit of Account'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('YER', 'Yemeni Rial'), ('ZAR', 'Rand'), ('ZMW', 'Zambian Kwacha'), ('ZWL', 'Zimbabwe Dollar')]),$/;"	v	class:Migration
field	./silver/migrations/0031_auto_20170125_1343.py	/^            field=models.CharField(default=b'USD', help_text=b'The currency used when making a transaction.', max_length=4, choices=[('AED', 'UAE Dirham'), ('AFN', 'Afghani'), ('ALL', 'Lek'), ('AMD', 'Armenian Dram'), ('ANG', 'Netherlands Antillean Guilder'), ('AOA', 'Kwanza'), ('ARS', 'Argentine Peso'), ('AUD', 'Australian Dollar'), ('AWG', 'Aruban Florin'), ('AZN', 'Azerbaijanian Manat'), ('BAM', 'Convertible Mark'), ('BBD', 'Barbados Dollar'), ('BDT', 'Taka'), ('BGN', 'Bulgarian Lev'), ('BHD', 'Bahraini Dinar'), ('BIF', 'Burundi Franc'), ('BMD', 'Bermudian Dollar'), ('BND', 'Brunei Dollar'), ('BOB', 'Boliviano'), ('BRL', 'Brazilian Real'), ('BSD', 'Bahamian Dollar'), ('BTN', 'Ngultrum'), ('BWP', 'Pula'), ('BYR', 'Belarusian Ruble'), ('BZD', 'Belize Dollar'), ('CAD', 'Canadian Dollar'), ('CDF', 'Congolese Franc'), ('CHF', 'Swiss Franc'), ('CLP', 'Chilean Peso'), ('CNY', 'Yuan Renminbi'), ('COP', 'Colombian Peso'), ('CRC', 'Costa Rican Colon'), ('CUC', 'Peso Convertible'), ('CUP', 'Cuban Peso'), ('CVE', 'Cabo Verde Escudo'), ('CZK', 'Czech Koruna'), ('DJF', 'Djibouti Franc'), ('DKK', 'Danish Krone'), ('DOP', 'Dominican Peso'), ('DZD', 'Algerian Dinar'), ('EGP', 'Egyptian Pound'), ('ERN', 'Nakfa'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('FJD', 'Fiji Dollar'), ('FKP', 'Falkland Islands Pound'), ('GBP', 'Pound Sterling'), ('GEL', 'Lari'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('GMD', 'Dalasi'), ('GNF', 'Guinea Franc'), ('GTQ', 'Quetzal'), ('GYD', 'Guyana Dollar'), ('HKD', 'Hong Kong Dollar'), ('HNL', 'Lempira'), ('HRK', 'Kuna'), ('HTG', 'Gourde'), ('HUF', 'Forint'), ('IDR', 'Rupiah'), ('ILS', 'New Israeli Sheqel'), ('INR', 'Indian Rupee'), ('IQD', 'Iraqi Dinar'), ('IRR', 'Iranian Rial'), ('ISK', 'Iceland Krona'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('JPY', 'Yen'), ('KES', 'Kenyan Shilling'), ('KGS', 'Som'), ('KHR', 'Riel'), ('KMF', 'Comoro Franc'), ('KPW', 'North Korean Won'), ('KRW', 'Won'), ('KWD', 'Kuwaiti Dinar'), ('KYD', 'Cayman Islands Dollar'), ('KZT', 'Tenge'), ('LAK', 'Kip'), ('LBP', 'Lebanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('LRD', 'Liberian Dollar'), ('LSL', 'Loti'), ('LYD', 'Libyan Dinar'), ('MAD', 'Moroccan Dirham'), ('MDL', 'Moldovan Leu'), ('MGA', 'Malagasy Ariary'), ('MKD', 'Denar'), ('MMK', 'Kyat'), ('MNT', 'Tugrik'), ('MOP', 'Pataca'), ('MRO', 'Ouguiya'), ('MUR', 'Mauritius Rupee'), ('MVR', 'Rufiyaa'), ('MWK', 'Malawi Kwacha'), ('MXN', 'Mexican Peso'), ('MYR', 'Malaysian Ringgit'), ('MZN', 'Mozambique Metical'), ('NAD', 'Namibia Dollar'), ('NGN', 'Naira'), ('NIO', 'Cordoba Oro'), ('NOK', 'Norwegian Krone'), ('NPR', 'Nepalese Rupee'), ('NZD', 'New Zealand Dollar'), ('OMR', 'Rial Omani'), ('PAB', 'Balboa'), ('PEN', 'Sol'), ('PGK', 'Kina'), ('PHP', 'Philippine Peso'), ('PKR', 'Pakistan Rupee'), ('PLN', 'Zloty'), ('PYG', 'Guarani'), ('QAR', 'Qatari Rial'), ('RON', 'Romanian Leu'), ('RSD', 'Serbian Dinar'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('SAR', 'Saudi Riyal'), ('SBD', 'Solomon Islands Dollar'), ('SCR', 'Seychelles Rupee'), ('SDG', 'Sudanese Pound'), ('SEK', 'Swedish Krona'), ('SGD', 'Singapore Dollar'), ('SHP', 'Saint Helena Pound'), ('SLL', 'Leone'), ('SOS', 'Somali Shilling'), ('SRD', 'Surinam Dollar'), ('SSP', 'South Sudanese Pound'), ('STD', 'Dobra'), ('SVC', 'El Salvador Colon'), ('SYP', 'Syrian Pound'), ('SZL', 'Lilangeni'), ('THB', 'Baht'), ('TJS', 'Somoni'), ('TMT', 'Turkmenistan New Manat'), ('TND', 'Tunisian Dinar'), ('TOP', 'Pa\\u2019anga'), ('TRY', 'Turkish Lira'), ('TTD', 'Trinidad and Tobago Dollar'), ('TWD', 'New Taiwan Dollar'), ('TZS', 'Tanzanian Shilling'), ('UAH', 'Hryvnia'), ('UGX', 'Uganda Shilling'), ('USD', 'US Dollar'), ('UYU', 'Peso Uruguayo'), ('UZS', 'Uzbekistan Sum'), ('VEF', 'Bol\\xedvar'), ('VND', 'Dong'), ('VUV', 'Vatu'), ('WST', 'Tala'), ('XAF', 'CFA Franc BEAC'), ('XAG', 'Silver'), ('XAU', 'Gold'), ('XBA', 'Bond Markets Unit European Composite Unit (EURCO)'), ('XBB', 'Bond Markets Unit European Monetary Unit (E.M.U.-6)'), ('XBC', 'Bond Markets Unit European Unit of Account 9 (E.U.A.-9)'), ('XBD', 'Bond Markets Unit European Unit of Account 17 (E.U.A.-17)'), ('XCD', 'East Caribbean Dollar'), ('XDR', 'SDR (Special Drawing Right)'), ('XOF', 'CFA Franc BCEAO'), ('XPD', 'Palladium'), ('XPF', 'CFP Franc'), ('XPT', 'Platinum'), ('XSU', 'Sucre'), ('XTS', 'Codes specifically reserved for testing purposes'), ('XUA', 'ADB Unit of Account'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('YER', 'Yemeni Rial'), ('ZAR', 'Rand'), ('ZMW', 'Zambian Kwacha'), ('ZWL', 'Zimbabwe Dollar')]),$/;"	v	class:Migration
field	./silver/migrations/0031_auto_20170125_1343.py	/^            field=models.DateField(help_text=b'Date of the transaction exchange rate.', null=True, blank=True),$/;"	v	class:Migration
field	./silver/migrations/0031_auto_20170125_1343.py	/^            field=models.DecimalField(decimal_places=4, default=1, max_digits=16, blank=True, help_text=b'Currency exchange rate from document currency to transaction_currency.', null=True),$/;"	v	class:Migration
field	./silver/migrations/0033_auto_20170203_1540.py	/^            field=models.CharField(max_length=256, null=True, blank=True),$/;"	v	class:Migration
field	./silver/migrations/0033_auto_20170203_1540.py	/^            field=models.DateTimeField(null=True, blank=True),$/;"	v	class:Migration
field	./silver/migrations/0034_auto_20170203_1644.py	/^            field=models.CharField(max_length=4),$/;"	v	class:Migration
field	./silver/migrations/0035_auto_20170206_0941.py	/^            field=models.CharField(blank=True, max_length=32, null=True, choices=[(b'transaction_declined_by_bank', b'transaction_declined_by_bank'), (b'transaction_hard_declined', b'transaction_hard_declined'), (b'invalid_payment_method', b'invalid_payment_method'), (b'expired_payment_method', b'expired_payment_method'), (b'default', b'default'), (b'invalid_card', b'invalid_card'), (b'insufficient_funds', b'insufficient_funds'), (b'transaction_declined', b'transaction_declined'), (b'expired_card', b'expired_card'), (b'transaction_hard_declined_by_bank', b'transaction_hard_declined_by_bank'), (b'limit_exceeded', b'limit_exceeded')]),$/;"	v	class:Migration
field	./silver/migrations/0035_auto_20170206_0941.py	/^            field=models.CharField(blank=True, max_length=4, null=True, help_text=b'Used to enforce a certain currency when making transactionsfor the customer.', choices=[('AED', 'AED (UAE Dirham)'), ('AFN', 'AFN (Afghani)'), ('ALL', 'ALL (Lek)'), ('AMD', 'AMD (Armenian Dram)'), ('ANG', 'ANG (Netherlands Antillean Guilder)'), ('AOA', 'AOA (Kwanza)'), ('ARS', 'ARS (Argentine Peso)'), ('AUD', 'AUD (Australian Dollar)'), ('AWG', 'AWG (Aruban Florin)'), ('AZN', 'AZN (Azerbaijanian Manat)'), ('BAM', 'BAM (Convertible Mark)'), ('BBD', 'BBD (Barbados Dollar)'), ('BDT', 'BDT (Taka)'), ('BGN', 'BGN (Bulgarian Lev)'), ('BHD', 'BHD (Bahraini Dinar)'), ('BIF', 'BIF (Burundi Franc)'), ('BMD', 'BMD (Bermudian Dollar)'), ('BND', 'BND (Brunei Dollar)'), ('BOB', 'BOB (Boliviano)'), ('BRL', 'BRL (Brazilian Real)'), ('BSD', 'BSD (Bahamian Dollar)'), ('BTN', 'BTN (Ngultrum)'), ('BWP', 'BWP (Pula)'), ('BYR', 'BYR (Belarusian Ruble)'), ('BZD', 'BZD (Belize Dollar)'), ('CAD', 'CAD (Canadian Dollar)'), ('CDF', 'CDF (Congolese Franc)'), ('CHF', 'CHF (Swiss Franc)'), ('CLP', 'CLP (Chilean Peso)'), ('CNY', 'CNY (Yuan Renminbi)'), ('COP', 'COP (Colombian Peso)'), ('CRC', 'CRC (Costa Rican Colon)'), ('CUC', 'CUC (Peso Convertible)'), ('CUP', 'CUP (Cuban Peso)'), ('CVE', 'CVE (Cabo Verde Escudo)'), ('CZK', 'CZK (Czech Koruna)'), ('DJF', 'DJF (Djibouti Franc)'), ('DKK', 'DKK (Danish Krone)'), ('DOP', 'DOP (Dominican Peso)'), ('DZD', 'DZD (Algerian Dinar)'), ('EGP', 'EGP (Egyptian Pound)'), ('ERN', 'ERN (Nakfa)'), ('ETB', 'ETB (Ethiopian Birr)'), ('EUR', 'EUR (Euro)'), ('FJD', 'FJD (Fiji Dollar)'), ('FKP', 'FKP (Falkland Islands Pound)'), ('GBP', 'GBP (Pound Sterling)'), ('GEL', 'GEL (Lari)'), ('GHS', 'GHS (Ghana Cedi)'), ('GIP', 'GIP (Gibraltar Pound)'), ('GMD', 'GMD (Dalasi)'), ('GNF', 'GNF (Guinea Franc)'), ('GTQ', 'GTQ (Quetzal)'), ('GYD', 'GYD (Guyana Dollar)'), ('HKD', 'HKD (Hong Kong Dollar)'), ('HNL', 'HNL (Lempira)'), ('HRK', 'HRK (Kuna)'), ('HTG', 'HTG (Gourde)'), ('HUF', 'HUF (Forint)'), ('IDR', 'IDR (Rupiah)'), ('ILS', 'ILS (New Israeli Sheqel)'), ('INR', 'INR (Indian Rupee)'), ('IQD', 'IQD (Iraqi Dinar)'), ('IRR', 'IRR (Iranian Rial)'), ('ISK', 'ISK (Iceland Krona)'), ('JMD', 'JMD (Jamaican Dollar)'), ('JOD', 'JOD (Jordanian Dinar)'), ('JPY', 'JPY (Yen)'), ('KES', 'KES (Kenyan Shilling)'), ('KGS', 'KGS (Som)'), ('KHR', 'KHR (Riel)'), ('KMF', 'KMF (Comoro Franc)'), ('KPW', 'KPW (North Korean Won)'), ('KRW', 'KRW (Won)'), ('KWD', 'KWD (Kuwaiti Dinar)'), ('KYD', 'KYD (Cayman Islands Dollar)'), ('KZT', 'KZT (Tenge)'), ('LAK', 'LAK (Kip)'), ('LBP', 'LBP (Lebanese Pound)'), ('LKR', 'LKR (Sri Lanka Rupee)'), ('LRD', 'LRD (Liberian Dollar)'), ('LSL', 'LSL (Loti)'), ('LYD', 'LYD (Libyan Dinar)'), ('MAD', 'MAD (Moroccan Dirham)'), ('MDL', 'MDL (Moldovan Leu)'), ('MGA', 'MGA (Malagasy Ariary)'), ('MKD', 'MKD (Denar)'), ('MMK', 'MMK (Kyat)'), ('MNT', 'MNT (Tugrik)'), ('MOP', 'MOP (Pataca)'), ('MRO', 'MRO (Ouguiya)'), ('MUR', 'MUR (Mauritius Rupee)'), ('MVR', 'MVR (Rufiyaa)'), ('MWK', 'MWK (Malawi Kwacha)'), ('MXN', 'MXN (Mexican Peso)'), ('MYR', 'MYR (Malaysian Ringgit)'), ('MZN', 'MZN (Mozambique Metical)'), ('NAD', 'NAD (Namibia Dollar)'), ('NGN', 'NGN (Naira)'), ('NIO', 'NIO (Cordoba Oro)'), ('NOK', 'NOK (Norwegian Krone)'), ('NPR', 'NPR (Nepalese Rupee)'), ('NZD', 'NZD (New Zealand Dollar)'), ('OMR', 'OMR (Rial Omani)'), ('PAB', 'PAB (Balboa)'), ('PEN', 'PEN (Sol)'), ('PGK', 'PGK (Kina)'), ('PHP', 'PHP (Philippine Peso)'), ('PKR', 'PKR (Pakistan Rupee)'), ('PLN', 'PLN (Zloty)'), ('PYG', 'PYG (Guarani)'), ('QAR', 'QAR (Qatari Rial)'), ('RON', 'RON (Romanian Leu)'), ('RSD', 'RSD (Serbian Dinar)'), ('RUB', 'RUB (Russian Ruble)'), ('RWF', 'RWF (Rwanda Franc)'), ('SAR', 'SAR (Saudi Riyal)'), ('SBD', 'SBD (Solomon Islands Dollar)'), ('SCR', 'SCR (Seychelles Rupee)'), ('SDG', 'SDG (Sudanese Pound)'), ('SEK', 'SEK (Swedish Krona)'), ('SGD', 'SGD (Singapore Dollar)'), ('SHP', 'SHP (Saint Helena Pound)'), ('SLL', 'SLL (Leone)'), ('SOS', 'SOS (Somali Shilling)'), ('SRD', 'SRD (Surinam Dollar)'), ('SSP', 'SSP (South Sudanese Pound)'), ('STD', 'STD (Dobra)'), ('SVC', 'SVC (El Salvador Colon)'), ('SYP', 'SYP (Syrian Pound)'), ('SZL', 'SZL (Lilangeni)'), ('THB', 'THB (Baht)'), ('TJS', 'TJS (Somoni)'), ('TMT', 'TMT (Turkmenistan New Manat)'), ('TND', 'TND (Tunisian Dinar)'), ('TOP', 'TOP (Pa\\u2019anga)'), ('TRY', 'TRY (Turkish Lira)'), ('TTD', 'TTD (Trinidad and Tobago Dollar)'), ('TWD', 'TWD (New Taiwan Dollar)'), ('TZS', 'TZS (Tanzanian Shilling)'), ('UAH', 'UAH (Hryvnia)'), ('UGX', 'UGX (Uganda Shilling)'), ('USD', 'USD (US Dollar)'), ('UYU', 'UYU (Peso Uruguayo)'), ('UZS', 'UZS (Uzbekistan Sum)'), ('VEF', 'VEF (Bol\\xedvar)'), ('VND', 'VND (Dong)'), ('VUV', 'VUV (Vatu)'), ('WST', 'WST (Tala)'), ('XAF', 'XAF (CFA Franc BEAC)'), ('XAG', 'XAG (Silver)'), ('XAU', 'XAU (Gold)'), ('XBA', 'XBA (Bond Markets Unit European Composite Unit (EURCO))'), ('XBB', 'XBB (Bond Markets Unit European Monetary Unit (E.M.U.-6))'), ('XBC', 'XBC (Bond Markets Unit European Unit of Account 9 (E.U.A.-9))'), ('XBD', 'XBD (Bond Markets Unit European Unit of Account 17 (E.U.A.-17))'), ('XCD', 'XCD (East Caribbean Dollar)'), ('XDR', 'XDR (SDR (Special Drawing Right))'), ('XOF', 'XOF (CFA Franc BCEAO)'), ('XPD', 'XPD (Palladium)'), ('XPF', 'XPF (CFP Franc)'), ('XPT', 'XPT (Platinum)'), ('XSU', 'XSU (Sucre)'), ('XTS', 'XTS (Codes specifically reserved for testing purposes)'), ('XUA', 'XUA (ADB Unit of Account)'), ('XXX', 'XXX (The codes assigned for transactions where no currency is involved)'), ('YER', 'YER (Yemeni Rial)'), ('ZAR', 'ZAR (Rand)'), ('ZMW', 'ZMW (Zambian Kwacha)'), ('ZWL', 'ZWL (Zimbabwe Dollar)')]),$/;"	v	class:Migration
field	./silver/migrations/0035_auto_20170206_0941.py	/^            field=models.CharField(default=b'USD', help_text=b'The currency in which the subscription will be charged.', max_length=4, choices=[('AED', 'AED (UAE Dirham)'), ('AFN', 'AFN (Afghani)'), ('ALL', 'ALL (Lek)'), ('AMD', 'AMD (Armenian Dram)'), ('ANG', 'ANG (Netherlands Antillean Guilder)'), ('AOA', 'AOA (Kwanza)'), ('ARS', 'ARS (Argentine Peso)'), ('AUD', 'AUD (Australian Dollar)'), ('AWG', 'AWG (Aruban Florin)'), ('AZN', 'AZN (Azerbaijanian Manat)'), ('BAM', 'BAM (Convertible Mark)'), ('BBD', 'BBD (Barbados Dollar)'), ('BDT', 'BDT (Taka)'), ('BGN', 'BGN (Bulgarian Lev)'), ('BHD', 'BHD (Bahraini Dinar)'), ('BIF', 'BIF (Burundi Franc)'), ('BMD', 'BMD (Bermudian Dollar)'), ('BND', 'BND (Brunei Dollar)'), ('BOB', 'BOB (Boliviano)'), ('BRL', 'BRL (Brazilian Real)'), ('BSD', 'BSD (Bahamian Dollar)'), ('BTN', 'BTN (Ngultrum)'), ('BWP', 'BWP (Pula)'), ('BYR', 'BYR (Belarusian Ruble)'), ('BZD', 'BZD (Belize Dollar)'), ('CAD', 'CAD (Canadian Dollar)'), ('CDF', 'CDF (Congolese Franc)'), ('CHF', 'CHF (Swiss Franc)'), ('CLP', 'CLP (Chilean Peso)'), ('CNY', 'CNY (Yuan Renminbi)'), ('COP', 'COP (Colombian Peso)'), ('CRC', 'CRC (Costa Rican Colon)'), ('CUC', 'CUC (Peso Convertible)'), ('CUP', 'CUP (Cuban Peso)'), ('CVE', 'CVE (Cabo Verde Escudo)'), ('CZK', 'CZK (Czech Koruna)'), ('DJF', 'DJF (Djibouti Franc)'), ('DKK', 'DKK (Danish Krone)'), ('DOP', 'DOP (Dominican Peso)'), ('DZD', 'DZD (Algerian Dinar)'), ('EGP', 'EGP (Egyptian Pound)'), ('ERN', 'ERN (Nakfa)'), ('ETB', 'ETB (Ethiopian Birr)'), ('EUR', 'EUR (Euro)'), ('FJD', 'FJD (Fiji Dollar)'), ('FKP', 'FKP (Falkland Islands Pound)'), ('GBP', 'GBP (Pound Sterling)'), ('GEL', 'GEL (Lari)'), ('GHS', 'GHS (Ghana Cedi)'), ('GIP', 'GIP (Gibraltar Pound)'), ('GMD', 'GMD (Dalasi)'), ('GNF', 'GNF (Guinea Franc)'), ('GTQ', 'GTQ (Quetzal)'), ('GYD', 'GYD (Guyana Dollar)'), ('HKD', 'HKD (Hong Kong Dollar)'), ('HNL', 'HNL (Lempira)'), ('HRK', 'HRK (Kuna)'), ('HTG', 'HTG (Gourde)'), ('HUF', 'HUF (Forint)'), ('IDR', 'IDR (Rupiah)'), ('ILS', 'ILS (New Israeli Sheqel)'), ('INR', 'INR (Indian Rupee)'), ('IQD', 'IQD (Iraqi Dinar)'), ('IRR', 'IRR (Iranian Rial)'), ('ISK', 'ISK (Iceland Krona)'), ('JMD', 'JMD (Jamaican Dollar)'), ('JOD', 'JOD (Jordanian Dinar)'), ('JPY', 'JPY (Yen)'), ('KES', 'KES (Kenyan Shilling)'), ('KGS', 'KGS (Som)'), ('KHR', 'KHR (Riel)'), ('KMF', 'KMF (Comoro Franc)'), ('KPW', 'KPW (North Korean Won)'), ('KRW', 'KRW (Won)'), ('KWD', 'KWD (Kuwaiti Dinar)'), ('KYD', 'KYD (Cayman Islands Dollar)'), ('KZT', 'KZT (Tenge)'), ('LAK', 'LAK (Kip)'), ('LBP', 'LBP (Lebanese Pound)'), ('LKR', 'LKR (Sri Lanka Rupee)'), ('LRD', 'LRD (Liberian Dollar)'), ('LSL', 'LSL (Loti)'), ('LYD', 'LYD (Libyan Dinar)'), ('MAD', 'MAD (Moroccan Dirham)'), ('MDL', 'MDL (Moldovan Leu)'), ('MGA', 'MGA (Malagasy Ariary)'), ('MKD', 'MKD (Denar)'), ('MMK', 'MMK (Kyat)'), ('MNT', 'MNT (Tugrik)'), ('MOP', 'MOP (Pataca)'), ('MRO', 'MRO (Ouguiya)'), ('MUR', 'MUR (Mauritius Rupee)'), ('MVR', 'MVR (Rufiyaa)'), ('MWK', 'MWK (Malawi Kwacha)'), ('MXN', 'MXN (Mexican Peso)'), ('MYR', 'MYR (Malaysian Ringgit)'), ('MZN', 'MZN (Mozambique Metical)'), ('NAD', 'NAD (Namibia Dollar)'), ('NGN', 'NGN (Naira)'), ('NIO', 'NIO (Cordoba Oro)'), ('NOK', 'NOK (Norwegian Krone)'), ('NPR', 'NPR (Nepalese Rupee)'), ('NZD', 'NZD (New Zealand Dollar)'), ('OMR', 'OMR (Rial Omani)'), ('PAB', 'PAB (Balboa)'), ('PEN', 'PEN (Sol)'), ('PGK', 'PGK (Kina)'), ('PHP', 'PHP (Philippine Peso)'), ('PKR', 'PKR (Pakistan Rupee)'), ('PLN', 'PLN (Zloty)'), ('PYG', 'PYG (Guarani)'), ('QAR', 'QAR (Qatari Rial)'), ('RON', 'RON (Romanian Leu)'), ('RSD', 'RSD (Serbian Dinar)'), ('RUB', 'RUB (Russian Ruble)'), ('RWF', 'RWF (Rwanda Franc)'), ('SAR', 'SAR (Saudi Riyal)'), ('SBD', 'SBD (Solomon Islands Dollar)'), ('SCR', 'SCR (Seychelles Rupee)'), ('SDG', 'SDG (Sudanese Pound)'), ('SEK', 'SEK (Swedish Krona)'), ('SGD', 'SGD (Singapore Dollar)'), ('SHP', 'SHP (Saint Helena Pound)'), ('SLL', 'SLL (Leone)'), ('SOS', 'SOS (Somali Shilling)'), ('SRD', 'SRD (Surinam Dollar)'), ('SSP', 'SSP (South Sudanese Pound)'), ('STD', 'STD (Dobra)'), ('SVC', 'SVC (El Salvador Colon)'), ('SYP', 'SYP (Syrian Pound)'), ('SZL', 'SZL (Lilangeni)'), ('THB', 'THB (Baht)'), ('TJS', 'TJS (Somoni)'), ('TMT', 'TMT (Turkmenistan New Manat)'), ('TND', 'TND (Tunisian Dinar)'), ('TOP', 'TOP (Pa\\u2019anga)'), ('TRY', 'TRY (Turkish Lira)'), ('TTD', 'TTD (Trinidad and Tobago Dollar)'), ('TWD', 'TWD (New Taiwan Dollar)'), ('TZS', 'TZS (Tanzanian Shilling)'), ('UAH', 'UAH (Hryvnia)'), ('UGX', 'UGX (Uganda Shilling)'), ('USD', 'USD (US Dollar)'), ('UYU', 'UYU (Peso Uruguayo)'), ('UZS', 'UZS (Uzbekistan Sum)'), ('VEF', 'VEF (Bol\\xedvar)'), ('VND', 'VND (Dong)'), ('VUV', 'VUV (Vatu)'), ('WST', 'WST (Tala)'), ('XAF', 'XAF (CFA Franc BEAC)'), ('XAG', 'XAG (Silver)'), ('XAU', 'XAU (Gold)'), ('XBA', 'XBA (Bond Markets Unit European Composite Unit (EURCO))'), ('XBB', 'XBB (Bond Markets Unit European Monetary Unit (E.M.U.-6))'), ('XBC', 'XBC (Bond Markets Unit European Unit of Account 9 (E.U.A.-9))'), ('XBD', 'XBD (Bond Markets Unit European Unit of Account 17 (E.U.A.-17))'), ('XCD', 'XCD (East Caribbean Dollar)'), ('XDR', 'XDR (SDR (Special Drawing Right))'), ('XOF', 'XOF (CFA Franc BCEAO)'), ('XPD', 'XPD (Palladium)'), ('XPF', 'XPF (CFP Franc)'), ('XPT', 'XPT (Platinum)'), ('XSU', 'XSU (Sucre)'), ('XTS', 'XTS (Codes specifically reserved for testing purposes)'), ('XUA', 'XUA (ADB Unit of Account)'), ('XXX', 'XXX (The codes assigned for transactions where no currency is involved)'), ('YER', 'YER (Yemeni Rial)'), ('ZAR', 'ZAR (Rand)'), ('ZMW', 'ZMW (Zambian Kwacha)'), ('ZWL', 'ZWL (Zimbabwe Dollar)')]),$/;"	v	class:Migration
field	./silver/migrations/0035_auto_20170206_0941.py	/^            field=models.CharField(default=b'USD', help_text=b'The currency used for billing.', max_length=4, choices=[('AED', 'AED (UAE Dirham)'), ('AFN', 'AFN (Afghani)'), ('ALL', 'ALL (Lek)'), ('AMD', 'AMD (Armenian Dram)'), ('ANG', 'ANG (Netherlands Antillean Guilder)'), ('AOA', 'AOA (Kwanza)'), ('ARS', 'ARS (Argentine Peso)'), ('AUD', 'AUD (Australian Dollar)'), ('AWG', 'AWG (Aruban Florin)'), ('AZN', 'AZN (Azerbaijanian Manat)'), ('BAM', 'BAM (Convertible Mark)'), ('BBD', 'BBD (Barbados Dollar)'), ('BDT', 'BDT (Taka)'), ('BGN', 'BGN (Bulgarian Lev)'), ('BHD', 'BHD (Bahraini Dinar)'), ('BIF', 'BIF (Burundi Franc)'), ('BMD', 'BMD (Bermudian Dollar)'), ('BND', 'BND (Brunei Dollar)'), ('BOB', 'BOB (Boliviano)'), ('BRL', 'BRL (Brazilian Real)'), ('BSD', 'BSD (Bahamian Dollar)'), ('BTN', 'BTN (Ngultrum)'), ('BWP', 'BWP (Pula)'), ('BYR', 'BYR (Belarusian Ruble)'), ('BZD', 'BZD (Belize Dollar)'), ('CAD', 'CAD (Canadian Dollar)'), ('CDF', 'CDF (Congolese Franc)'), ('CHF', 'CHF (Swiss Franc)'), ('CLP', 'CLP (Chilean Peso)'), ('CNY', 'CNY (Yuan Renminbi)'), ('COP', 'COP (Colombian Peso)'), ('CRC', 'CRC (Costa Rican Colon)'), ('CUC', 'CUC (Peso Convertible)'), ('CUP', 'CUP (Cuban Peso)'), ('CVE', 'CVE (Cabo Verde Escudo)'), ('CZK', 'CZK (Czech Koruna)'), ('DJF', 'DJF (Djibouti Franc)'), ('DKK', 'DKK (Danish Krone)'), ('DOP', 'DOP (Dominican Peso)'), ('DZD', 'DZD (Algerian Dinar)'), ('EGP', 'EGP (Egyptian Pound)'), ('ERN', 'ERN (Nakfa)'), ('ETB', 'ETB (Ethiopian Birr)'), ('EUR', 'EUR (Euro)'), ('FJD', 'FJD (Fiji Dollar)'), ('FKP', 'FKP (Falkland Islands Pound)'), ('GBP', 'GBP (Pound Sterling)'), ('GEL', 'GEL (Lari)'), ('GHS', 'GHS (Ghana Cedi)'), ('GIP', 'GIP (Gibraltar Pound)'), ('GMD', 'GMD (Dalasi)'), ('GNF', 'GNF (Guinea Franc)'), ('GTQ', 'GTQ (Quetzal)'), ('GYD', 'GYD (Guyana Dollar)'), ('HKD', 'HKD (Hong Kong Dollar)'), ('HNL', 'HNL (Lempira)'), ('HRK', 'HRK (Kuna)'), ('HTG', 'HTG (Gourde)'), ('HUF', 'HUF (Forint)'), ('IDR', 'IDR (Rupiah)'), ('ILS', 'ILS (New Israeli Sheqel)'), ('INR', 'INR (Indian Rupee)'), ('IQD', 'IQD (Iraqi Dinar)'), ('IRR', 'IRR (Iranian Rial)'), ('ISK', 'ISK (Iceland Krona)'), ('JMD', 'JMD (Jamaican Dollar)'), ('JOD', 'JOD (Jordanian Dinar)'), ('JPY', 'JPY (Yen)'), ('KES', 'KES (Kenyan Shilling)'), ('KGS', 'KGS (Som)'), ('KHR', 'KHR (Riel)'), ('KMF', 'KMF (Comoro Franc)'), ('KPW', 'KPW (North Korean Won)'), ('KRW', 'KRW (Won)'), ('KWD', 'KWD (Kuwaiti Dinar)'), ('KYD', 'KYD (Cayman Islands Dollar)'), ('KZT', 'KZT (Tenge)'), ('LAK', 'LAK (Kip)'), ('LBP', 'LBP (Lebanese Pound)'), ('LKR', 'LKR (Sri Lanka Rupee)'), ('LRD', 'LRD (Liberian Dollar)'), ('LSL', 'LSL (Loti)'), ('LYD', 'LYD (Libyan Dinar)'), ('MAD', 'MAD (Moroccan Dirham)'), ('MDL', 'MDL (Moldovan Leu)'), ('MGA', 'MGA (Malagasy Ariary)'), ('MKD', 'MKD (Denar)'), ('MMK', 'MMK (Kyat)'), ('MNT', 'MNT (Tugrik)'), ('MOP', 'MOP (Pataca)'), ('MRO', 'MRO (Ouguiya)'), ('MUR', 'MUR (Mauritius Rupee)'), ('MVR', 'MVR (Rufiyaa)'), ('MWK', 'MWK (Malawi Kwacha)'), ('MXN', 'MXN (Mexican Peso)'), ('MYR', 'MYR (Malaysian Ringgit)'), ('MZN', 'MZN (Mozambique Metical)'), ('NAD', 'NAD (Namibia Dollar)'), ('NGN', 'NGN (Naira)'), ('NIO', 'NIO (Cordoba Oro)'), ('NOK', 'NOK (Norwegian Krone)'), ('NPR', 'NPR (Nepalese Rupee)'), ('NZD', 'NZD (New Zealand Dollar)'), ('OMR', 'OMR (Rial Omani)'), ('PAB', 'PAB (Balboa)'), ('PEN', 'PEN (Sol)'), ('PGK', 'PGK (Kina)'), ('PHP', 'PHP (Philippine Peso)'), ('PKR', 'PKR (Pakistan Rupee)'), ('PLN', 'PLN (Zloty)'), ('PYG', 'PYG (Guarani)'), ('QAR', 'QAR (Qatari Rial)'), ('RON', 'RON (Romanian Leu)'), ('RSD', 'RSD (Serbian Dinar)'), ('RUB', 'RUB (Russian Ruble)'), ('RWF', 'RWF (Rwanda Franc)'), ('SAR', 'SAR (Saudi Riyal)'), ('SBD', 'SBD (Solomon Islands Dollar)'), ('SCR', 'SCR (Seychelles Rupee)'), ('SDG', 'SDG (Sudanese Pound)'), ('SEK', 'SEK (Swedish Krona)'), ('SGD', 'SGD (Singapore Dollar)'), ('SHP', 'SHP (Saint Helena Pound)'), ('SLL', 'SLL (Leone)'), ('SOS', 'SOS (Somali Shilling)'), ('SRD', 'SRD (Surinam Dollar)'), ('SSP', 'SSP (South Sudanese Pound)'), ('STD', 'STD (Dobra)'), ('SVC', 'SVC (El Salvador Colon)'), ('SYP', 'SYP (Syrian Pound)'), ('SZL', 'SZL (Lilangeni)'), ('THB', 'THB (Baht)'), ('TJS', 'TJS (Somoni)'), ('TMT', 'TMT (Turkmenistan New Manat)'), ('TND', 'TND (Tunisian Dinar)'), ('TOP', 'TOP (Pa\\u2019anga)'), ('TRY', 'TRY (Turkish Lira)'), ('TTD', 'TTD (Trinidad and Tobago Dollar)'), ('TWD', 'TWD (New Taiwan Dollar)'), ('TZS', 'TZS (Tanzanian Shilling)'), ('UAH', 'UAH (Hryvnia)'), ('UGX', 'UGX (Uganda Shilling)'), ('USD', 'USD (US Dollar)'), ('UYU', 'UYU (Peso Uruguayo)'), ('UZS', 'UZS (Uzbekistan Sum)'), ('VEF', 'VEF (Bol\\xedvar)'), ('VND', 'VND (Dong)'), ('VUV', 'VUV (Vatu)'), ('WST', 'WST (Tala)'), ('XAF', 'XAF (CFA Franc BEAC)'), ('XAG', 'XAG (Silver)'), ('XAU', 'XAU (Gold)'), ('XBA', 'XBA (Bond Markets Unit European Composite Unit (EURCO))'), ('XBB', 'XBB (Bond Markets Unit European Monetary Unit (E.M.U.-6))'), ('XBC', 'XBC (Bond Markets Unit European Unit of Account 9 (E.U.A.-9))'), ('XBD', 'XBD (Bond Markets Unit European Unit of Account 17 (E.U.A.-17))'), ('XCD', 'XCD (East Caribbean Dollar)'), ('XDR', 'XDR (SDR (Special Drawing Right))'), ('XOF', 'XOF (CFA Franc BCEAO)'), ('XPD', 'XPD (Palladium)'), ('XPF', 'XPF (CFP Franc)'), ('XPT', 'XPT (Platinum)'), ('XSU', 'XSU (Sucre)'), ('XTS', 'XTS (Codes specifically reserved for testing purposes)'), ('XUA', 'XUA (ADB Unit of Account)'), ('XXX', 'XXX (The codes assigned for transactions where no currency is involved)'), ('YER', 'YER (Yemeni Rial)'), ('ZAR', 'ZAR (Rand)'), ('ZMW', 'ZMW (Zambian Kwacha)'), ('ZWL', 'ZWL (Zimbabwe Dollar)')]),$/;"	v	class:Migration
field	./silver/migrations/0035_auto_20170206_0941.py	/^            field=models.CharField(help_text=b'The currency used for billing.', max_length=4, choices=[('AED', 'AED (UAE Dirham)'), ('AFN', 'AFN (Afghani)'), ('ALL', 'ALL (Lek)'), ('AMD', 'AMD (Armenian Dram)'), ('ANG', 'ANG (Netherlands Antillean Guilder)'), ('AOA', 'AOA (Kwanza)'), ('ARS', 'ARS (Argentine Peso)'), ('AUD', 'AUD (Australian Dollar)'), ('AWG', 'AWG (Aruban Florin)'), ('AZN', 'AZN (Azerbaijanian Manat)'), ('BAM', 'BAM (Convertible Mark)'), ('BBD', 'BBD (Barbados Dollar)'), ('BDT', 'BDT (Taka)'), ('BGN', 'BGN (Bulgarian Lev)'), ('BHD', 'BHD (Bahraini Dinar)'), ('BIF', 'BIF (Burundi Franc)'), ('BMD', 'BMD (Bermudian Dollar)'), ('BND', 'BND (Brunei Dollar)'), ('BOB', 'BOB (Boliviano)'), ('BRL', 'BRL (Brazilian Real)'), ('BSD', 'BSD (Bahamian Dollar)'), ('BTN', 'BTN (Ngultrum)'), ('BWP', 'BWP (Pula)'), ('BYR', 'BYR (Belarusian Ruble)'), ('BZD', 'BZD (Belize Dollar)'), ('CAD', 'CAD (Canadian Dollar)'), ('CDF', 'CDF (Congolese Franc)'), ('CHF', 'CHF (Swiss Franc)'), ('CLP', 'CLP (Chilean Peso)'), ('CNY', 'CNY (Yuan Renminbi)'), ('COP', 'COP (Colombian Peso)'), ('CRC', 'CRC (Costa Rican Colon)'), ('CUC', 'CUC (Peso Convertible)'), ('CUP', 'CUP (Cuban Peso)'), ('CVE', 'CVE (Cabo Verde Escudo)'), ('CZK', 'CZK (Czech Koruna)'), ('DJF', 'DJF (Djibouti Franc)'), ('DKK', 'DKK (Danish Krone)'), ('DOP', 'DOP (Dominican Peso)'), ('DZD', 'DZD (Algerian Dinar)'), ('EGP', 'EGP (Egyptian Pound)'), ('ERN', 'ERN (Nakfa)'), ('ETB', 'ETB (Ethiopian Birr)'), ('EUR', 'EUR (Euro)'), ('FJD', 'FJD (Fiji Dollar)'), ('FKP', 'FKP (Falkland Islands Pound)'), ('GBP', 'GBP (Pound Sterling)'), ('GEL', 'GEL (Lari)'), ('GHS', 'GHS (Ghana Cedi)'), ('GIP', 'GIP (Gibraltar Pound)'), ('GMD', 'GMD (Dalasi)'), ('GNF', 'GNF (Guinea Franc)'), ('GTQ', 'GTQ (Quetzal)'), ('GYD', 'GYD (Guyana Dollar)'), ('HKD', 'HKD (Hong Kong Dollar)'), ('HNL', 'HNL (Lempira)'), ('HRK', 'HRK (Kuna)'), ('HTG', 'HTG (Gourde)'), ('HUF', 'HUF (Forint)'), ('IDR', 'IDR (Rupiah)'), ('ILS', 'ILS (New Israeli Sheqel)'), ('INR', 'INR (Indian Rupee)'), ('IQD', 'IQD (Iraqi Dinar)'), ('IRR', 'IRR (Iranian Rial)'), ('ISK', 'ISK (Iceland Krona)'), ('JMD', 'JMD (Jamaican Dollar)'), ('JOD', 'JOD (Jordanian Dinar)'), ('JPY', 'JPY (Yen)'), ('KES', 'KES (Kenyan Shilling)'), ('KGS', 'KGS (Som)'), ('KHR', 'KHR (Riel)'), ('KMF', 'KMF (Comoro Franc)'), ('KPW', 'KPW (North Korean Won)'), ('KRW', 'KRW (Won)'), ('KWD', 'KWD (Kuwaiti Dinar)'), ('KYD', 'KYD (Cayman Islands Dollar)'), ('KZT', 'KZT (Tenge)'), ('LAK', 'LAK (Kip)'), ('LBP', 'LBP (Lebanese Pound)'), ('LKR', 'LKR (Sri Lanka Rupee)'), ('LRD', 'LRD (Liberian Dollar)'), ('LSL', 'LSL (Loti)'), ('LYD', 'LYD (Libyan Dinar)'), ('MAD', 'MAD (Moroccan Dirham)'), ('MDL', 'MDL (Moldovan Leu)'), ('MGA', 'MGA (Malagasy Ariary)'), ('MKD', 'MKD (Denar)'), ('MMK', 'MMK (Kyat)'), ('MNT', 'MNT (Tugrik)'), ('MOP', 'MOP (Pataca)'), ('MRO', 'MRO (Ouguiya)'), ('MUR', 'MUR (Mauritius Rupee)'), ('MVR', 'MVR (Rufiyaa)'), ('MWK', 'MWK (Malawi Kwacha)'), ('MXN', 'MXN (Mexican Peso)'), ('MYR', 'MYR (Malaysian Ringgit)'), ('MZN', 'MZN (Mozambique Metical)'), ('NAD', 'NAD (Namibia Dollar)'), ('NGN', 'NGN (Naira)'), ('NIO', 'NIO (Cordoba Oro)'), ('NOK', 'NOK (Norwegian Krone)'), ('NPR', 'NPR (Nepalese Rupee)'), ('NZD', 'NZD (New Zealand Dollar)'), ('OMR', 'OMR (Rial Omani)'), ('PAB', 'PAB (Balboa)'), ('PEN', 'PEN (Sol)'), ('PGK', 'PGK (Kina)'), ('PHP', 'PHP (Philippine Peso)'), ('PKR', 'PKR (Pakistan Rupee)'), ('PLN', 'PLN (Zloty)'), ('PYG', 'PYG (Guarani)'), ('QAR', 'QAR (Qatari Rial)'), ('RON', 'RON (Romanian Leu)'), ('RSD', 'RSD (Serbian Dinar)'), ('RUB', 'RUB (Russian Ruble)'), ('RWF', 'RWF (Rwanda Franc)'), ('SAR', 'SAR (Saudi Riyal)'), ('SBD', 'SBD (Solomon Islands Dollar)'), ('SCR', 'SCR (Seychelles Rupee)'), ('SDG', 'SDG (Sudanese Pound)'), ('SEK', 'SEK (Swedish Krona)'), ('SGD', 'SGD (Singapore Dollar)'), ('SHP', 'SHP (Saint Helena Pound)'), ('SLL', 'SLL (Leone)'), ('SOS', 'SOS (Somali Shilling)'), ('SRD', 'SRD (Surinam Dollar)'), ('SSP', 'SSP (South Sudanese Pound)'), ('STD', 'STD (Dobra)'), ('SVC', 'SVC (El Salvador Colon)'), ('SYP', 'SYP (Syrian Pound)'), ('SZL', 'SZL (Lilangeni)'), ('THB', 'THB (Baht)'), ('TJS', 'TJS (Somoni)'), ('TMT', 'TMT (Turkmenistan New Manat)'), ('TND', 'TND (Tunisian Dinar)'), ('TOP', 'TOP (Pa\\u2019anga)'), ('TRY', 'TRY (Turkish Lira)'), ('TTD', 'TTD (Trinidad and Tobago Dollar)'), ('TWD', 'TWD (New Taiwan Dollar)'), ('TZS', 'TZS (Tanzanian Shilling)'), ('UAH', 'UAH (Hryvnia)'), ('UGX', 'UGX (Uganda Shilling)'), ('USD', 'USD (US Dollar)'), ('UYU', 'UYU (Peso Uruguayo)'), ('UZS', 'UZS (Uzbekistan Sum)'), ('VEF', 'VEF (Bol\\xedvar)'), ('VND', 'VND (Dong)'), ('VUV', 'VUV (Vatu)'), ('WST', 'WST (Tala)'), ('XAF', 'XAF (CFA Franc BEAC)'), ('XAG', 'XAG (Silver)'), ('XAU', 'XAU (Gold)'), ('XBA', 'XBA (Bond Markets Unit European Composite Unit (EURCO))'), ('XBB', 'XBB (Bond Markets Unit European Monetary Unit (E.M.U.-6))'), ('XBC', 'XBC (Bond Markets Unit European Unit of Account 9 (E.U.A.-9))'), ('XBD', 'XBD (Bond Markets Unit European Unit of Account 17 (E.U.A.-17))'), ('XCD', 'XCD (East Caribbean Dollar)'), ('XDR', 'XDR (SDR (Special Drawing Right))'), ('XOF', 'XOF (CFA Franc BCEAO)'), ('XPD', 'XPD (Palladium)'), ('XPF', 'XPF (CFP Franc)'), ('XPT', 'XPT (Platinum)'), ('XSU', 'XSU (Sucre)'), ('XTS', 'XTS (Codes specifically reserved for testing purposes)'), ('XUA', 'XUA (ADB Unit of Account)'), ('XXX', 'XXX (The codes assigned for transactions where no currency is involved)'), ('YER', 'YER (Yemeni Rial)'), ('ZAR', 'ZAR (Rand)'), ('ZMW', 'ZMW (Zambian Kwacha)'), ('ZWL', 'ZWL (Zimbabwe Dollar)')]),$/;"	v	class:Migration
field	./silver/migrations/0035_auto_20170206_0941.py	/^            field=models.CharField(help_text=b'The currency used when making a transaction.', max_length=4, choices=[('AED', 'AED (UAE Dirham)'), ('AFN', 'AFN (Afghani)'), ('ALL', 'ALL (Lek)'), ('AMD', 'AMD (Armenian Dram)'), ('ANG', 'ANG (Netherlands Antillean Guilder)'), ('AOA', 'AOA (Kwanza)'), ('ARS', 'ARS (Argentine Peso)'), ('AUD', 'AUD (Australian Dollar)'), ('AWG', 'AWG (Aruban Florin)'), ('AZN', 'AZN (Azerbaijanian Manat)'), ('BAM', 'BAM (Convertible Mark)'), ('BBD', 'BBD (Barbados Dollar)'), ('BDT', 'BDT (Taka)'), ('BGN', 'BGN (Bulgarian Lev)'), ('BHD', 'BHD (Bahraini Dinar)'), ('BIF', 'BIF (Burundi Franc)'), ('BMD', 'BMD (Bermudian Dollar)'), ('BND', 'BND (Brunei Dollar)'), ('BOB', 'BOB (Boliviano)'), ('BRL', 'BRL (Brazilian Real)'), ('BSD', 'BSD (Bahamian Dollar)'), ('BTN', 'BTN (Ngultrum)'), ('BWP', 'BWP (Pula)'), ('BYR', 'BYR (Belarusian Ruble)'), ('BZD', 'BZD (Belize Dollar)'), ('CAD', 'CAD (Canadian Dollar)'), ('CDF', 'CDF (Congolese Franc)'), ('CHF', 'CHF (Swiss Franc)'), ('CLP', 'CLP (Chilean Peso)'), ('CNY', 'CNY (Yuan Renminbi)'), ('COP', 'COP (Colombian Peso)'), ('CRC', 'CRC (Costa Rican Colon)'), ('CUC', 'CUC (Peso Convertible)'), ('CUP', 'CUP (Cuban Peso)'), ('CVE', 'CVE (Cabo Verde Escudo)'), ('CZK', 'CZK (Czech Koruna)'), ('DJF', 'DJF (Djibouti Franc)'), ('DKK', 'DKK (Danish Krone)'), ('DOP', 'DOP (Dominican Peso)'), ('DZD', 'DZD (Algerian Dinar)'), ('EGP', 'EGP (Egyptian Pound)'), ('ERN', 'ERN (Nakfa)'), ('ETB', 'ETB (Ethiopian Birr)'), ('EUR', 'EUR (Euro)'), ('FJD', 'FJD (Fiji Dollar)'), ('FKP', 'FKP (Falkland Islands Pound)'), ('GBP', 'GBP (Pound Sterling)'), ('GEL', 'GEL (Lari)'), ('GHS', 'GHS (Ghana Cedi)'), ('GIP', 'GIP (Gibraltar Pound)'), ('GMD', 'GMD (Dalasi)'), ('GNF', 'GNF (Guinea Franc)'), ('GTQ', 'GTQ (Quetzal)'), ('GYD', 'GYD (Guyana Dollar)'), ('HKD', 'HKD (Hong Kong Dollar)'), ('HNL', 'HNL (Lempira)'), ('HRK', 'HRK (Kuna)'), ('HTG', 'HTG (Gourde)'), ('HUF', 'HUF (Forint)'), ('IDR', 'IDR (Rupiah)'), ('ILS', 'ILS (New Israeli Sheqel)'), ('INR', 'INR (Indian Rupee)'), ('IQD', 'IQD (Iraqi Dinar)'), ('IRR', 'IRR (Iranian Rial)'), ('ISK', 'ISK (Iceland Krona)'), ('JMD', 'JMD (Jamaican Dollar)'), ('JOD', 'JOD (Jordanian Dinar)'), ('JPY', 'JPY (Yen)'), ('KES', 'KES (Kenyan Shilling)'), ('KGS', 'KGS (Som)'), ('KHR', 'KHR (Riel)'), ('KMF', 'KMF (Comoro Franc)'), ('KPW', 'KPW (North Korean Won)'), ('KRW', 'KRW (Won)'), ('KWD', 'KWD (Kuwaiti Dinar)'), ('KYD', 'KYD (Cayman Islands Dollar)'), ('KZT', 'KZT (Tenge)'), ('LAK', 'LAK (Kip)'), ('LBP', 'LBP (Lebanese Pound)'), ('LKR', 'LKR (Sri Lanka Rupee)'), ('LRD', 'LRD (Liberian Dollar)'), ('LSL', 'LSL (Loti)'), ('LYD', 'LYD (Libyan Dinar)'), ('MAD', 'MAD (Moroccan Dirham)'), ('MDL', 'MDL (Moldovan Leu)'), ('MGA', 'MGA (Malagasy Ariary)'), ('MKD', 'MKD (Denar)'), ('MMK', 'MMK (Kyat)'), ('MNT', 'MNT (Tugrik)'), ('MOP', 'MOP (Pataca)'), ('MRO', 'MRO (Ouguiya)'), ('MUR', 'MUR (Mauritius Rupee)'), ('MVR', 'MVR (Rufiyaa)'), ('MWK', 'MWK (Malawi Kwacha)'), ('MXN', 'MXN (Mexican Peso)'), ('MYR', 'MYR (Malaysian Ringgit)'), ('MZN', 'MZN (Mozambique Metical)'), ('NAD', 'NAD (Namibia Dollar)'), ('NGN', 'NGN (Naira)'), ('NIO', 'NIO (Cordoba Oro)'), ('NOK', 'NOK (Norwegian Krone)'), ('NPR', 'NPR (Nepalese Rupee)'), ('NZD', 'NZD (New Zealand Dollar)'), ('OMR', 'OMR (Rial Omani)'), ('PAB', 'PAB (Balboa)'), ('PEN', 'PEN (Sol)'), ('PGK', 'PGK (Kina)'), ('PHP', 'PHP (Philippine Peso)'), ('PKR', 'PKR (Pakistan Rupee)'), ('PLN', 'PLN (Zloty)'), ('PYG', 'PYG (Guarani)'), ('QAR', 'QAR (Qatari Rial)'), ('RON', 'RON (Romanian Leu)'), ('RSD', 'RSD (Serbian Dinar)'), ('RUB', 'RUB (Russian Ruble)'), ('RWF', 'RWF (Rwanda Franc)'), ('SAR', 'SAR (Saudi Riyal)'), ('SBD', 'SBD (Solomon Islands Dollar)'), ('SCR', 'SCR (Seychelles Rupee)'), ('SDG', 'SDG (Sudanese Pound)'), ('SEK', 'SEK (Swedish Krona)'), ('SGD', 'SGD (Singapore Dollar)'), ('SHP', 'SHP (Saint Helena Pound)'), ('SLL', 'SLL (Leone)'), ('SOS', 'SOS (Somali Shilling)'), ('SRD', 'SRD (Surinam Dollar)'), ('SSP', 'SSP (South Sudanese Pound)'), ('STD', 'STD (Dobra)'), ('SVC', 'SVC (El Salvador Colon)'), ('SYP', 'SYP (Syrian Pound)'), ('SZL', 'SZL (Lilangeni)'), ('THB', 'THB (Baht)'), ('TJS', 'TJS (Somoni)'), ('TMT', 'TMT (Turkmenistan New Manat)'), ('TND', 'TND (Tunisian Dinar)'), ('TOP', 'TOP (Pa\\u2019anga)'), ('TRY', 'TRY (Turkish Lira)'), ('TTD', 'TTD (Trinidad and Tobago Dollar)'), ('TWD', 'TWD (New Taiwan Dollar)'), ('TZS', 'TZS (Tanzanian Shilling)'), ('UAH', 'UAH (Hryvnia)'), ('UGX', 'UGX (Uganda Shilling)'), ('USD', 'USD (US Dollar)'), ('UYU', 'UYU (Peso Uruguayo)'), ('UZS', 'UZS (Uzbekistan Sum)'), ('VEF', 'VEF (Bol\\xedvar)'), ('VND', 'VND (Dong)'), ('VUV', 'VUV (Vatu)'), ('WST', 'WST (Tala)'), ('XAF', 'XAF (CFA Franc BEAC)'), ('XAG', 'XAG (Silver)'), ('XAU', 'XAU (Gold)'), ('XBA', 'XBA (Bond Markets Unit European Composite Unit (EURCO))'), ('XBB', 'XBB (Bond Markets Unit European Monetary Unit (E.M.U.-6))'), ('XBC', 'XBC (Bond Markets Unit European Unit of Account 9 (E.U.A.-9))'), ('XBD', 'XBD (Bond Markets Unit European Unit of Account 17 (E.U.A.-17))'), ('XCD', 'XCD (East Caribbean Dollar)'), ('XDR', 'XDR (SDR (Special Drawing Right))'), ('XOF', 'XOF (CFA Franc BCEAO)'), ('XPD', 'XPD (Palladium)'), ('XPF', 'XPF (CFP Franc)'), ('XPT', 'XPT (Platinum)'), ('XSU', 'XSU (Sucre)'), ('XTS', 'XTS (Codes specifically reserved for testing purposes)'), ('XUA', 'XUA (ADB Unit of Account)'), ('XXX', 'XXX (The codes assigned for transactions where no currency is involved)'), ('YER', 'YER (Yemeni Rial)'), ('ZAR', 'ZAR (Rand)'), ('ZMW', 'ZMW (Zambian Kwacha)'), ('ZWL', 'ZWL (Zimbabwe Dollar)')]),$/;"	v	class:Migration
field	./silver/migrations/0035_auto_20170206_0941.py	/^            field=models.CharField(max_length=3, choices=[('AD', 'Andorra'), ('AE', 'United Arab Emirates'), ('AF', 'Afghanistan'), ('AG', 'Antigua and Barbuda'), ('AI', 'Anguilla'), ('AL', 'Albania'), ('AM', 'Armenia'), ('AO', 'Angola'), ('AQ', 'Antarctica'), ('AR', 'Argentina'), ('AS', 'American Samoa'), ('AT', 'Austria'), ('AU', 'Australia'), ('AW', 'Aruba'), ('AX', '\\xc5land Islands'), ('AZ', 'Azerbaijan'), ('BA', 'Bosnia and Herzegovina'), ('BB', 'Barbados'), ('BD', 'Bangladesh'), ('BE', 'Belgium'), ('BF', 'Burkina Faso'), ('BG', 'Bulgaria'), ('BH', 'Bahrain'), ('BI', 'Burundi'), ('BJ', 'Benin'), ('BL', 'Saint Barth\\xe9lemy'), ('BM', 'Bermuda'), ('BN', 'Brunei Darussalam'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BR', 'Brazil'), ('BS', 'Bahamas'), ('BT', 'Bhutan'), ('BV', 'Bouvet Island'), ('BW', 'Botswana'), ('BY', 'Belarus'), ('BZ', 'Belize'), ('CA', 'Canada'), ('CC', 'Cocos (Keeling) Islands'), ('CD', 'Congo, The Democratic Republic of the'), ('CF', 'Central African Republic'), ('CG', 'Congo'), ('CH', 'Switzerland'), ('CI', "C\\xf4te d'Ivoire"), ('CK', 'Cook Islands'), ('CL', 'Chile'), ('CM', 'Cameroon'), ('CN', 'China'), ('CO', 'Colombia'), ('CR', 'Costa Rica'), ('CU', 'Cuba'), ('CV', 'Cabo Verde'), ('CW', 'Cura\\xe7ao'), ('CX', 'Christmas Island'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DE', 'Germany'), ('DJ', 'Djibouti'), ('DK', 'Denmark'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('DZ', 'Algeria'), ('EC', 'Ecuador'), ('EE', 'Estonia'), ('EG', 'Egypt'), ('EH', 'Western Sahara'), ('ER', 'Eritrea'), ('ES', 'Spain'), ('ET', 'Ethiopia'), ('FI', 'Finland'), ('FJ', 'Fiji'), ('FK', 'Falkland Islands (Malvinas)'), ('FM', 'Micronesia, Federated States of'), ('FO', 'Faroe Islands'), ('FR', 'France'), ('GA', 'Gabon'), ('GB', 'United Kingdom'), ('GD', 'Grenada'), ('GE', 'Georgia'), ('GF', 'French Guiana'), ('GG', 'Guernsey'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GL', 'Greenland'), ('GM', 'Gambia'), ('GN', 'Guinea'), ('GP', 'Guadeloupe'), ('GQ', 'Equatorial Guinea'), ('GR', 'Greece'), ('GS', 'South Georgia and the South Sandwich Islands'), ('GT', 'Guatemala'), ('GU', 'Guam'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HK', 'Hong Kong'), ('HM', 'Heard Island and McDonald Islands'), ('HN', 'Honduras'), ('HR', 'Croatia'), ('HT', 'Haiti'), ('HU', 'Hungary'), ('ID', 'Indonesia'), ('IE', 'Ireland'), ('IL', 'Israel'), ('IM', 'Isle of Man'), ('IN', 'India'), ('IO', 'British Indian Ocean Territory'), ('IQ', 'Iraq'), ('IR', 'Iran, Islamic Republic of'), ('IS', 'Iceland'), ('IT', 'Italy'), ('JE', 'Jersey'), ('JM', 'Jamaica'), ('JO', 'Jordan'), ('JP', 'Japan'), ('KE', 'Kenya'), ('KG', 'Kyrgyzstan'), ('KH', 'Cambodia'), ('KI', 'Kiribati'), ('KM', 'Comoros'), ('KN', 'Saint Kitts and Nevis'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KY', 'Cayman Islands'), ('KZ', 'Kazakhstan'), ('LA', "Lao People's Democratic Republic"), ('LB', 'Lebanon'), ('LC', 'Saint Lucia'), ('LI', 'Liechtenstein'), ('LK', 'Sri Lanka'), ('LR', 'Liberia'), ('LS', 'Lesotho'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('LV', 'Latvia'), ('LY', 'Libya'), ('MA', 'Morocco'), ('MC', 'Monaco'), ('MD', 'Moldova, Republic of'), ('ME', 'Montenegro'), ('MF', 'Saint Martin (French part)'), ('MG', 'Madagascar'), ('MH', 'Marshall Islands'), ('MK', 'Macedonia, Republic of'), ('ML', 'Mali'), ('MM', 'Myanmar'), ('MN', 'Mongolia'), ('MO', 'Macao'), ('MP', 'Northern Mariana Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MS', 'Montserrat'), ('MT', 'Malta'), ('MU', 'Mauritius'), ('MV', 'Maldives'), ('MW', 'Malawi'), ('MX', 'Mexico'), ('MY', 'Malaysia'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('NC', 'New Caledonia'), ('NE', 'Niger'), ('NF', 'Norfolk Island'), ('NG', 'Nigeria'), ('NI', 'Nicaragua'), ('NL', 'Netherlands'), ('NO', 'Norway'), ('NP', 'Nepal'), ('NR', 'Nauru'), ('NU', 'Niue'), ('NZ', 'New Zealand'), ('OM', 'Oman'), ('PA', 'Panama'), ('PE', 'Peru'), ('PF', 'French Polynesia'), ('PG', 'Papua New Guinea'), ('PH', 'Philippines'), ('PK', 'Pakistan'), ('PL', 'Poland'), ('PM', 'Saint Pierre and Miquelon'), ('PN', 'Pitcairn'), ('PR', 'Puerto Rico'), ('PS', 'Palestine, State of'), ('PT', 'Portugal'), ('PW', 'Palau'), ('PY', 'Paraguay'), ('QA', 'Qatar'), ('RE', 'R\\xe9union'), ('RO', 'Romania'), ('RS', 'Serbia'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('SA', 'Saudi Arabia'), ('SB', 'Solomon Islands'), ('SC', 'Seychelles'), ('SD', 'Sudan'), ('SE', 'Sweden'), ('SG', 'Singapore'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('SI', 'Slovenia'), ('SJ', 'Svalbard and Jan Mayen'), ('SK', 'Slovakia'), ('SL', 'Sierra Leone'), ('SM', 'San Marino'), ('SN', 'Senegal'), ('SO', 'Somalia'), ('SR', 'Suriname'), ('SS', 'South Sudan'), ('ST', 'Sao Tome and Principe'), ('SV', 'El Salvador'), ('SX', 'Sint Maarten (Dutch part)'), ('SY', 'Syrian Arab Republic'), ('SZ', 'Swaziland'), ('TC', 'Turks and Caicos Islands'), ('TD', 'Chad'), ('TF', 'French Southern Territories'), ('TG', 'Togo'), ('TH', 'Thailand'), ('TJ', 'Tajikistan'), ('TK', 'Tokelau'), ('TL', 'Timor-Leste'), ('TM', 'Turkmenistan'), ('TN', 'Tunisia'), ('TO', 'Tonga'), ('TR', 'Turkey'), ('TT', 'Trinidad and Tobago'), ('TV', 'Tuvalu'), ('TW', 'Taiwan, Province of China'), ('TZ', 'Tanzania, United Republic of'), ('UA', 'Ukraine'), ('UG', 'Uganda'), ('UM', 'United States Minor Outlying Islands'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VA', 'Holy See (Vatican City State)'), ('VC', 'Saint Vincent and the Grenadines'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('VN', 'Viet Nam'), ('VU', 'Vanuatu'), ('WF', 'Wallis and Futuna'), ('WS', 'Samoa'), ('YE', 'Yemen'), ('YT', 'Mayotte'), ('ZA', 'South Africa'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')]),$/;"	v	class:Migration
field	./silver/migrations/0035_auto_20170206_0941.py	/^            field=models.DecimalField(help_text=b'Currency exchange rate from document currency to transaction_currency.', null=True, max_digits=16, decimal_places=4, blank=True),$/;"	v	class:Migration
field	./silver/migrations/0037_auto_20170719_1159.py	/^            field=annoying.fields.JSONField(blank=True, default=dict, null=True),$/;"	v	class:Migration
field	./silver/migrations/0037_auto_20170719_1159.py	/^            field=annoying.fields.JSONField(blank=True, default={}, null=True),$/;"	v	class:Migration
field	./silver/migrations/0037_auto_20170719_1159.py	/^            field=annoying.fields.JSONField(blank=True, null=True),$/;"	v	class:Migration
field	./silver/migrations/0037_auto_20170719_1159.py	/^            field=models.CharField(blank=True, choices=[('AED', 'AED (UAE Dirham)'), ('AFN', 'AFN (Afghani)'), ('ALL', 'ALL (Lek)'), ('AMD', 'AMD (Armenian Dram)'), ('ANG', 'ANG (Netherlands Antillean Guilder)'), ('AOA', 'AOA (Kwanza)'), ('ARS', 'ARS (Argentine Peso)'), ('AUD', 'AUD (Australian Dollar)'), ('AWG', 'AWG (Aruban Florin)'), ('AZN', 'AZN (Azerbaijanian Manat)'), ('BAM', 'BAM (Convertible Mark)'), ('BBD', 'BBD (Barbados Dollar)'), ('BDT', 'BDT (Taka)'), ('BGN', 'BGN (Bulgarian Lev)'), ('BHD', 'BHD (Bahraini Dinar)'), ('BIF', 'BIF (Burundi Franc)'), ('BMD', 'BMD (Bermudian Dollar)'), ('BND', 'BND (Brunei Dollar)'), ('BOB', 'BOB (Boliviano)'), ('BRL', 'BRL (Brazilian Real)'), ('BSD', 'BSD (Bahamian Dollar)'), ('BTN', 'BTN (Ngultrum)'), ('BWP', 'BWP (Pula)'), ('BYN', 'BYN (Belarusian Ruble)'), ('BZD', 'BZD (Belize Dollar)'), ('CAD', 'CAD (Canadian Dollar)'), ('CDF', 'CDF (Congolese Franc)'), ('CHF', 'CHF (Swiss Franc)'), ('CLP', 'CLP (Chilean Peso)'), ('CNY', 'CNY (Yuan Renminbi)'), ('COP', 'COP (Colombian Peso)'), ('CRC', 'CRC (Costa Rican Colon)'), ('CUC', 'CUC (Peso Convertible)'), ('CUP', 'CUP (Cuban Peso)'), ('CVE', 'CVE (Cabo Verde Escudo)'), ('CZK', 'CZK (Czech Koruna)'), ('DJF', 'DJF (Djibouti Franc)'), ('DKK', 'DKK (Danish Krone)'), ('DOP', 'DOP (Dominican Peso)'), ('DZD', 'DZD (Algerian Dinar)'), ('EGP', 'EGP (Egyptian Pound)'), ('ERN', 'ERN (Nakfa)'), ('ETB', 'ETB (Ethiopian Birr)'), ('EUR', 'EUR (Euro)'), ('FJD', 'FJD (Fiji Dollar)'), ('FKP', 'FKP (Falkland Islands Pound)'), ('GBP', 'GBP (Pound Sterling)'), ('GEL', 'GEL (Lari)'), ('GHS', 'GHS (Ghana Cedi)'), ('GIP', 'GIP (Gibraltar Pound)'), ('GMD', 'GMD (Dalasi)'), ('GNF', 'GNF (Guinea Franc)'), ('GTQ', 'GTQ (Quetzal)'), ('GYD', 'GYD (Guyana Dollar)'), ('HKD', 'HKD (Hong Kong Dollar)'), ('HNL', 'HNL (Lempira)'), ('HRK', 'HRK (Kuna)'), ('HTG', 'HTG (Gourde)'), ('HUF', 'HUF (Forint)'), ('IDR', 'IDR (Rupiah)'), ('ILS', 'ILS (New Israeli Sheqel)'), ('INR', 'INR (Indian Rupee)'), ('IQD', 'IQD (Iraqi Dinar)'), ('IRR', 'IRR (Iranian Rial)'), ('ISK', 'ISK (Iceland Krona)'), ('JMD', 'JMD (Jamaican Dollar)'), ('JOD', 'JOD (Jordanian Dinar)'), ('JPY', 'JPY (Yen)'), ('KES', 'KES (Kenyan Shilling)'), ('KGS', 'KGS (Som)'), ('KHR', 'KHR (Riel)'), ('KMF', 'KMF (Comoro Franc)'), ('KPW', 'KPW (North Korean Won)'), ('KRW', 'KRW (Won)'), ('KWD', 'KWD (Kuwaiti Dinar)'), ('KYD', 'KYD (Cayman Islands Dollar)'), ('KZT', 'KZT (Tenge)'), ('LAK', 'LAK (Kip)'), ('LBP', 'LBP (Lebanese Pound)'), ('LKR', 'LKR (Sri Lanka Rupee)'), ('LRD', 'LRD (Liberian Dollar)'), ('LSL', 'LSL (Loti)'), ('LYD', 'LYD (Libyan Dinar)'), ('MAD', 'MAD (Moroccan Dirham)'), ('MDL', 'MDL (Moldovan Leu)'), ('MGA', 'MGA (Malagasy Ariary)'), ('MKD', 'MKD (Denar)'), ('MMK', 'MMK (Kyat)'), ('MNT', 'MNT (Tugrik)'), ('MOP', 'MOP (Pataca)'), ('MRO', 'MRO (Ouguiya)'), ('MUR', 'MUR (Mauritius Rupee)'), ('MVR', 'MVR (Rufiyaa)'), ('MWK', 'MWK (Malawi Kwacha)'), ('MXN', 'MXN (Mexican Peso)'), ('MYR', 'MYR (Malaysian Ringgit)'), ('MZN', 'MZN (Mozambique Metical)'), ('NAD', 'NAD (Namibia Dollar)'), ('NGN', 'NGN (Naira)'), ('NIO', 'NIO (Cordoba Oro)'), ('NOK', 'NOK (Norwegian Krone)'), ('NPR', 'NPR (Nepalese Rupee)'), ('NZD', 'NZD (New Zealand Dollar)'), ('OMR', 'OMR (Rial Omani)'), ('PAB', 'PAB (Balboa)'), ('PEN', 'PEN (Sol)'), ('PGK', 'PGK (Kina)'), ('PHP', 'PHP (Philippine Peso)'), ('PKR', 'PKR (Pakistan Rupee)'), ('PLN', 'PLN (Zloty)'), ('PYG', 'PYG (Guarani)'), ('QAR', 'QAR (Qatari Rial)'), ('RON', 'RON (Romanian Leu)'), ('RSD', 'RSD (Serbian Dinar)'), ('RUB', 'RUB (Russian Ruble)'), ('RWF', 'RWF (Rwanda Franc)'), ('SAR', 'SAR (Saudi Riyal)'), ('SBD', 'SBD (Solomon Islands Dollar)'), ('SCR', 'SCR (Seychelles Rupee)'), ('SDG', 'SDG (Sudanese Pound)'), ('SEK', 'SEK (Swedish Krona)'), ('SGD', 'SGD (Singapore Dollar)'), ('SHP', 'SHP (Saint Helena Pound)'), ('SLL', 'SLL (Leone)'), ('SOS', 'SOS (Somali Shilling)'), ('SRD', 'SRD (Surinam Dollar)'), ('SSP', 'SSP (South Sudanese Pound)'), ('STD', 'STD (Dobra)'), ('SVC', 'SVC (El Salvador Colon)'), ('SYP', 'SYP (Syrian Pound)'), ('SZL', 'SZL (Lilangeni)'), ('THB', 'THB (Baht)'), ('TJS', 'TJS (Somoni)'), ('TMT', 'TMT (Turkmenistan New Manat)'), ('TND', 'TND (Tunisian Dinar)'), ('TOP', 'TOP (Pa\\u2019anga)'), ('TRY', 'TRY (Turkish Lira)'), ('TTD', 'TTD (Trinidad and Tobago Dollar)'), ('TWD', 'TWD (New Taiwan Dollar)'), ('TZS', 'TZS (Tanzanian Shilling)'), ('UAH', 'UAH (Hryvnia)'), ('UGX', 'UGX (Uganda Shilling)'), ('USD', 'USD (US Dollar)'), ('UYU', 'UYU (Peso Uruguayo)'), ('UZS', 'UZS (Uzbekistan Sum)'), ('VEF', 'VEF (Bol\\xedvar)'), ('VND', 'VND (Dong)'), ('VUV', 'VUV (Vatu)'), ('WST', 'WST (Tala)'), ('XAF', 'XAF (CFA Franc BEAC)'), ('XAG', 'XAG (Silver)'), ('XAU', 'XAU (Gold)'), ('XBA', 'XBA (Bond Markets Unit European Composite Unit (EURCO))'), ('XBB', 'XBB (Bond Markets Unit European Monetary Unit (E.M.U.-6))'), ('XBC', 'XBC (Bond Markets Unit European Unit of Account 9 (E.U.A.-9))'), ('XBD', 'XBD (Bond Markets Unit European Unit of Account 17 (E.U.A.-17))'), ('XCD', 'XCD (East Caribbean Dollar)'), ('XDR', 'XDR (SDR (Special Drawing Right))'), ('XOF', 'XOF (CFA Franc BCEAO)'), ('XPD', 'XPD (Palladium)'), ('XPF', 'XPF (CFP Franc)'), ('XPT', 'XPT (Platinum)'), ('XSU', 'XSU (Sucre)'), ('XTS', 'XTS (Codes specifically reserved for testing purposes)'), ('XUA', 'XUA (ADB Unit of Account)'), ('XXX', 'XXX (The codes assigned for transactions where no currency is involved)'), ('YER', 'YER (Yemeni Rial)'), ('ZAR', 'ZAR (Rand)'), ('ZMW', 'ZMW (Zambian Kwacha)'), ('ZWL', 'ZWL (Zimbabwe Dollar)')], help_text=b'Used to enforce a certain currency when making transactionsfor the customer.', max_length=4, null=True),$/;"	v	class:Migration
field	./silver/migrations/0037_auto_20170719_1159.py	/^            field=models.CharField(choices=[('AD', 'Andorra'), ('AE', 'United Arab Emirates'), ('AF', 'Afghanistan'), ('AG', 'Antigua and Barbuda'), ('AI', 'Anguilla'), ('AL', 'Albania'), ('AM', 'Armenia'), ('AO', 'Angola'), ('AQ', 'Antarctica'), ('AR', 'Argentina'), ('AS', 'American Samoa'), ('AT', 'Austria'), ('AU', 'Australia'), ('AW', 'Aruba'), ('AX', '\\xc5land Islands'), ('AZ', 'Azerbaijan'), ('BA', 'Bosnia and Herzegovina'), ('BB', 'Barbados'), ('BD', 'Bangladesh'), ('BE', 'Belgium'), ('BF', 'Burkina Faso'), ('BG', 'Bulgaria'), ('BH', 'Bahrain'), ('BI', 'Burundi'), ('BJ', 'Benin'), ('BL', 'Saint Barth\\xe9lemy'), ('BM', 'Bermuda'), ('BN', 'Brunei Darussalam'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BR', 'Brazil'), ('BS', 'Bahamas'), ('BT', 'Bhutan'), ('BV', 'Bouvet Island'), ('BW', 'Botswana'), ('BY', 'Belarus'), ('BZ', 'Belize'), ('CA', 'Canada'), ('CC', 'Cocos (Keeling) Islands'), ('CD', 'Congo, The Democratic Republic of the'), ('CF', 'Central African Republic'), ('CG', 'Congo'), ('CH', 'Switzerland'), ('CI', "C\\xf4te d'Ivoire"), ('CK', 'Cook Islands'), ('CL', 'Chile'), ('CM', 'Cameroon'), ('CN', 'China'), ('CO', 'Colombia'), ('CR', 'Costa Rica'), ('CU', 'Cuba'), ('CV', 'Cabo Verde'), ('CW', 'Cura\\xe7ao'), ('CX', 'Christmas Island'), ('CY', 'Cyprus'), ('CZ', 'Czechia'), ('DE', 'Germany'), ('DJ', 'Djibouti'), ('DK', 'Denmark'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('DZ', 'Algeria'), ('EC', 'Ecuador'), ('EE', 'Estonia'), ('EG', 'Egypt'), ('EH', 'Western Sahara'), ('ER', 'Eritrea'), ('ES', 'Spain'), ('ET', 'Ethiopia'), ('FI', 'Finland'), ('FJ', 'Fiji'), ('FK', 'Falkland Islands (Malvinas)'), ('FM', 'Micronesia, Federated States of'), ('FO', 'Faroe Islands'), ('FR', 'France'), ('GA', 'Gabon'), ('GB', 'United Kingdom'), ('GD', 'Grenada'), ('GE', 'Georgia'), ('GF', 'French Guiana'), ('GG', 'Guernsey'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GL', 'Greenland'), ('GM', 'Gambia'), ('GN', 'Guinea'), ('GP', 'Guadeloupe'), ('GQ', 'Equatorial Guinea'), ('GR', 'Greece'), ('GS', 'South Georgia and the South Sandwich Islands'), ('GT', 'Guatemala'), ('GU', 'Guam'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HK', 'Hong Kong'), ('HM', 'Heard Island and McDonald Islands'), ('HN', 'Honduras'), ('HR', 'Croatia'), ('HT', 'Haiti'), ('HU', 'Hungary'), ('ID', 'Indonesia'), ('IE', 'Ireland'), ('IL', 'Israel'), ('IM', 'Isle of Man'), ('IN', 'India'), ('IO', 'British Indian Ocean Territory'), ('IQ', 'Iraq'), ('IR', 'Iran, Islamic Republic of'), ('IS', 'Iceland'), ('IT', 'Italy'), ('JE', 'Jersey'), ('JM', 'Jamaica'), ('JO', 'Jordan'), ('JP', 'Japan'), ('KE', 'Kenya'), ('KG', 'Kyrgyzstan'), ('KH', 'Cambodia'), ('KI', 'Kiribati'), ('KM', 'Comoros'), ('KN', 'Saint Kitts and Nevis'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KY', 'Cayman Islands'), ('KZ', 'Kazakhstan'), ('LA', "Lao People's Democratic Republic"), ('LB', 'Lebanon'), ('LC', 'Saint Lucia'), ('LI', 'Liechtenstein'), ('LK', 'Sri Lanka'), ('LR', 'Liberia'), ('LS', 'Lesotho'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('LV', 'Latvia'), ('LY', 'Libya'), ('MA', 'Morocco'), ('MC', 'Monaco'), ('MD', 'Moldova, Republic of'), ('ME', 'Montenegro'), ('MF', 'Saint Martin (French part)'), ('MG', 'Madagascar'), ('MH', 'Marshall Islands'), ('MK', 'Macedonia, Republic of'), ('ML', 'Mali'), ('MM', 'Myanmar'), ('MN', 'Mongolia'), ('MO', 'Macao'), ('MP', 'Northern Mariana Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MS', 'Montserrat'), ('MT', 'Malta'), ('MU', 'Mauritius'), ('MV', 'Maldives'), ('MW', 'Malawi'), ('MX', 'Mexico'), ('MY', 'Malaysia'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('NC', 'New Caledonia'), ('NE', 'Niger'), ('NF', 'Norfolk Island'), ('NG', 'Nigeria'), ('NI', 'Nicaragua'), ('NL', 'Netherlands'), ('NO', 'Norway'), ('NP', 'Nepal'), ('NR', 'Nauru'), ('NU', 'Niue'), ('NZ', 'New Zealand'), ('OM', 'Oman'), ('PA', 'Panama'), ('PE', 'Peru'), ('PF', 'French Polynesia'), ('PG', 'Papua New Guinea'), ('PH', 'Philippines'), ('PK', 'Pakistan'), ('PL', 'Poland'), ('PM', 'Saint Pierre and Miquelon'), ('PN', 'Pitcairn'), ('PR', 'Puerto Rico'), ('PS', 'Palestine, State of'), ('PT', 'Portugal'), ('PW', 'Palau'), ('PY', 'Paraguay'), ('QA', 'Qatar'), ('RE', 'R\\xe9union'), ('RO', 'Romania'), ('RS', 'Serbia'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('SA', 'Saudi Arabia'), ('SB', 'Solomon Islands'), ('SC', 'Seychelles'), ('SD', 'Sudan'), ('SE', 'Sweden'), ('SG', 'Singapore'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('SI', 'Slovenia'), ('SJ', 'Svalbard and Jan Mayen'), ('SK', 'Slovakia'), ('SL', 'Sierra Leone'), ('SM', 'San Marino'), ('SN', 'Senegal'), ('SO', 'Somalia'), ('SR', 'Suriname'), ('SS', 'South Sudan'), ('ST', 'Sao Tome and Principe'), ('SV', 'El Salvador'), ('SX', 'Sint Maarten (Dutch part)'), ('SY', 'Syrian Arab Republic'), ('SZ', 'Swaziland'), ('TC', 'Turks and Caicos Islands'), ('TD', 'Chad'), ('TF', 'French Southern Territories'), ('TG', 'Togo'), ('TH', 'Thailand'), ('TJ', 'Tajikistan'), ('TK', 'Tokelau'), ('TL', 'Timor-Leste'), ('TM', 'Turkmenistan'), ('TN', 'Tunisia'), ('TO', 'Tonga'), ('TR', 'Turkey'), ('TT', 'Trinidad and Tobago'), ('TV', 'Tuvalu'), ('TW', 'Taiwan, Province of China'), ('TZ', 'Tanzania, United Republic of'), ('UA', 'Ukraine'), ('UG', 'Uganda'), ('UM', 'United States Minor Outlying Islands'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VA', 'Holy See (Vatican City State)'), ('VC', 'Saint Vincent and the Grenadines'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('VN', 'Viet Nam'), ('VU', 'Vanuatu'), ('WF', 'Wallis and Futuna'), ('WS', 'Samoa'), ('YE', 'Yemen'), ('YT', 'Mayotte'), ('ZA', 'South Africa'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], max_length=3),$/;"	v	class:Migration
field	./silver/migrations/0037_auto_20170719_1159.py	/^            field=models.CharField(choices=[('AED', 'AED (UAE Dirham)'), ('AFN', 'AFN (Afghani)'), ('ALL', 'ALL (Lek)'), ('AMD', 'AMD (Armenian Dram)'), ('ANG', 'ANG (Netherlands Antillean Guilder)'), ('AOA', 'AOA (Kwanza)'), ('ARS', 'ARS (Argentine Peso)'), ('AUD', 'AUD (Australian Dollar)'), ('AWG', 'AWG (Aruban Florin)'), ('AZN', 'AZN (Azerbaijanian Manat)'), ('BAM', 'BAM (Convertible Mark)'), ('BBD', 'BBD (Barbados Dollar)'), ('BDT', 'BDT (Taka)'), ('BGN', 'BGN (Bulgarian Lev)'), ('BHD', 'BHD (Bahraini Dinar)'), ('BIF', 'BIF (Burundi Franc)'), ('BMD', 'BMD (Bermudian Dollar)'), ('BND', 'BND (Brunei Dollar)'), ('BOB', 'BOB (Boliviano)'), ('BRL', 'BRL (Brazilian Real)'), ('BSD', 'BSD (Bahamian Dollar)'), ('BTN', 'BTN (Ngultrum)'), ('BWP', 'BWP (Pula)'), ('BYN', 'BYN (Belarusian Ruble)'), ('BZD', 'BZD (Belize Dollar)'), ('CAD', 'CAD (Canadian Dollar)'), ('CDF', 'CDF (Congolese Franc)'), ('CHF', 'CHF (Swiss Franc)'), ('CLP', 'CLP (Chilean Peso)'), ('CNY', 'CNY (Yuan Renminbi)'), ('COP', 'COP (Colombian Peso)'), ('CRC', 'CRC (Costa Rican Colon)'), ('CUC', 'CUC (Peso Convertible)'), ('CUP', 'CUP (Cuban Peso)'), ('CVE', 'CVE (Cabo Verde Escudo)'), ('CZK', 'CZK (Czech Koruna)'), ('DJF', 'DJF (Djibouti Franc)'), ('DKK', 'DKK (Danish Krone)'), ('DOP', 'DOP (Dominican Peso)'), ('DZD', 'DZD (Algerian Dinar)'), ('EGP', 'EGP (Egyptian Pound)'), ('ERN', 'ERN (Nakfa)'), ('ETB', 'ETB (Ethiopian Birr)'), ('EUR', 'EUR (Euro)'), ('FJD', 'FJD (Fiji Dollar)'), ('FKP', 'FKP (Falkland Islands Pound)'), ('GBP', 'GBP (Pound Sterling)'), ('GEL', 'GEL (Lari)'), ('GHS', 'GHS (Ghana Cedi)'), ('GIP', 'GIP (Gibraltar Pound)'), ('GMD', 'GMD (Dalasi)'), ('GNF', 'GNF (Guinea Franc)'), ('GTQ', 'GTQ (Quetzal)'), ('GYD', 'GYD (Guyana Dollar)'), ('HKD', 'HKD (Hong Kong Dollar)'), ('HNL', 'HNL (Lempira)'), ('HRK', 'HRK (Kuna)'), ('HTG', 'HTG (Gourde)'), ('HUF', 'HUF (Forint)'), ('IDR', 'IDR (Rupiah)'), ('ILS', 'ILS (New Israeli Sheqel)'), ('INR', 'INR (Indian Rupee)'), ('IQD', 'IQD (Iraqi Dinar)'), ('IRR', 'IRR (Iranian Rial)'), ('ISK', 'ISK (Iceland Krona)'), ('JMD', 'JMD (Jamaican Dollar)'), ('JOD', 'JOD (Jordanian Dinar)'), ('JPY', 'JPY (Yen)'), ('KES', 'KES (Kenyan Shilling)'), ('KGS', 'KGS (Som)'), ('KHR', 'KHR (Riel)'), ('KMF', 'KMF (Comoro Franc)'), ('KPW', 'KPW (North Korean Won)'), ('KRW', 'KRW (Won)'), ('KWD', 'KWD (Kuwaiti Dinar)'), ('KYD', 'KYD (Cayman Islands Dollar)'), ('KZT', 'KZT (Tenge)'), ('LAK', 'LAK (Kip)'), ('LBP', 'LBP (Lebanese Pound)'), ('LKR', 'LKR (Sri Lanka Rupee)'), ('LRD', 'LRD (Liberian Dollar)'), ('LSL', 'LSL (Loti)'), ('LYD', 'LYD (Libyan Dinar)'), ('MAD', 'MAD (Moroccan Dirham)'), ('MDL', 'MDL (Moldovan Leu)'), ('MGA', 'MGA (Malagasy Ariary)'), ('MKD', 'MKD (Denar)'), ('MMK', 'MMK (Kyat)'), ('MNT', 'MNT (Tugrik)'), ('MOP', 'MOP (Pataca)'), ('MRO', 'MRO (Ouguiya)'), ('MUR', 'MUR (Mauritius Rupee)'), ('MVR', 'MVR (Rufiyaa)'), ('MWK', 'MWK (Malawi Kwacha)'), ('MXN', 'MXN (Mexican Peso)'), ('MYR', 'MYR (Malaysian Ringgit)'), ('MZN', 'MZN (Mozambique Metical)'), ('NAD', 'NAD (Namibia Dollar)'), ('NGN', 'NGN (Naira)'), ('NIO', 'NIO (Cordoba Oro)'), ('NOK', 'NOK (Norwegian Krone)'), ('NPR', 'NPR (Nepalese Rupee)'), ('NZD', 'NZD (New Zealand Dollar)'), ('OMR', 'OMR (Rial Omani)'), ('PAB', 'PAB (Balboa)'), ('PEN', 'PEN (Sol)'), ('PGK', 'PGK (Kina)'), ('PHP', 'PHP (Philippine Peso)'), ('PKR', 'PKR (Pakistan Rupee)'), ('PLN', 'PLN (Zloty)'), ('PYG', 'PYG (Guarani)'), ('QAR', 'QAR (Qatari Rial)'), ('RON', 'RON (Romanian Leu)'), ('RSD', 'RSD (Serbian Dinar)'), ('RUB', 'RUB (Russian Ruble)'), ('RWF', 'RWF (Rwanda Franc)'), ('SAR', 'SAR (Saudi Riyal)'), ('SBD', 'SBD (Solomon Islands Dollar)'), ('SCR', 'SCR (Seychelles Rupee)'), ('SDG', 'SDG (Sudanese Pound)'), ('SEK', 'SEK (Swedish Krona)'), ('SGD', 'SGD (Singapore Dollar)'), ('SHP', 'SHP (Saint Helena Pound)'), ('SLL', 'SLL (Leone)'), ('SOS', 'SOS (Somali Shilling)'), ('SRD', 'SRD (Surinam Dollar)'), ('SSP', 'SSP (South Sudanese Pound)'), ('STD', 'STD (Dobra)'), ('SVC', 'SVC (El Salvador Colon)'), ('SYP', 'SYP (Syrian Pound)'), ('SZL', 'SZL (Lilangeni)'), ('THB', 'THB (Baht)'), ('TJS', 'TJS (Somoni)'), ('TMT', 'TMT (Turkmenistan New Manat)'), ('TND', 'TND (Tunisian Dinar)'), ('TOP', 'TOP (Pa\\u2019anga)'), ('TRY', 'TRY (Turkish Lira)'), ('TTD', 'TTD (Trinidad and Tobago Dollar)'), ('TWD', 'TWD (New Taiwan Dollar)'), ('TZS', 'TZS (Tanzanian Shilling)'), ('UAH', 'UAH (Hryvnia)'), ('UGX', 'UGX (Uganda Shilling)'), ('USD', 'USD (US Dollar)'), ('UYU', 'UYU (Peso Uruguayo)'), ('UZS', 'UZS (Uzbekistan Sum)'), ('VEF', 'VEF (Bol\\xedvar)'), ('VND', 'VND (Dong)'), ('VUV', 'VUV (Vatu)'), ('WST', 'WST (Tala)'), ('XAF', 'XAF (CFA Franc BEAC)'), ('XAG', 'XAG (Silver)'), ('XAU', 'XAU (Gold)'), ('XBA', 'XBA (Bond Markets Unit European Composite Unit (EURCO))'), ('XBB', 'XBB (Bond Markets Unit European Monetary Unit (E.M.U.-6))'), ('XBC', 'XBC (Bond Markets Unit European Unit of Account 9 (E.U.A.-9))'), ('XBD', 'XBD (Bond Markets Unit European Unit of Account 17 (E.U.A.-17))'), ('XCD', 'XCD (East Caribbean Dollar)'), ('XDR', 'XDR (SDR (Special Drawing Right))'), ('XOF', 'XOF (CFA Franc BCEAO)'), ('XPD', 'XPD (Palladium)'), ('XPF', 'XPF (CFP Franc)'), ('XPT', 'XPT (Platinum)'), ('XSU', 'XSU (Sucre)'), ('XTS', 'XTS (Codes specifically reserved for testing purposes)'), ('XUA', 'XUA (ADB Unit of Account)'), ('XXX', 'XXX (The codes assigned for transactions where no currency is involved)'), ('YER', 'YER (Yemeni Rial)'), ('ZAR', 'ZAR (Rand)'), ('ZMW', 'ZMW (Zambian Kwacha)'), ('ZWL', 'ZWL (Zimbabwe Dollar)')], default=b'USD', help_text=b'The currency in which the subscription will be charged.', max_length=4),$/;"	v	class:Migration
field	./silver/migrations/0037_auto_20170719_1159.py	/^            field=models.CharField(choices=[('AED', 'AED (UAE Dirham)'), ('AFN', 'AFN (Afghani)'), ('ALL', 'ALL (Lek)'), ('AMD', 'AMD (Armenian Dram)'), ('ANG', 'ANG (Netherlands Antillean Guilder)'), ('AOA', 'AOA (Kwanza)'), ('ARS', 'ARS (Argentine Peso)'), ('AUD', 'AUD (Australian Dollar)'), ('AWG', 'AWG (Aruban Florin)'), ('AZN', 'AZN (Azerbaijanian Manat)'), ('BAM', 'BAM (Convertible Mark)'), ('BBD', 'BBD (Barbados Dollar)'), ('BDT', 'BDT (Taka)'), ('BGN', 'BGN (Bulgarian Lev)'), ('BHD', 'BHD (Bahraini Dinar)'), ('BIF', 'BIF (Burundi Franc)'), ('BMD', 'BMD (Bermudian Dollar)'), ('BND', 'BND (Brunei Dollar)'), ('BOB', 'BOB (Boliviano)'), ('BRL', 'BRL (Brazilian Real)'), ('BSD', 'BSD (Bahamian Dollar)'), ('BTN', 'BTN (Ngultrum)'), ('BWP', 'BWP (Pula)'), ('BYN', 'BYN (Belarusian Ruble)'), ('BZD', 'BZD (Belize Dollar)'), ('CAD', 'CAD (Canadian Dollar)'), ('CDF', 'CDF (Congolese Franc)'), ('CHF', 'CHF (Swiss Franc)'), ('CLP', 'CLP (Chilean Peso)'), ('CNY', 'CNY (Yuan Renminbi)'), ('COP', 'COP (Colombian Peso)'), ('CRC', 'CRC (Costa Rican Colon)'), ('CUC', 'CUC (Peso Convertible)'), ('CUP', 'CUP (Cuban Peso)'), ('CVE', 'CVE (Cabo Verde Escudo)'), ('CZK', 'CZK (Czech Koruna)'), ('DJF', 'DJF (Djibouti Franc)'), ('DKK', 'DKK (Danish Krone)'), ('DOP', 'DOP (Dominican Peso)'), ('DZD', 'DZD (Algerian Dinar)'), ('EGP', 'EGP (Egyptian Pound)'), ('ERN', 'ERN (Nakfa)'), ('ETB', 'ETB (Ethiopian Birr)'), ('EUR', 'EUR (Euro)'), ('FJD', 'FJD (Fiji Dollar)'), ('FKP', 'FKP (Falkland Islands Pound)'), ('GBP', 'GBP (Pound Sterling)'), ('GEL', 'GEL (Lari)'), ('GHS', 'GHS (Ghana Cedi)'), ('GIP', 'GIP (Gibraltar Pound)'), ('GMD', 'GMD (Dalasi)'), ('GNF', 'GNF (Guinea Franc)'), ('GTQ', 'GTQ (Quetzal)'), ('GYD', 'GYD (Guyana Dollar)'), ('HKD', 'HKD (Hong Kong Dollar)'), ('HNL', 'HNL (Lempira)'), ('HRK', 'HRK (Kuna)'), ('HTG', 'HTG (Gourde)'), ('HUF', 'HUF (Forint)'), ('IDR', 'IDR (Rupiah)'), ('ILS', 'ILS (New Israeli Sheqel)'), ('INR', 'INR (Indian Rupee)'), ('IQD', 'IQD (Iraqi Dinar)'), ('IRR', 'IRR (Iranian Rial)'), ('ISK', 'ISK (Iceland Krona)'), ('JMD', 'JMD (Jamaican Dollar)'), ('JOD', 'JOD (Jordanian Dinar)'), ('JPY', 'JPY (Yen)'), ('KES', 'KES (Kenyan Shilling)'), ('KGS', 'KGS (Som)'), ('KHR', 'KHR (Riel)'), ('KMF', 'KMF (Comoro Franc)'), ('KPW', 'KPW (North Korean Won)'), ('KRW', 'KRW (Won)'), ('KWD', 'KWD (Kuwaiti Dinar)'), ('KYD', 'KYD (Cayman Islands Dollar)'), ('KZT', 'KZT (Tenge)'), ('LAK', 'LAK (Kip)'), ('LBP', 'LBP (Lebanese Pound)'), ('LKR', 'LKR (Sri Lanka Rupee)'), ('LRD', 'LRD (Liberian Dollar)'), ('LSL', 'LSL (Loti)'), ('LYD', 'LYD (Libyan Dinar)'), ('MAD', 'MAD (Moroccan Dirham)'), ('MDL', 'MDL (Moldovan Leu)'), ('MGA', 'MGA (Malagasy Ariary)'), ('MKD', 'MKD (Denar)'), ('MMK', 'MMK (Kyat)'), ('MNT', 'MNT (Tugrik)'), ('MOP', 'MOP (Pataca)'), ('MRO', 'MRO (Ouguiya)'), ('MUR', 'MUR (Mauritius Rupee)'), ('MVR', 'MVR (Rufiyaa)'), ('MWK', 'MWK (Malawi Kwacha)'), ('MXN', 'MXN (Mexican Peso)'), ('MYR', 'MYR (Malaysian Ringgit)'), ('MZN', 'MZN (Mozambique Metical)'), ('NAD', 'NAD (Namibia Dollar)'), ('NGN', 'NGN (Naira)'), ('NIO', 'NIO (Cordoba Oro)'), ('NOK', 'NOK (Norwegian Krone)'), ('NPR', 'NPR (Nepalese Rupee)'), ('NZD', 'NZD (New Zealand Dollar)'), ('OMR', 'OMR (Rial Omani)'), ('PAB', 'PAB (Balboa)'), ('PEN', 'PEN (Sol)'), ('PGK', 'PGK (Kina)'), ('PHP', 'PHP (Philippine Peso)'), ('PKR', 'PKR (Pakistan Rupee)'), ('PLN', 'PLN (Zloty)'), ('PYG', 'PYG (Guarani)'), ('QAR', 'QAR (Qatari Rial)'), ('RON', 'RON (Romanian Leu)'), ('RSD', 'RSD (Serbian Dinar)'), ('RUB', 'RUB (Russian Ruble)'), ('RWF', 'RWF (Rwanda Franc)'), ('SAR', 'SAR (Saudi Riyal)'), ('SBD', 'SBD (Solomon Islands Dollar)'), ('SCR', 'SCR (Seychelles Rupee)'), ('SDG', 'SDG (Sudanese Pound)'), ('SEK', 'SEK (Swedish Krona)'), ('SGD', 'SGD (Singapore Dollar)'), ('SHP', 'SHP (Saint Helena Pound)'), ('SLL', 'SLL (Leone)'), ('SOS', 'SOS (Somali Shilling)'), ('SRD', 'SRD (Surinam Dollar)'), ('SSP', 'SSP (South Sudanese Pound)'), ('STD', 'STD (Dobra)'), ('SVC', 'SVC (El Salvador Colon)'), ('SYP', 'SYP (Syrian Pound)'), ('SZL', 'SZL (Lilangeni)'), ('THB', 'THB (Baht)'), ('TJS', 'TJS (Somoni)'), ('TMT', 'TMT (Turkmenistan New Manat)'), ('TND', 'TND (Tunisian Dinar)'), ('TOP', 'TOP (Pa\\u2019anga)'), ('TRY', 'TRY (Turkish Lira)'), ('TTD', 'TTD (Trinidad and Tobago Dollar)'), ('TWD', 'TWD (New Taiwan Dollar)'), ('TZS', 'TZS (Tanzanian Shilling)'), ('UAH', 'UAH (Hryvnia)'), ('UGX', 'UGX (Uganda Shilling)'), ('USD', 'USD (US Dollar)'), ('UYU', 'UYU (Peso Uruguayo)'), ('UZS', 'UZS (Uzbekistan Sum)'), ('VEF', 'VEF (Bol\\xedvar)'), ('VND', 'VND (Dong)'), ('VUV', 'VUV (Vatu)'), ('WST', 'WST (Tala)'), ('XAF', 'XAF (CFA Franc BEAC)'), ('XAG', 'XAG (Silver)'), ('XAU', 'XAU (Gold)'), ('XBA', 'XBA (Bond Markets Unit European Composite Unit (EURCO))'), ('XBB', 'XBB (Bond Markets Unit European Monetary Unit (E.M.U.-6))'), ('XBC', 'XBC (Bond Markets Unit European Unit of Account 9 (E.U.A.-9))'), ('XBD', 'XBD (Bond Markets Unit European Unit of Account 17 (E.U.A.-17))'), ('XCD', 'XCD (East Caribbean Dollar)'), ('XDR', 'XDR (SDR (Special Drawing Right))'), ('XOF', 'XOF (CFA Franc BCEAO)'), ('XPD', 'XPD (Palladium)'), ('XPF', 'XPF (CFP Franc)'), ('XPT', 'XPT (Platinum)'), ('XSU', 'XSU (Sucre)'), ('XTS', 'XTS (Codes specifically reserved for testing purposes)'), ('XUA', 'XUA (ADB Unit of Account)'), ('XXX', 'XXX (The codes assigned for transactions where no currency is involved)'), ('YER', 'YER (Yemeni Rial)'), ('ZAR', 'ZAR (Rand)'), ('ZMW', 'ZMW (Zambian Kwacha)'), ('ZWL', 'ZWL (Zimbabwe Dollar)')], default=b'USD', help_text=b'The currency used for billing.', max_length=4),$/;"	v	class:Migration
field	./silver/migrations/0037_auto_20170719_1159.py	/^            field=models.CharField(choices=[('AED', 'AED (UAE Dirham)'), ('AFN', 'AFN (Afghani)'), ('ALL', 'ALL (Lek)'), ('AMD', 'AMD (Armenian Dram)'), ('ANG', 'ANG (Netherlands Antillean Guilder)'), ('AOA', 'AOA (Kwanza)'), ('ARS', 'ARS (Argentine Peso)'), ('AUD', 'AUD (Australian Dollar)'), ('AWG', 'AWG (Aruban Florin)'), ('AZN', 'AZN (Azerbaijanian Manat)'), ('BAM', 'BAM (Convertible Mark)'), ('BBD', 'BBD (Barbados Dollar)'), ('BDT', 'BDT (Taka)'), ('BGN', 'BGN (Bulgarian Lev)'), ('BHD', 'BHD (Bahraini Dinar)'), ('BIF', 'BIF (Burundi Franc)'), ('BMD', 'BMD (Bermudian Dollar)'), ('BND', 'BND (Brunei Dollar)'), ('BOB', 'BOB (Boliviano)'), ('BRL', 'BRL (Brazilian Real)'), ('BSD', 'BSD (Bahamian Dollar)'), ('BTN', 'BTN (Ngultrum)'), ('BWP', 'BWP (Pula)'), ('BYN', 'BYN (Belarusian Ruble)'), ('BZD', 'BZD (Belize Dollar)'), ('CAD', 'CAD (Canadian Dollar)'), ('CDF', 'CDF (Congolese Franc)'), ('CHF', 'CHF (Swiss Franc)'), ('CLP', 'CLP (Chilean Peso)'), ('CNY', 'CNY (Yuan Renminbi)'), ('COP', 'COP (Colombian Peso)'), ('CRC', 'CRC (Costa Rican Colon)'), ('CUC', 'CUC (Peso Convertible)'), ('CUP', 'CUP (Cuban Peso)'), ('CVE', 'CVE (Cabo Verde Escudo)'), ('CZK', 'CZK (Czech Koruna)'), ('DJF', 'DJF (Djibouti Franc)'), ('DKK', 'DKK (Danish Krone)'), ('DOP', 'DOP (Dominican Peso)'), ('DZD', 'DZD (Algerian Dinar)'), ('EGP', 'EGP (Egyptian Pound)'), ('ERN', 'ERN (Nakfa)'), ('ETB', 'ETB (Ethiopian Birr)'), ('EUR', 'EUR (Euro)'), ('FJD', 'FJD (Fiji Dollar)'), ('FKP', 'FKP (Falkland Islands Pound)'), ('GBP', 'GBP (Pound Sterling)'), ('GEL', 'GEL (Lari)'), ('GHS', 'GHS (Ghana Cedi)'), ('GIP', 'GIP (Gibraltar Pound)'), ('GMD', 'GMD (Dalasi)'), ('GNF', 'GNF (Guinea Franc)'), ('GTQ', 'GTQ (Quetzal)'), ('GYD', 'GYD (Guyana Dollar)'), ('HKD', 'HKD (Hong Kong Dollar)'), ('HNL', 'HNL (Lempira)'), ('HRK', 'HRK (Kuna)'), ('HTG', 'HTG (Gourde)'), ('HUF', 'HUF (Forint)'), ('IDR', 'IDR (Rupiah)'), ('ILS', 'ILS (New Israeli Sheqel)'), ('INR', 'INR (Indian Rupee)'), ('IQD', 'IQD (Iraqi Dinar)'), ('IRR', 'IRR (Iranian Rial)'), ('ISK', 'ISK (Iceland Krona)'), ('JMD', 'JMD (Jamaican Dollar)'), ('JOD', 'JOD (Jordanian Dinar)'), ('JPY', 'JPY (Yen)'), ('KES', 'KES (Kenyan Shilling)'), ('KGS', 'KGS (Som)'), ('KHR', 'KHR (Riel)'), ('KMF', 'KMF (Comoro Franc)'), ('KPW', 'KPW (North Korean Won)'), ('KRW', 'KRW (Won)'), ('KWD', 'KWD (Kuwaiti Dinar)'), ('KYD', 'KYD (Cayman Islands Dollar)'), ('KZT', 'KZT (Tenge)'), ('LAK', 'LAK (Kip)'), ('LBP', 'LBP (Lebanese Pound)'), ('LKR', 'LKR (Sri Lanka Rupee)'), ('LRD', 'LRD (Liberian Dollar)'), ('LSL', 'LSL (Loti)'), ('LYD', 'LYD (Libyan Dinar)'), ('MAD', 'MAD (Moroccan Dirham)'), ('MDL', 'MDL (Moldovan Leu)'), ('MGA', 'MGA (Malagasy Ariary)'), ('MKD', 'MKD (Denar)'), ('MMK', 'MMK (Kyat)'), ('MNT', 'MNT (Tugrik)'), ('MOP', 'MOP (Pataca)'), ('MRO', 'MRO (Ouguiya)'), ('MUR', 'MUR (Mauritius Rupee)'), ('MVR', 'MVR (Rufiyaa)'), ('MWK', 'MWK (Malawi Kwacha)'), ('MXN', 'MXN (Mexican Peso)'), ('MYR', 'MYR (Malaysian Ringgit)'), ('MZN', 'MZN (Mozambique Metical)'), ('NAD', 'NAD (Namibia Dollar)'), ('NGN', 'NGN (Naira)'), ('NIO', 'NIO (Cordoba Oro)'), ('NOK', 'NOK (Norwegian Krone)'), ('NPR', 'NPR (Nepalese Rupee)'), ('NZD', 'NZD (New Zealand Dollar)'), ('OMR', 'OMR (Rial Omani)'), ('PAB', 'PAB (Balboa)'), ('PEN', 'PEN (Sol)'), ('PGK', 'PGK (Kina)'), ('PHP', 'PHP (Philippine Peso)'), ('PKR', 'PKR (Pakistan Rupee)'), ('PLN', 'PLN (Zloty)'), ('PYG', 'PYG (Guarani)'), ('QAR', 'QAR (Qatari Rial)'), ('RON', 'RON (Romanian Leu)'), ('RSD', 'RSD (Serbian Dinar)'), ('RUB', 'RUB (Russian Ruble)'), ('RWF', 'RWF (Rwanda Franc)'), ('SAR', 'SAR (Saudi Riyal)'), ('SBD', 'SBD (Solomon Islands Dollar)'), ('SCR', 'SCR (Seychelles Rupee)'), ('SDG', 'SDG (Sudanese Pound)'), ('SEK', 'SEK (Swedish Krona)'), ('SGD', 'SGD (Singapore Dollar)'), ('SHP', 'SHP (Saint Helena Pound)'), ('SLL', 'SLL (Leone)'), ('SOS', 'SOS (Somali Shilling)'), ('SRD', 'SRD (Surinam Dollar)'), ('SSP', 'SSP (South Sudanese Pound)'), ('STD', 'STD (Dobra)'), ('SVC', 'SVC (El Salvador Colon)'), ('SYP', 'SYP (Syrian Pound)'), ('SZL', 'SZL (Lilangeni)'), ('THB', 'THB (Baht)'), ('TJS', 'TJS (Somoni)'), ('TMT', 'TMT (Turkmenistan New Manat)'), ('TND', 'TND (Tunisian Dinar)'), ('TOP', 'TOP (Pa\\u2019anga)'), ('TRY', 'TRY (Turkish Lira)'), ('TTD', 'TTD (Trinidad and Tobago Dollar)'), ('TWD', 'TWD (New Taiwan Dollar)'), ('TZS', 'TZS (Tanzanian Shilling)'), ('UAH', 'UAH (Hryvnia)'), ('UGX', 'UGX (Uganda Shilling)'), ('USD', 'USD (US Dollar)'), ('UYU', 'UYU (Peso Uruguayo)'), ('UZS', 'UZS (Uzbekistan Sum)'), ('VEF', 'VEF (Bol\\xedvar)'), ('VND', 'VND (Dong)'), ('VUV', 'VUV (Vatu)'), ('WST', 'WST (Tala)'), ('XAF', 'XAF (CFA Franc BEAC)'), ('XAG', 'XAG (Silver)'), ('XAU', 'XAU (Gold)'), ('XBA', 'XBA (Bond Markets Unit European Composite Unit (EURCO))'), ('XBB', 'XBB (Bond Markets Unit European Monetary Unit (E.M.U.-6))'), ('XBC', 'XBC (Bond Markets Unit European Unit of Account 9 (E.U.A.-9))'), ('XBD', 'XBD (Bond Markets Unit European Unit of Account 17 (E.U.A.-17))'), ('XCD', 'XCD (East Caribbean Dollar)'), ('XDR', 'XDR (SDR (Special Drawing Right))'), ('XOF', 'XOF (CFA Franc BCEAO)'), ('XPD', 'XPD (Palladium)'), ('XPF', 'XPF (CFP Franc)'), ('XPT', 'XPT (Platinum)'), ('XSU', 'XSU (Sucre)'), ('XTS', 'XTS (Codes specifically reserved for testing purposes)'), ('XUA', 'XUA (ADB Unit of Account)'), ('XXX', 'XXX (The codes assigned for transactions where no currency is involved)'), ('YER', 'YER (Yemeni Rial)'), ('ZAR', 'ZAR (Rand)'), ('ZMW', 'ZMW (Zambian Kwacha)'), ('ZWL', 'ZWL (Zimbabwe Dollar)')], help_text=b'The currency used for billing.', max_length=4),$/;"	v	class:Migration
field	./silver/migrations/0037_auto_20170719_1159.py	/^            field=models.CharField(choices=[('AED', 'AED (UAE Dirham)'), ('AFN', 'AFN (Afghani)'), ('ALL', 'ALL (Lek)'), ('AMD', 'AMD (Armenian Dram)'), ('ANG', 'ANG (Netherlands Antillean Guilder)'), ('AOA', 'AOA (Kwanza)'), ('ARS', 'ARS (Argentine Peso)'), ('AUD', 'AUD (Australian Dollar)'), ('AWG', 'AWG (Aruban Florin)'), ('AZN', 'AZN (Azerbaijanian Manat)'), ('BAM', 'BAM (Convertible Mark)'), ('BBD', 'BBD (Barbados Dollar)'), ('BDT', 'BDT (Taka)'), ('BGN', 'BGN (Bulgarian Lev)'), ('BHD', 'BHD (Bahraini Dinar)'), ('BIF', 'BIF (Burundi Franc)'), ('BMD', 'BMD (Bermudian Dollar)'), ('BND', 'BND (Brunei Dollar)'), ('BOB', 'BOB (Boliviano)'), ('BRL', 'BRL (Brazilian Real)'), ('BSD', 'BSD (Bahamian Dollar)'), ('BTN', 'BTN (Ngultrum)'), ('BWP', 'BWP (Pula)'), ('BYN', 'BYN (Belarusian Ruble)'), ('BZD', 'BZD (Belize Dollar)'), ('CAD', 'CAD (Canadian Dollar)'), ('CDF', 'CDF (Congolese Franc)'), ('CHF', 'CHF (Swiss Franc)'), ('CLP', 'CLP (Chilean Peso)'), ('CNY', 'CNY (Yuan Renminbi)'), ('COP', 'COP (Colombian Peso)'), ('CRC', 'CRC (Costa Rican Colon)'), ('CUC', 'CUC (Peso Convertible)'), ('CUP', 'CUP (Cuban Peso)'), ('CVE', 'CVE (Cabo Verde Escudo)'), ('CZK', 'CZK (Czech Koruna)'), ('DJF', 'DJF (Djibouti Franc)'), ('DKK', 'DKK (Danish Krone)'), ('DOP', 'DOP (Dominican Peso)'), ('DZD', 'DZD (Algerian Dinar)'), ('EGP', 'EGP (Egyptian Pound)'), ('ERN', 'ERN (Nakfa)'), ('ETB', 'ETB (Ethiopian Birr)'), ('EUR', 'EUR (Euro)'), ('FJD', 'FJD (Fiji Dollar)'), ('FKP', 'FKP (Falkland Islands Pound)'), ('GBP', 'GBP (Pound Sterling)'), ('GEL', 'GEL (Lari)'), ('GHS', 'GHS (Ghana Cedi)'), ('GIP', 'GIP (Gibraltar Pound)'), ('GMD', 'GMD (Dalasi)'), ('GNF', 'GNF (Guinea Franc)'), ('GTQ', 'GTQ (Quetzal)'), ('GYD', 'GYD (Guyana Dollar)'), ('HKD', 'HKD (Hong Kong Dollar)'), ('HNL', 'HNL (Lempira)'), ('HRK', 'HRK (Kuna)'), ('HTG', 'HTG (Gourde)'), ('HUF', 'HUF (Forint)'), ('IDR', 'IDR (Rupiah)'), ('ILS', 'ILS (New Israeli Sheqel)'), ('INR', 'INR (Indian Rupee)'), ('IQD', 'IQD (Iraqi Dinar)'), ('IRR', 'IRR (Iranian Rial)'), ('ISK', 'ISK (Iceland Krona)'), ('JMD', 'JMD (Jamaican Dollar)'), ('JOD', 'JOD (Jordanian Dinar)'), ('JPY', 'JPY (Yen)'), ('KES', 'KES (Kenyan Shilling)'), ('KGS', 'KGS (Som)'), ('KHR', 'KHR (Riel)'), ('KMF', 'KMF (Comoro Franc)'), ('KPW', 'KPW (North Korean Won)'), ('KRW', 'KRW (Won)'), ('KWD', 'KWD (Kuwaiti Dinar)'), ('KYD', 'KYD (Cayman Islands Dollar)'), ('KZT', 'KZT (Tenge)'), ('LAK', 'LAK (Kip)'), ('LBP', 'LBP (Lebanese Pound)'), ('LKR', 'LKR (Sri Lanka Rupee)'), ('LRD', 'LRD (Liberian Dollar)'), ('LSL', 'LSL (Loti)'), ('LYD', 'LYD (Libyan Dinar)'), ('MAD', 'MAD (Moroccan Dirham)'), ('MDL', 'MDL (Moldovan Leu)'), ('MGA', 'MGA (Malagasy Ariary)'), ('MKD', 'MKD (Denar)'), ('MMK', 'MMK (Kyat)'), ('MNT', 'MNT (Tugrik)'), ('MOP', 'MOP (Pataca)'), ('MRO', 'MRO (Ouguiya)'), ('MUR', 'MUR (Mauritius Rupee)'), ('MVR', 'MVR (Rufiyaa)'), ('MWK', 'MWK (Malawi Kwacha)'), ('MXN', 'MXN (Mexican Peso)'), ('MYR', 'MYR (Malaysian Ringgit)'), ('MZN', 'MZN (Mozambique Metical)'), ('NAD', 'NAD (Namibia Dollar)'), ('NGN', 'NGN (Naira)'), ('NIO', 'NIO (Cordoba Oro)'), ('NOK', 'NOK (Norwegian Krone)'), ('NPR', 'NPR (Nepalese Rupee)'), ('NZD', 'NZD (New Zealand Dollar)'), ('OMR', 'OMR (Rial Omani)'), ('PAB', 'PAB (Balboa)'), ('PEN', 'PEN (Sol)'), ('PGK', 'PGK (Kina)'), ('PHP', 'PHP (Philippine Peso)'), ('PKR', 'PKR (Pakistan Rupee)'), ('PLN', 'PLN (Zloty)'), ('PYG', 'PYG (Guarani)'), ('QAR', 'QAR (Qatari Rial)'), ('RON', 'RON (Romanian Leu)'), ('RSD', 'RSD (Serbian Dinar)'), ('RUB', 'RUB (Russian Ruble)'), ('RWF', 'RWF (Rwanda Franc)'), ('SAR', 'SAR (Saudi Riyal)'), ('SBD', 'SBD (Solomon Islands Dollar)'), ('SCR', 'SCR (Seychelles Rupee)'), ('SDG', 'SDG (Sudanese Pound)'), ('SEK', 'SEK (Swedish Krona)'), ('SGD', 'SGD (Singapore Dollar)'), ('SHP', 'SHP (Saint Helena Pound)'), ('SLL', 'SLL (Leone)'), ('SOS', 'SOS (Somali Shilling)'), ('SRD', 'SRD (Surinam Dollar)'), ('SSP', 'SSP (South Sudanese Pound)'), ('STD', 'STD (Dobra)'), ('SVC', 'SVC (El Salvador Colon)'), ('SYP', 'SYP (Syrian Pound)'), ('SZL', 'SZL (Lilangeni)'), ('THB', 'THB (Baht)'), ('TJS', 'TJS (Somoni)'), ('TMT', 'TMT (Turkmenistan New Manat)'), ('TND', 'TND (Tunisian Dinar)'), ('TOP', 'TOP (Pa\\u2019anga)'), ('TRY', 'TRY (Turkish Lira)'), ('TTD', 'TTD (Trinidad and Tobago Dollar)'), ('TWD', 'TWD (New Taiwan Dollar)'), ('TZS', 'TZS (Tanzanian Shilling)'), ('UAH', 'UAH (Hryvnia)'), ('UGX', 'UGX (Uganda Shilling)'), ('USD', 'USD (US Dollar)'), ('UYU', 'UYU (Peso Uruguayo)'), ('UZS', 'UZS (Uzbekistan Sum)'), ('VEF', 'VEF (Bol\\xedvar)'), ('VND', 'VND (Dong)'), ('VUV', 'VUV (Vatu)'), ('WST', 'WST (Tala)'), ('XAF', 'XAF (CFA Franc BEAC)'), ('XAG', 'XAG (Silver)'), ('XAU', 'XAU (Gold)'), ('XBA', 'XBA (Bond Markets Unit European Composite Unit (EURCO))'), ('XBB', 'XBB (Bond Markets Unit European Monetary Unit (E.M.U.-6))'), ('XBC', 'XBC (Bond Markets Unit European Unit of Account 9 (E.U.A.-9))'), ('XBD', 'XBD (Bond Markets Unit European Unit of Account 17 (E.U.A.-17))'), ('XCD', 'XCD (East Caribbean Dollar)'), ('XDR', 'XDR (SDR (Special Drawing Right))'), ('XOF', 'XOF (CFA Franc BCEAO)'), ('XPD', 'XPD (Palladium)'), ('XPF', 'XPF (CFP Franc)'), ('XPT', 'XPT (Platinum)'), ('XSU', 'XSU (Sucre)'), ('XTS', 'XTS (Codes specifically reserved for testing purposes)'), ('XUA', 'XUA (ADB Unit of Account)'), ('XXX', 'XXX (The codes assigned for transactions where no currency is involved)'), ('YER', 'YER (Yemeni Rial)'), ('ZAR', 'ZAR (Rand)'), ('ZMW', 'ZMW (Zambian Kwacha)'), ('ZWL', 'ZWL (Zimbabwe Dollar)')], help_text=b'The currency used when making a transaction.', max_length=4),$/;"	v	class:Migration
field	./silver/migrations/0038_auto_20170724_0708.py	/^            field=models.PositiveIntegerField(default=0),$/;"	v	class:Migration
field	./silver/migrations/0039_auto_20170811_1101.py	/^            field=models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True),$/;"	v	class:Migration
field	./silver/migrations/0040_auto_20170925_0646.py	/^            field=models.BooleanField(default=False,$/;"	v	class:Migration
field	./silver/migrations/0040_auto_20170925_0646.py	/^            field=models.BooleanField(default=True,$/;"	v	class:Migration
field	./silver/migrations/0040_auto_20170925_0646.py	/^            field=models.CharField(choices=[(b'manual', b'manual'), (b'failing_void', b'failing_void'), (b'triggered', b'triggered')], max_length=256),$/;"	v	class:Migration
field	./silver/migrations/0040_auto_20170925_0646.py	/^            field=models.DateField(default=django.utils.timezone.now, help_text=b'The date up to which the metered features have been billed.'),$/;"	v	class:Migration
field	./silver/migrations/0040_auto_20170925_0646.py	/^            field=models.DateField(default=django.utils.timezone.now, help_text=b'The date up to which the plan base amount has been billed.'),$/;"	v	class:Migration
field	./silver/migrations/0040_auto_20170925_0646.py	/^            field=models.NullBooleanField(help_text=b'If this is set to True, then billing documents will be generated when the subscription trial ends, instead of waiting for the end of the billing cycle.'),$/;"	v	class:Migration
field	./silver/migrations/0040_auto_20170925_0646.py	/^            field=models.NullBooleanField(help_text=b'If this is set to True, then the plan base amount will be billed at thebeginning of the billing cycle rather than after the end.'),$/;"	v	class:Migration
field	./silver/migrations/0040_auto_20170925_0646.py	/^            field=models.NullBooleanField(help_text=b'If this is set to True, then the trial period cycle will be split if it spans across multiple billing intervals.'),$/;"	v	class:Migration
field	./silver/migrations/0041_auto_20170929_1045.py	/^            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),$/;"	v	class:Migration
field	./silver/migrations/0041_auto_20170929_1045.py	/^            field=models.DurationField(blank=True, help_text=b"This can be used to ensure that the billing date doesn't pass a certain date.\\nFor example if this field is set to 2 days, for a monthly subscription, the billing date will never surpass the 2nd day of the month. Billing documents can still be generated after that day during the billing cycle, but their billing date will appear to be the end of the cycle billing duration.", null=True),$/;"	v	class:Migration
field	./silver/migrations/0042_compute_totals_in_document_view.py	/^            field=models.DecimalField(blank=True, decimal_places=2, max_digits=19, null=True),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invoice_billing_logs', to='silver.BillingDocumentBase'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invoice_entries', to='silver.BillingDocumentBase'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invoice_transactions', to='silver.BillingDocumentBase'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='old_invoice_entries', to='silver.Invoice'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='old_invoice_logs', to='silver.Invoice'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='old_invoice_transactions', to='silver.Invoice'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='old_proforma_entries', to='silver.Proforma'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='old_proforma_logs', to='silver.Proforma'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='old_proforma_transactions', to='silver.Proforma'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proforma_billing_logs', to='silver.BillingDocumentBase'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proforma_entries', to='silver.BillingDocumentBase'),$/;"	v	class:Migration
field	./silver/migrations/0043_auto_20171113_1048.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proforma_transactions', to='silver.BillingDocumentBase'),$/;"	v	class:Migration
field	./silver/migrations/0044_auto_20171115_1809.py	/^            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='billing_logs', to='silver.Subscription'),$/;"	v	class:Migration
field_template_path	./silver/models/subscriptions.py	/^def field_template_path(field, provider=None):$/;"	f
fields	./silver/admin.py	/^        fields = ('description', 'prorated', 'product_code', 'unit',$/;"	v	class:DocumentEntryForm.Meta
fields	./silver/admin.py	/^        fields = ('provider', 'name', 'product_code', 'interval',$/;"	v	class:PlanForm.Meta
fields	./silver/admin.py	/^        fields = ()$/;"	v	class:InvoiceForm.Meta
fields	./silver/admin.py	/^        fields = ()$/;"	v	class:ProformaForm.Meta
fields	./silver/admin.py	/^        fields = ['proforma', 'invoice', 'amount', 'currency', 'state',$/;"	v	class:TransactionForm.Meta
fields	./silver/admin.py	/^    fields = (('series', 'number'), 'provider', 'customer', 'issue_date',$/;"	v	class:BillingDocumentAdmin
fields	./silver/admin.py	/^    fields = ['billing_date', 'plan_billed_up_to', 'metered_features_billed_up_to',$/;"	v	class:BillingLogInLine
fields	./silver/admin.py	/^    fields = ['company', 'first_name', 'last_name', 'customer_reference',$/;"	v	class:CustomerAdmin
fields	./silver/admin.py	/^    fields = ['company', 'name', 'email', 'address_1', 'address_2', 'city',$/;"	v	class:ProviderAdmin
fields	./silver/api/filters.py	/^        fields = ('name', )$/;"	v	class:MeteredFeaturesFilter.Meta
fields	./silver/api/filters.py	/^        fields = BillingDocumentFilter.Meta.fields + ['series', ]$/;"	v	class:InvoiceFilter.Meta
fields	./silver/api/filters.py	/^        fields = BillingDocumentFilter.Meta.fields + ['series', ]$/;"	v	class:ProformaFilter.Meta
fields	./silver/api/filters.py	/^        fields = ['email', 'company']$/;"	v	class:ProviderFilter.Meta
fields	./silver/api/filters.py	/^        fields = ['email', 'first_name', 'last_name', 'company', 'active',$/;"	v	class:CustomerFilter.Meta
fields	./silver/api/filters.py	/^        fields = ['id', 'state', 'number', 'customer_name', 'customer_company',$/;"	v	class:BillingDocumentFilter.Meta
fields	./silver/api/filters.py	/^        fields = ['name', 'currency', 'enabled', 'private', 'product_code',$/;"	v	class:PlanFilter.Meta
fields	./silver/api/filters.py	/^        fields = ['payment_method', 'state', 'min_amount', 'max_amount',$/;"	v	class:TransactionFilter.Meta
fields	./silver/api/filters.py	/^        fields = ['plan', 'reference', 'state']$/;"	v	class:SubscriptionFilter.Meta
fields	./silver/api/filters.py	/^        fields = ['processor', 'canceled', 'verified']$/;"	v	class:PaymentMethodFilter.Meta
fields	./silver/api/serializers/billing_entities_serializers.py	/^        fields = ('id', 'url', 'customer_reference', 'first_name', 'last_name',$/;"	v	class:CustomerSerializer.Meta
fields	./silver/api/serializers/billing_entities_serializers.py	/^        fields = ('id', 'url', 'name', 'company', 'invoice_series', 'flow',$/;"	v	class:ProviderSerializer.Meta
fields	./silver/api/serializers/common.py	/^        fields = ('name', 'unit', 'price_per_unit', 'included_units',$/;"	v	class:MeteredFeatureSerializer.Meta
fields	./silver/api/serializers/documents_serializers.py	/^        fields = ('description', 'unit', 'unit_price', 'quantity', 'total',$/;"	v	class:DocumentEntrySerializer.Meta
fields	./silver/api/serializers/documents_serializers.py	/^        fields = ('id', 'series', 'number', 'provider', 'customer',$/;"	v	class:InvoiceSerializer.Meta
fields	./silver/api/serializers/documents_serializers.py	/^        fields = ('id', 'series', 'number', 'provider', 'customer',$/;"	v	class:ProformaSerializer.Meta
fields	./silver/api/serializers/documents_serializers.py	/^        fields = ('id', 'url', 'kind', 'series', 'number', 'provider',$/;"	v	class:DocumentSerializer.Meta
fields	./silver/api/serializers/payment_methods_serializers.py	/^        fields = ('url', 'transactions', 'customer', 'payment_processor_name',$/;"	v	class:PaymentMethodSerializer.Meta
fields	./silver/api/serializers/plans_serializer.py	/^        fields = ('name', 'url', 'interval', 'interval_count', 'amount',$/;"	v	class:PlanSerializer.Meta
fields	./silver/api/serializers/product_codes_serializer.py	/^        fields = ('url', 'value')$/;"	v	class:ProductCodeSerializer.Meta
fields	./silver/api/serializers/subscriptions_serializers.py	/^        fields = ('consumed_units', 'start_date', 'end_date')$/;"	v	class:MFUnitsLogSerializer.Meta
fields	./silver/api/serializers/subscriptions_serializers.py	/^        fields = ('id', 'url', 'plan', 'customer', 'trial_end', 'start_date',$/;"	v	class:SubscriptionSerializer.Meta
fields	./silver/api/serializers/subscriptions_serializers.py	/^        fields = MeteredFeatureSerializer.Meta.fields + ('url',)$/;"	v	class:MeteredFeatureInSubscriptionSerializer.Meta
fields	./silver/api/serializers/subscriptions_serializers.py	/^        fields = SubscriptionSerializer.Meta.fields + ('plan',)$/;"	v	class:SubscriptionDetailSerializer.Meta
fields	./silver/api/serializers/transaction_serializers.py	/^        fields = ('id', 'url', 'customer', 'provider', 'amount', 'currency',$/;"	v	class:TransactionSerializer.Meta
fields	./silver/migrations/0001_initial.py	/^            fields=[$/;"	v	class:Migration
fields	./silver/migrations/0043_auto_20171113_1048.py	/^            fields=[$/;"	v	class:Migration
fields_for_automatic_invoice_generation	./silver/models/documents/proforma.py	/^    def fields_for_automatic_invoice_generation(self):$/;"	m	class:Proforma
fill_billing_log_billed_up_to_fields	./silver/migrations/0040_auto_20170925_0646.py	/^def fill_billing_log_billed_up_to_fields(apps, schema_editor):$/;"	f
fill_billing_log_created_at_field	./silver/migrations/0041_auto_20170929_1045.py	/^def fill_billing_log_created_at_field(apps, schema_editor):$/;"	f
filter	./silver/api/filters.py	/^    def filter(self, qs, value):$/;"	m	class:MultipleCharFilter
filter_backends	./silver/api/views/billing_entities_views.py	/^    filter_backends = (DjangoFilterBackend,)$/;"	v	class:CustomerList
filter_backends	./silver/api/views/billing_entities_views.py	/^    filter_backends = (DjangoFilterBackend,)$/;"	v	class:ProviderListCreate
filter_backends	./silver/api/views/documents_views.py	/^    filter_backends = (DjangoFilterBackend,)$/;"	v	class:InvoiceListCreate
filter_backends	./silver/api/views/documents_views.py	/^    filter_backends = (DjangoFilterBackend,)$/;"	v	class:ProformaListCreate
filter_backends	./silver/api/views/documents_views.py	/^    filter_backends = (filters.OrderingFilter, DjangoFilterBackend)$/;"	v	class:DocumentList
filter_backends	./silver/api/views/payment_method_views.py	/^    filter_backends = (DjangoFilterBackend,)$/;"	v	class:PaymentMethodList
filter_backends	./silver/api/views/plan_views.py	/^    filter_backends = (DjangoFilterBackend,)$/;"	v	class:PlanList
filter_backends	./silver/api/views/subscription_views.py	/^    filter_backends = (DjangoFilterBackend,)$/;"	v	class:MeteredFeatureList
filter_backends	./silver/api/views/subscription_views.py	/^    filter_backends = (DjangoFilterBackend,)$/;"	v	class:SubscriptionList
filter_backends	./silver/api/views/transaction_views.py	/^    filter_backends = (DjangoFilterBackend,)$/;"	v	class:TransactionList
filter_class	./silver/api/views/billing_entities_views.py	/^    filter_class = CustomerFilter$/;"	v	class:CustomerList
filter_class	./silver/api/views/billing_entities_views.py	/^    filter_class = ProviderFilter$/;"	v	class:ProviderListCreate
filter_class	./silver/api/views/documents_views.py	/^    filter_class = BillingDocumentFilter$/;"	v	class:DocumentList
filter_class	./silver/api/views/documents_views.py	/^    filter_class = InvoiceFilter$/;"	v	class:InvoiceListCreate
filter_class	./silver/api/views/documents_views.py	/^    filter_class = ProformaFilter$/;"	v	class:ProformaListCreate
filter_class	./silver/api/views/payment_method_views.py	/^    filter_class = PaymentMethodFilter$/;"	v	class:PaymentMethodList
filter_class	./silver/api/views/plan_views.py	/^    filter_class = PlanFilter$/;"	v	class:PlanList
filter_class	./silver/api/views/subscription_views.py	/^    filter_class = MeteredFeaturesFilter$/;"	v	class:MeteredFeatureList
filter_class	./silver/api/views/subscription_views.py	/^    filter_class = SubscriptionFilter$/;"	v	class:SubscriptionList
filter_class	./silver/api/views/transaction_views.py	/^    filter_class = TransactionFilter$/;"	v	class:TransactionList
filter_is_overdue	./silver/api/filters.py	/^    def filter_is_overdue(self, queryset, _, value):$/;"	m	class:BillingDocumentFilter
final_fields	./silver/models/payment_methods.py	/^    def final_fields(self):$/;"	m	class:PaymentMethod
final_fields	./silver/models/transactions/transaction.py	/^    def final_fields(self):$/;"	m	class:Transaction
first_day_of_month	./silver/utils/dates.py	/^def first_day_of_month(date):$/;"	f
first_name	./silver/api/filters.py	/^    first_name = CharFilter(name='first_name', lookup_expr='icontains')$/;"	v	class:CustomerFilter
first_name	./silver/models/billing_entities/customer.py	/^    first_name = models.CharField($/;"	v	class:Customer
first_name	./silver/tests/factories.py	/^    first_name = factory.Sequence(lambda n: faker.first_name())$/;"	v	class:CustomerFactory
fk_name	./silver/admin.py	/^    fk_name = 'invoice'$/;"	v	class:InvoiceDocumentEntryInline
fk_name	./silver/admin.py	/^    fk_name = 'proforma'$/;"	v	class:ProformaDocumentEntryInline
flow	./silver/models/billing_entities/provider.py	/^    flow = models.CharField($/;"	v	class:Provider
flow	./silver/tests/factories.py	/^    flow = 'proforma'$/;"	v	class:ProviderFactory
form	./silver/admin.py	/^    form = DocumentEntryForm$/;"	v	class:DocumentEntryInline
form	./silver/admin.py	/^    form = InvoiceForm$/;"	v	class:InvoiceAdmin
form	./silver/admin.py	/^    form = PlanForm$/;"	v	class:PlanAdmin
form	./silver/admin.py	/^    form = ProformaForm$/;"	v	class:ProformaAdmin
form	./silver/admin.py	/^    form = TransactionForm$/;"	v	class:TransactionAdmin
form	./silver/payment_processors/views.py	/^    form = None$/;"	v	class:GenericTransactionView
form_class	./silver/payment_processors/base.py	/^    form_class = None$/;"	v	class:PaymentProcessorBase
form_class	./silver/payment_processors/manual.py	/^    form_class = GenericTransactionForm$/;"	v	class:ManualProcessor
formfield_for_foreignkey	./silver/admin.py	/^    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):$/;"	m	class:MeteredFeatureUnitsLogInLine
full_clean	./silver/models/payment_methods.py	/^    def full_clean(self, *args, **kwargs):$/;"	m	class:PaymentMethod
full_clean	./silver/models/transactions/transaction.py	/^    def full_clean(self, *args, **kwargs):$/;"	m	class:Transaction
generate	./silver/documents_generator.py	/^    def generate(self, subscription=None, billing_date=None, customers=None,$/;"	m	class:DocumentsGenerator
generate	./silver/models/documents/pdf.py	/^    def generate(self, template, context, upload=True):$/;"	m	class:PDF
generate_after	./silver/models/plans.py	/^    generate_after = models.PositiveIntegerField($/;"	v	class:Plan
generate_after	./silver/tests/factories.py	/^    generate_after = factory.Sequence(lambda n: n)$/;"	v	class:PlanFactory
generate_all_documents	./silver/admin.py	/^    def generate_all_documents(self, request, queryset):$/;"	m	class:CustomerAdmin
generate_billing_documents	./silver/tasks.py	/^def generate_billing_documents(billing_date=None):$/;"	f
generate_documents_on_trial_end	./silver/models/billing_entities/provider.py	/^    generate_documents_on_trial_end = models.BooleanField($/;"	v	class:Provider
generate_documents_on_trial_end	./silver/models/plans.py	/^    generate_documents_on_trial_end = models.NullBooleanField($/;"	v	class:Plan
generate_documents_on_trial_end	./silver/models/subscriptions.py	/^    def generate_documents_on_trial_end(self):$/;"	m	class:Subscription
generate_html	./silver/models/documents/base.py	/^    def generate_html(self, state=None, request=None):$/;"	m	class:BillingDocumentBase
generate_monthly_totals	./silver/admin.py	/^    def generate_monthly_totals(self, request, queryset):$/;"	m	class:ProviderAdmin
generate_pdf	./silver/models/documents/base.py	/^    def generate_pdf(self, state=None, upload=True):$/;"	m	class:BillingDocumentBase
generate_pdf	./silver/tasks.py	/^def generate_pdf(document_id, document_type):$/;"	f
generate_pdfs	./silver/tasks.py	/^def generate_pdfs():$/;"	f
get	./silver/api/views/documents_views.py	/^    def get(self, *args, **kwargs):$/;"	m	class:PDFRetrieve
get	./silver/api/views/documents_views.py	/^    def get(self, request, *args, **kwargs):$/;"	m	class:ProformaInvoiceRetrieveCreate
get	./silver/api/views/subscription_views.py	/^    def get(self, request, format=None, **kwargs):$/;"	m	class:MeteredFeatureUnitsLogDetail
get	./silver/payment_processors/views.py	/^    def get(self, request):$/;"	m	class:GenericTransactionView
get_actions	./silver/admin.py	/^    def get_actions(self, request):$/;"	m	class:BillingDocumentAdmin
get_all_instances	./silver/payment_processors/base.py	/^def get_all_instances():$/;"	f
get_archivable_field_values	./silver/models/billing_entities/base.py	/^    def get_archivable_field_values(self):$/;"	m	class:BaseBillingEntity
get_archivable_field_values	./silver/models/billing_entities/customer.py	/^    def get_archivable_field_values(self):$/;"	m	class:Customer
get_archivable_field_values	./silver/models/billing_entities/provider.py	/^    def get_archivable_field_values(self):$/;"	m	class:Provider
get_billing_documents_kinds	./silver/models/documents/base.py	/^def get_billing_documents_kinds():$/;"	f
get_context_data	./silver/payment_processors/views.py	/^    def get_context_data(self):$/;"	m	class:GenericTransactionView
get_customer	./silver/admin.py	/^    def get_customer(self, obj):$/;"	m	class:TransactionAdmin
get_customer	./silver/api/views/payment_method_views.py	/^    def get_customer(self, request):$/;"	m	class:PaymentMethodList
get_first_link	./silver/api/pagination.py	/^    def get_first_link(self, display_page_query_param=True):$/;"	m	class:LinkHeaderPagination
get_form	./silver/payment_processors/base.py	/^    def get_form(self, transaction, request):$/;"	m	class:PaymentProcessorBase
get_formset	./silver/admin.py	/^    def get_formset(self, request, obj=None, **kwargs):$/;"	m	class:MeteredFeatureUnitsLogInLine
get_instance	./silver/payment_processors/base.py	/^def get_instance(name):$/;"	f
get_invoice_archivable_field_values	./silver/models/billing_entities/provider.py	/^    def get_invoice_archivable_field_values(self):$/;"	m	class:Provider
get_is_recurring	./silver/admin.py	/^    def get_is_recurring(self, obj):$/;"	m	class:TransactionAdmin
get_last_link	./silver/api/pagination.py	/^    def get_last_link(self):$/;"	m	class:LinkHeaderPagination
get_list_display_fields	./silver/models/billing_entities/base.py	/^    def get_list_display_fields(self):$/;"	m	class:BaseBillingEntity
get_model	./silver/api/views/documents_views.py	/^    def get_model(self):$/;"	m	class:DocEntryCreate
get_model	./silver/api/views/documents_views.py	/^    def get_model(self):$/;"	m	class:DocEntryUpdateDestroy
get_model	./silver/api/views/documents_views.py	/^    def get_model(self):$/;"	m	class:InvoiceEntryCreate
get_model	./silver/api/views/documents_views.py	/^    def get_model(self):$/;"	m	class:InvoiceEntryUpdateDestroy
get_model	./silver/api/views/documents_views.py	/^    def get_model(self):$/;"	m	class:ProformaEntryCreate
get_model	./silver/api/views/documents_views.py	/^    def get_model(self):$/;"	m	class:ProformaEntryUpdateDestroy
get_model_name	./silver/api/views/documents_views.py	/^    def get_model_name(self):$/;"	m	class:DocEntryCreate
get_model_name	./silver/api/views/documents_views.py	/^    def get_model_name(self):$/;"	m	class:DocEntryUpdateDestroy
get_model_name	./silver/api/views/documents_views.py	/^    def get_model_name(self):$/;"	m	class:InvoiceEntryCreate
get_model_name	./silver/api/views/documents_views.py	/^    def get_model_name(self):$/;"	m	class:InvoiceEntryUpdateDestroy
get_model_name	./silver/api/views/documents_views.py	/^    def get_model_name(self):$/;"	m	class:ProformaEntryCreate
get_model_name	./silver/api/views/documents_views.py	/^    def get_model_name(self):$/;"	m	class:ProformaEntryUpdateDestroy
get_object	./silver/api/serializers/billing_entities_serializers.py	/^    def get_object(self, view_name, view_args, view_kwargs):$/;"	m	class:ProviderUrl
get_object	./silver/api/serializers/common.py	/^    def get_object(self, view_name, view_args, view_kwargs):$/;"	m	class:CustomerUrl
get_object	./silver/api/serializers/payment_methods_serializers.py	/^    def get_object(self, view_name, view_args, view_kwargs):$/;"	m	class:PaymentMethodUrl
get_object	./silver/api/serializers/payment_methods_serializers.py	/^    def get_object(self, view_name, view_args, view_kwargs):$/;"	m	class:PaymentProcessorUrl
get_object	./silver/api/serializers/transaction_serializers.py	/^    def get_object(self, view_name, view_args, view_kwargs):$/;"	m	class:TransactionPaymentUrl
get_object	./silver/api/serializers/transaction_serializers.py	/^    def get_object(self, view_name, view_args, view_kwargs):$/;"	m	class:TransactionUrl
get_object	./silver/api/views/billing_entities_views.py	/^    def get_object(self):$/;"	m	class:CustomerDetail
get_object	./silver/api/views/payment_method_views.py	/^    def get_object(self):$/;"	m	class:PaymentMethodDetail
get_object	./silver/api/views/payment_method_views.py	/^    def get_object(self):$/;"	m	class:PaymentProcessorDetail
get_object	./silver/api/views/payment_method_views.py	/^    def get_object(self, **kwargs):$/;"	m	class:PaymentMethodAction
get_object	./silver/api/views/plan_views.py	/^    def get_object(self):$/;"	m	class:PlanDetail
get_object	./silver/api/views/subscription_views.py	/^    def get_object(self):$/;"	m	class:MeteredFeatureDetail
get_object	./silver/api/views/subscription_views.py	/^    def get_object(self):$/;"	m	class:SubscriptionDetail
get_object	./silver/api/views/transaction_views.py	/^    def get_object(self):$/;"	m	class:TransactionDetail
get_object	./silver/api/views/transaction_views.py	/^    def get_object(self, **kwargs):$/;"	m	class:TransactionAction
get_paginated_response	./silver/api/pagination.py	/^    def get_paginated_response(self, data):$/;"	m	class:LinkHeaderPagination
get_pay_url	./silver/admin.py	/^    def get_pay_url(self, obj):$/;"	m	class:TransactionAdmin
get_payment_complete_url	./silver/utils/payments.py	/^def get_payment_complete_url(transaction, request):$/;"	f
get_payment_method	./silver/admin.py	/^    def get_payment_method(self, obj):$/;"	m	class:TransactionAdmin
get_payment_processor	./silver/api/serializers/payment_methods_serializers.py	/^    def get_payment_processor(self, obj):$/;"	m	class:PaymentMethodSerializer
get_payment_processor	./silver/models/payment_methods.py	/^    def get_payment_processor(self):$/;"	m	class:PaymentMethod
get_payment_url	./silver/utils/payments.py	/^def get_payment_url(transaction, request):$/;"	f
get_pdf_filename	./silver/models/documents/base.py	/^    def get_pdf_filename(self):$/;"	m	class:BillingDocumentBase
get_pdf_upload_path	./silver/models/documents/base.py	/^    def get_pdf_upload_path(self):$/;"	m	class:BillingDocumentBase
get_proforma_archivable_field_values	./silver/models/billing_entities/provider.py	/^    def get_proforma_archivable_field_values(self):$/;"	m	class:Provider
get_queryset	./silver/admin.py	/^    def get_queryset(self, request):$/;"	m	class:BillingDocumentAdmin
get_queryset	./silver/admin.py	/^    def get_queryset(self, request):$/;"	m	class:LiveModelAdmin
get_queryset	./silver/admin.py	/^    def get_queryset(self, request):$/;"	m	class:SubscriptionAdmin
get_queryset	./silver/admin.py	/^    def get_queryset(self, request):$/;"	m	class:TransactionAdmin
get_queryset	./silver/api/views/documents_views.py	/^    def get_queryset(self):$/;"	m	class:DocumentList
get_queryset	./silver/api/views/payment_method_views.py	/^    def get_queryset(self):$/;"	m	class:PaymentMethodList
get_queryset	./silver/api/views/payment_method_views.py	/^    def get_queryset(self):$/;"	m	class:PaymentProcessorList
get_queryset	./silver/api/views/plan_views.py	/^    def get_queryset(self):$/;"	m	class:PlanMeteredFeatures
get_queryset	./silver/api/views/subscription_views.py	/^    def get_queryset(self):$/;"	m	class:SubscriptionList
get_queryset	./silver/api/views/transaction_views.py	/^    def get_queryset(self):$/;"	m	class:TransactionList
get_queryset	./silver/models/documents/base.py	/^    def get_queryset(self):$/;"	m	class:BillingDocumentManager
get_queryset	./silver/models/documents/invoice.py	/^    def get_queryset(self):$/;"	m	class:InvoiceManager
get_queryset	./silver/models/documents/proforma.py	/^    def get_queryset(self):$/;"	m	class:ProformaManager
get_queryset	./silver/models/plans.py	/^    def get_queryset(self):$/;"	m	class:PlanManager
get_queryset	./silver/views.py	/^    def get_queryset(self):$/;"	m	class:DocumentAutocomplete
get_queryset	./silver/views.py	/^    def get_queryset(self):$/;"	m	class:PaymentMethodAutocomplete
get_readonly_fields	./silver/admin.py	/^    def get_readonly_fields(self, request, instance=None):$/;"	m	class:TransactionAdmin
get_related_document	./silver/admin.py	/^    def get_related_document(self, obj):$/;"	m	class:BillingDocumentAdmin
get_storage	./silver/models/documents/pdf.py	/^def get_storage():$/;"	f
get_subscriptions_prepared_for_billing	./silver/documents_generator.py	/^    def get_subscriptions_prepared_for_billing(self, customer, billing_date, force_generate):$/;"	m	class:DocumentsGenerator
get_template	./silver/models/documents/base.py	/^    def get_template(self, state=None):$/;"	m	class:BillingDocumentBase
get_template	./silver/payment_processors/base.py	/^    def get_template(self, transaction):$/;"	m	class:PaymentProcessorBase
get_template_context	./silver/models/documents/base.py	/^    def get_template_context(self, state=None):$/;"	m	class:BillingDocumentBase
get_transaction_from_token	./silver/utils/decorators.py	/^def get_transaction_from_token(view):$/;"	f
get_transactions	./silver/api/serializers/documents_serializers.py	/^    def get_transactions(self, document):$/;"	m	class:DocumentSerializer
get_upload_path	./silver/models/documents/pdf.py	/^def get_upload_path(instance, filename):$/;"	f
get_url	./silver/api/serializers/billing_entities_serializers.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:ProviderUrl
get_url	./silver/api/serializers/common.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:CustomerUrl
get_url	./silver/api/serializers/common.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:PDFUrl
get_url	./silver/api/serializers/common.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:PaymentMethodTransactionsUrl
get_url	./silver/api/serializers/documents_serializers.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:DocumentUrl
get_url	./silver/api/serializers/payment_methods_serializers.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:PaymentMethodUrl
get_url	./silver/api/serializers/payment_methods_serializers.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:PaymentProcessorUrl
get_url	./silver/api/serializers/subscriptions_serializers.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:MFUnitsLogUrl
get_url	./silver/api/serializers/subscriptions_serializers.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:SubscriptionUrl
get_url	./silver/api/serializers/transaction_serializers.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:TransactionPaymentUrl
get_url	./silver/api/serializers/transaction_serializers.py	/^    def get_url(self, obj, view_name, request, format):$/;"	m	class:TransactionUrl
get_view	./silver/payment_processors/base.py	/^    def get_view(self, transaction, request, **kwargs):$/;"	m	class:PaymentProcessorBase
get_view	./silver/tests/spec/test_payments.py	/^        def get_view(processor, transaction, request):$/;"	f	function:TestPaymentUrls.test_pay_transaction_not_implemented_get_call
get_view	./silver/tests/spec/test_payments.py	/^        def get_view(processor, transaction, request):$/;"	f	function:TestPaymentUrls.test_pay_transaction_view_missing_view
handle	./silver/management/commands/execute_transactions.py	/^    def handle(self, *args, **options):$/;"	m	class:Command
handle	./silver/management/commands/fetch_transactions_status.py	/^    def handle(self, *args, **options):$/;"	m	class:Command
handle	./silver/management/commands/generate_docs.py	/^    def handle(self, *args, **options):$/;"	m	class:Command
handle	./silver/management/commands/generate_pdfs.py	/^    def handle(self, *args, **options):$/;"	m	class:Command
handle	./silver/management/commands/seed.py	/^    def handle(self, *args, **options):$/;"	m	class:Command
handle	./silver/management/commands/tweak_billing_log.py	/^    def handle(self, *args, **options):$/;"	m	class:Command
handle_transaction_response	./silver/payment_processors/base.py	/^    def handle_transaction_response(self, transaction, request):$/;"	m	class:PaymentProcessorBase
has_add_permission	./silver/admin.py	/^    def has_add_permission(self, request):$/;"	m	class:BillingLogInLine
has_delete_permission	./silver/admin.py	/^    def has_delete_permission(self, request, obj=None):$/;"	m	class:BillingDocumentAdmin
has_delete_permission	./silver/admin.py	/^    def has_delete_permission(self, request, obj=None):$/;"	m	class:BillingLogInLine
help	./silver/management/commands/execute_transactions.py	/^    help = 'Runs execute_transaction on eligible transactions.'$/;"	v	class:Command
help	./silver/management/commands/fetch_transactions_status.py	/^    help = 'Runs update_status on eligible transactions.'$/;"	v	class:Command
help	./silver/management/commands/generate_docs.py	/^    help = 'Generates the billing documents (Invoices, Proformas).'$/;"	v	class:Command
help	./silver/management/commands/generate_pdfs.py	/^    help = 'Generates the billing documents (Invoices, Proformas).'$/;"	v	class:Command
help	./silver/management/commands/seed.py	/^    help = 'Creating entities for testing purposes'$/;"	v	class:Command
help_text	./silver/migrations/0001_initial.py	/^                    help_text=b"Sales tax name (eg. 'sales tax' or 'VAT').", max_length=64, null=True, blank=True)),$/;"	v	class:Migration
help_text	./silver/migrations/0001_initial.py	/^                    help_text=b'Extra information to display on the invoice (markdown formatted).', null=True, blank=True)),$/;"	v	class:Migration
help_text	./silver/migrations/0001_initial.py	/^                    help_text=b'The date when the invoice\/proforma was issued.')),$/;"	v	class:Migration
help_text	./silver/migrations/0001_initial.py	/^                    help_text=b'The number of intervals between each subscription billing')),$/;"	v	class:Migration
help_text	./silver/migrations/0001_initial.py	/^                help_text=b'The product code for this plan.'),$/;"	v	class:Migration
help_text	./silver/migrations/0001_initial.py	/^                help_text=b'The product code for this plan.',$/;"	v	class:Migration
help_text	./silver/migrations/0001_initial.py	/^                help_text=b'The provider which provides the plan.'),$/;"	v	class:Migration
help_text	./silver/migrations/0008_auto_20150430_1804.py	/^                help_text=b'The amount in the specified currency to be charged on the interval specified.',$/;"	v	class:Migration
help_text	./silver/migrations/0008_auto_20150430_1804.py	/^                help_text=b'The number of included units during the trial period.',$/;"	v	class:Migration
help_text	./silver/migrations/0008_auto_20150430_1804.py	/^                help_text=b'The number of included units per plan interval.',$/;"	v	class:Migration
help_text	./silver/migrations/0008_auto_20150430_1804.py	/^                help_text=b'The price per unit.',$/;"	v	class:Migration
help_text	./silver/migrations/0009_auto_20150717_1428.py	/^                help_text=b'Number of trial period days granted when subscribing a customer to this plan.',$/;"	v	class:Migration
help_text	./silver/migrations/0009_auto_20150717_1428.py	/^                help_text=b'The date when the subscription was canceled.',$/;"	v	class:Migration
help_text	./silver/migrations/0040_auto_20170925_0646.py	/^                                      help_text=b'If this is set to True, then billing documents will be generated when the subscription trial ends, instead of waiting for the end of the billing cycle.'),$/;"	v	class:Migration
help_text	./silver/migrations/0040_auto_20170925_0646.py	/^                                      help_text=b'If this is set to True, then the plan base amount will be billed at thebeginning of the billing cycle rather than after the end.'),$/;"	v	class:Migration
help_text	./silver/migrations/0040_auto_20170925_0646.py	/^                                      help_text=b'If this is set to True, then the trial period cycle will be split if it spans across multiple billing intervals.'),$/;"	v	class:Migration
help_text	./silver/models/billing_entities/base.py	/^        help_text='Extra information to display on the invoice '$/;"	v	class:BaseBillingEntity
help_text	./silver/models/billing_entities/customer.py	/^        help_text="It's a reference to be passed between silver and clients. "$/;"	v	class:Customer.Meta
help_text	./silver/models/billing_entities/customer.py	/^        help_text="Sales tax name (eg. 'sales tax' or 'VAT')."$/;"	v	class:Customer.Meta
help_text	./silver/models/billing_entities/customer.py	/^        help_text="Used to enforce a certain currency when making transactions"$/;"	v	class:Customer.Meta
help_text	./silver/models/billing_entities/customer.py	/^        help_text="Whenever to add sales tax. "$/;"	v	class:Customer.Meta
help_text	./silver/models/billing_entities/customer.py	/^        help_text='Due days for generated proforma\/invoice.'$/;"	v	class:Customer.Meta
help_text	./silver/models/billing_entities/customer.py	/^        help_text='The customer\\'s first name.'$/;"	v	class:Customer.Meta
help_text	./silver/models/billing_entities/customer.py	/^        help_text='The customer\\'s last name.',$/;"	v	class:Customer.Meta
help_text	./silver/models/billing_entities/provider.py	/^        help_text="If this is set to True, then billing documents will be generated when the "$/;"	v	class:Provider.Meta
help_text	./silver/models/billing_entities/provider.py	/^        help_text="If this is set to True, then the plan base amount will be billed at the"$/;"	v	class:Provider.Meta
help_text	./silver/models/billing_entities/provider.py	/^        help_text="If this is set to True, then the trial period cycle will be split if it spans "$/;"	v	class:Provider.Meta
help_text	./silver/models/billing_entities/provider.py	/^        help_text="One of the available workflows for generating proformas "$/;"	v	class:Provider.Meta
help_text	./silver/models/billing_entities/provider.py	/^        help_text="The default state of the auto-generated documents."$/;"	v	class:Provider.Meta
help_text	./silver/models/billing_entities/provider.py	/^        help_text="The series that will be used on every invoice generated by "$/;"	v	class:Provider.Meta
help_text	./silver/models/billing_entities/provider.py	/^        help_text="The series that will be used on every proforma generated by "$/;"	v	class:Provider.Meta
help_text	./silver/models/billing_entities/provider.py	/^        help_text="This can be used to ensure that the billing date doesn't pass a certain date.\\n"$/;"	v	class:Provider.Meta
help_text	./silver/models/billing_entities/provider.py	/^        help_text='The name to be used for billing purposes.'$/;"	v	class:Provider.Meta
help_text	./silver/models/documents/base.py	/^                     help_text='The state the invoice is in.')$/;"	v	class:BillingDocumentBase.STATES
help_text	./silver/models/documents/base.py	/^        help_text='Currency exchange rate from document currency to '$/;"	v	class:BillingDocumentBase.STATES
help_text	./silver/models/documents/base.py	/^        help_text='Date of the transaction exchange rate.'$/;"	v	class:BillingDocumentBase.STATES
help_text	./silver/models/documents/base.py	/^        help_text='The currency used for billing.'$/;"	v	class:BillingDocumentBase.STATES
help_text	./silver/models/documents/base.py	/^        help_text='The currency used when making a transaction.'$/;"	v	class:BillingDocumentBase.STATES
help_text	./silver/models/plans.py	/^                                  help_text='Indicates if a plan is private.')$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^                                  help_text='Whether to accept subscriptions.')$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text="A list of the plan's metered features."$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text="If this is set to True, then billing documents will be generated when the "$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text="If this is set to True, then the plan base amount will be billed at the"$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text="If this is set to True, then the trial period cycle will be split if it spans "$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text="This can be used to ensure that the billing date doesn't pass a certain date.\\n"$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text='Number of seconds to wait after current billing cycle ends '$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text='Number of trial period days granted when subscribing a '$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text='The amount in the specified currency to be charged on the '$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text='The currency in which the subscription will be charged.'$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text='The feature display name.',$/;"	v	class:MeteredFeature
help_text	./silver/models/plans.py	/^        help_text='The frequency with which a subscription should be billed.'$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text='The number of included units during the trial period.'$/;"	v	class:MeteredFeature
help_text	./silver/models/plans.py	/^        help_text='The number of included units per plan interval.'$/;"	v	class:MeteredFeature
help_text	./silver/models/plans.py	/^        help_text='The number of intervals between each subscription billing'$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/plans.py	/^        help_text='The price per unit.',$/;"	v	class:MeteredFeature
help_text	./silver/models/plans.py	/^        help_text='The provider which provides the plan.'$/;"	v	class:Plan.INTERVALS
help_text	./silver/models/subscriptions.py	/^        help_text="The date up to which the metered features have been billed."$/;"	v	class:BillingLog
help_text	./silver/models/subscriptions.py	/^        help_text="The date up to which the plan base amount has been billed."$/;"	v	class:BillingLog
help_text	./silver/models/subscriptions.py	/^        help_text="The date when the invoice\/proforma was issued."$/;"	v	class:BillingLog
help_text	./silver/models/subscriptions.py	/^        help_text="The subscription's reference in an external system."$/;"	v	class:Subscription.CANCEL_OPTIONS
help_text	./silver/models/subscriptions.py	/^        help_text='The customer who is subscribed to the plan.'$/;"	v	class:Subscription.CANCEL_OPTIONS
help_text	./silver/models/subscriptions.py	/^        help_text='The date at which the trial ends. '$/;"	v	class:Subscription.CANCEL_OPTIONS
help_text	./silver/models/subscriptions.py	/^        help_text='The date when the subscription ended.'$/;"	v	class:Subscription.CANCEL_OPTIONS
help_text	./silver/models/subscriptions.py	/^        help_text='The date when the subscription was canceled.'$/;"	v	class:Subscription.CANCEL_OPTIONS
help_text	./silver/models/subscriptions.py	/^        help_text='The plan the customer is subscribed to.'$/;"	v	class:Subscription.CANCEL_OPTIONS
help_text	./silver/models/subscriptions.py	/^        help_text='The starting date for the subscription.'$/;"	v	class:Subscription.CANCEL_OPTIONS
help_text	./silver/models/transactions/transaction.py	/^        help_text='The currency used for billing.'$/;"	v	class:Transaction
http_method_names	./silver/api/views/transaction_views.py	/^    http_method_names = ('get', 'patch', 'head', 'options')$/;"	v	class:TransactionDetail
id	./silver/api/filters.py	/^    id = NumberFilter(name='id', lookup_expr='iexact')$/;"	v	class:BillingDocumentFilter
id	./silver/api/serializers/transaction_serializers.py	/^    id = serializers.CharField(source='uuid', read_only=True)$/;"	v	class:TransactionSerializer
included_units	./silver/models/plans.py	/^    included_units = models.DecimalField($/;"	v	class:MeteredFeature
included_units	./silver/tests/factories.py	/^    included_units = factory.fuzzy.FuzzyDecimal(low=0.01, high=100000.00,$/;"	v	class:MeteredFeatureFactory
included_units_during_trial	./silver/models/plans.py	/^    included_units_during_trial = models.DecimalField($/;"	v	class:MeteredFeature
index_together	./silver/migrations/0006_auto_20150430_1457.py	/^            index_together=set([('name', 'company')]),$/;"	v	class:Migration
index_together	./silver/models/billing_entities/customer.py	/^        index_together = (('first_name', 'last_name', 'company'),)$/;"	v	class:Customer.Meta
index_together	./silver/models/billing_entities/provider.py	/^        index_together = (('name', 'company'),)$/;"	v	class:Provider.Meta
inlines	./silver/admin.py	/^    inlines = [DocumentEntryInline]$/;"	v	class:BillingDocumentAdmin
inlines	./silver/admin.py	/^    inlines = [InvoiceDocumentEntryInline]$/;"	v	class:InvoiceAdmin
inlines	./silver/admin.py	/^    inlines = [MeteredFeatureUnitsLogInLine, BillingLogInLine]$/;"	v	class:SubscriptionAdmin
inlines	./silver/admin.py	/^    inlines = [ProformaDocumentEntryInline]$/;"	v	class:ProformaAdmin
install_requires	./setup.py	/^install_requires = [line.strip()$/;"	v
interval	./silver/api/filters.py	/^    interval = CharFilter(name='interval', lookup_expr='icontains')$/;"	v	class:PlanFilter
interval	./silver/models/plans.py	/^    interval = models.CharField($/;"	v	class:Plan
interval	./silver/tests/factories.py	/^    interval = Plan.INTERVALS.MONTH$/;"	v	class:PlanFactory
interval_count	./silver/models/plans.py	/^    interval_count = models.PositiveIntegerField($/;"	v	class:Plan
interval_count	./silver/tests/factories.py	/^    interval_count = factory.Sequence(lambda n: n)$/;"	v	class:PlanFactory
interval_display	./silver/admin.py	/^    def interval_display(self, obj):$/;"	m	class:PlanAdmin
invoice	./silver/models/documents/entries.py	/^    invoice = models.ForeignKey('BillingDocumentBase', related_name='invoice_entries',$/;"	v	class:DocumentEntry
invoice	./silver/models/subscriptions.py	/^    invoice = models.ForeignKey('BillingDocumentBase', null=True, blank=True,$/;"	v	class:BillingLog
invoice	./silver/models/transactions/transaction.py	/^    invoice = models.ForeignKey("BillingDocumentBase", null=True, blank=True,$/;"	v	class:Transaction
invoice	./silver/tests/factories.py	/^    invoice = factory.SubFactory($/;"	v	class:TransactionFactory
invoice_entries	./silver/api/serializers/documents_serializers.py	/^    invoice_entries = DocumentEntrySerializer(many=True)$/;"	v	class:InvoiceSerializer
invoice_entries	./silver/tests/factories.py	/^    def invoice_entries(self, create, extracted, **kwargs):$/;"	m	class:InvoiceFactory
invoice_link	./silver/admin.py	/^    def invoice_link(self, obj):$/;"	m	class:BillingLogInLine
invoice_pdf	./silver/admin.py	/^    def invoice_pdf(self, invoice):$/;"	m	class:InvoiceAdmin
invoice_pdf	./silver/views.py	/^def invoice_pdf(request, invoice_id):$/;"	f
invoice_series	./silver/models/billing_entities/provider.py	/^    invoice_series = models.CharField($/;"	v	class:Provider
invoice_series	./silver/tests/factories.py	/^    invoice_series = 'InvoiceSeries'$/;"	v	class:ProviderFactory
invoice_series_list_display	./silver/admin.py	/^    def invoice_series_list_display(self, obj):$/;"	m	class:ProviderAdmin
invoice_starting_number	./silver/models/billing_entities/provider.py	/^    invoice_starting_number = models.PositiveIntegerField()$/;"	v	class:Provider
invoice_starting_number	./silver/tests/factories.py	/^    invoice_starting_number = 1$/;"	v	class:ProviderFactory
invoice_view_name	./silver/api/serializers/documents_serializers.py	/^                      invoice_view_name='invoice-detail', )$/;"	v	class:DocumentSerializer
irreversible_fields	./silver/models/payment_methods.py	/^    def irreversible_fields(self):$/;"	m	class:PaymentMethod
is_active	./silver/tests/factories.py	/^    is_active = True$/;"	v	class:AdminUserFactory
is_billed_first_time	./silver/models/subscriptions.py	/^    def is_billed_first_time(self):$/;"	m	class:Subscription
is_on_trial	./silver/models/subscriptions.py	/^    def is_on_trial(self):$/;"	m	class:Subscription
is_overdue	./silver/api/filters.py	/^    is_overdue = BooleanFilter(name='overdue', method='filter_is_overdue')$/;"	v	class:BillingDocumentFilter
is_staff	./silver/tests/factories.py	/^    is_staff = True$/;"	v	class:AdminUserFactory
is_superuser	./silver/tests/factories.py	/^    is_superuser = True$/;"	v	class:AdminUserFactory
issue	./silver/admin.py	/^    def issue(self, request, queryset):$/;"	m	class:InvoiceAdmin
issue	./silver/admin.py	/^    def issue(self, request, queryset):$/;"	m	class:ProformaAdmin
issue	./silver/models/documents/base.py	/^    def issue(self, issue_date=None, due_date=None):$/;"	m	class:BillingDocumentBase
issue	./silver/models/documents/invoice.py	/^    def issue(self, issue_date=None, due_date=None):$/;"	m	class:Invoice
issue	./silver/models/documents/proforma.py	/^    def issue(self, issue_date=None, due_date=None):$/;"	m	class:Proforma
issue_date	./silver/api/filters.py	/^    issue_date = DateFilter(name='issue_date', lookup_expr='iexact')$/;"	v	class:BillingDocumentFilter
issue_date	./silver/models/documents/base.py	/^    issue_date = models.DateField(null=True, blank=True, db_index=True)$/;"	v	class:BillingDocumentBase
issue_date	./silver/tests/factories.py	/^        issue_date=timezone.now().date(),$/;"	v	class:TransactionFactory.Meta
issue_date	./silver/tests/factories.py	/^    issue_date = factory.LazyAttribute($/;"	v	class:InvoiceFactory
issue_date	./silver/tests/factories.py	/^    issue_date = factory.LazyAttribute($/;"	v	class:ProformaFactory
kind	./silver/models/documents/base.py	/^    kind = models.CharField(get_billing_documents_kinds, max_length=8, db_index=True)$/;"	v	class:BillingDocumentBase
label	./silver/api/serializers/payment_methods_serializers.py	/^        label="Payment Processor"$/;"	v	class:PaymentMethodSerializer
last_access	./silver/models/transactions/transaction.py	/^    last_access = models.DateTimeField(null=True, blank=True)$/;"	v	class:Transaction
last_billing_date	./silver/models/subscriptions.py	/^    def last_billing_date(self):$/;"	m	class:Subscription
last_billing_log	./silver/models/subscriptions.py	/^    def last_billing_log(self):$/;"	m	class:Subscription
last_day_of_month	./silver/utils/dates.py	/^def last_day_of_month(date):$/;"	f
last_name	./silver/api/filters.py	/^    last_name = CharFilter(name='last_name', lookup_expr='icontains')$/;"	v	class:CustomerFilter
last_name	./silver/models/billing_entities/customer.py	/^    last_name = models.CharField($/;"	v	class:Customer
last_name	./silver/tests/factories.py	/^    last_name = factory.Sequence(lambda n: faker.last_name())$/;"	v	class:CustomerFactory
list	./silver/api/views/payment_method_views.py	/^    def list(self, request, *args, **kwargs):$/;"	m	class:PaymentMethodList
list_display	./silver/admin.py	/^    list_display = ('__unicode__', 'external_reference', 'related_invoice', 'related_proforma',$/;"	v	class:TransactionAdmin
list_display	./silver/admin.py	/^    list_display = ('customer', 'payment_processor', 'added_at', 'verified',$/;"	v	class:PaymentMethodAdmin
list_display	./silver/admin.py	/^    list_display = BillingDocumentAdmin.list_display + [$/;"	v	class:InvoiceAdmin
list_display	./silver/admin.py	/^    list_display = BillingDocumentAdmin.list_display + [$/;"	v	class:ProformaAdmin
list_display	./silver/admin.py	/^    list_display = ['__unicode__', 'customer_reference',$/;"	v	class:CustomerAdmin
list_display	./silver/admin.py	/^    list_display = ['__unicode__', 'invoice_series_list_display',$/;"	v	class:ProviderAdmin
list_display	./silver/admin.py	/^    list_display = ['customer', 'plan', 'last_billing_date', 'trial_end',$/;"	v	class:SubscriptionAdmin
list_display	./silver/admin.py	/^    list_display = ['metered_feature']$/;"	v	class:MeteredFeatureUnitsLogInLine
list_display	./silver/admin.py	/^    list_display = ['name', 'description', 'interval_display',$/;"	v	class:PlanAdmin
list_display	./silver/admin.py	/^    list_display = ['series_number', 'customer', 'state',$/;"	v	class:BillingDocumentAdmin
list_filter	./silver/admin.py	/^    list_filter = ('customer', 'verified', 'canceled',$/;"	v	class:PaymentMethodAdmin
list_filter	./silver/admin.py	/^    list_filter = ('payment_method__customer', 'state',$/;"	v	class:TransactionAdmin
list_filter	./silver/admin.py	/^    list_filter = ('provider__company', 'state', 'customer', DueDateFilter)$/;"	v	class:BillingDocumentAdmin
list_filter	./silver/admin.py	/^    list_filter = ['plan', 'state', 'plan__provider', 'customer']$/;"	v	class:SubscriptionAdmin
list_filter	./silver/admin.py	/^    list_filter = ['provider']$/;"	v	class:PlanAdmin
logger	./silver/admin.py	/^logger = logging.getLogger('silver')$/;"	v
logger	./silver/api/views/subscription_views.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	./silver/documents_generator.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	./silver/management/commands/execute_transactions.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	./silver/management/commands/fetch_transactions_status.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	./silver/management/commands/generate_docs.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	./silver/management/commands/generate_pdfs.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	./silver/management/commands/seed.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	./silver/models/documents/base.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	./silver/models/subscriptions.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	./silver/models/transactions/transaction.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	./silver/payment_processors/mixins.py	/^logger = logging.getLogger(__name__)$/;"	v
lookup_expr	./silver/api/filters.py	/^                                      lookup_expr='icontains')$/;"	v	class:CustomerFilter
lookup_expr	./silver/api/filters.py	/^                                   lookup_expr='iexact')$/;"	v	class:CustomerFilter
lookup_expr	./silver/api/filters.py	/^                                  lookup_expr='icontains')$/;"	v	class:BillingDocumentFilter
lookup_expr	./silver/api/filters.py	/^                                  lookup_expr='icontains')$/;"	v	class:CustomerFilter
lookup_expr	./silver/api/filters.py	/^                        lookup_expr='icontains')$/;"	v	class:InvoiceFilter
lookup_expr	./silver/api/filters.py	/^                        lookup_expr='icontains')$/;"	v	class:ProformaFilter
lookup_expr	./silver/api/filters.py	/^        lookup_expr='iexact'$/;"	v	class:TransactionFilter
lookup_field	./silver/api/serializers/transaction_serializers.py	/^                                      lookup_field='payment_method',$/;"	v	class:TransactionSerializer
lookup_url_kwarg	./silver/api/serializers/billing_entities_serializers.py	/^        lookup_url_kwarg='customer_pk'$/;"	v	class:CustomerSerializer
lookup_url_kwarg	./silver/api/views/documents_views.py	/^    lookup_url_kwarg = 'pdf_pk'$/;"	v	class:PDFRetrieve
lookups	./silver/admin.py	/^    def lookups(self, request, model_admin):$/;"	m	class:DueDateFilter
manual_processor	./settings_test.py	/^manual_processor = 'manual'$/;"	v
manual_processor	./silver/tests/fixtures.py	/^manual_processor = 'manual'$/;"	v
mark_as_clean	./silver/models/documents/pdf.py	/^    def mark_as_clean(self):$/;"	m	class:PDF
mark_as_dirty	./silver/models/documents/pdf.py	/^    def mark_as_dirty(self):$/;"	m	class:PDF
mark_for_generation	./silver/models/documents/base.py	/^    def mark_for_generation(self):$/;"	m	class:BillingDocumentBase
mark_pdf_for_generation	./silver/admin.py	/^    def mark_pdf_for_generation(self, request, queryset):$/;"	m	class:InvoiceAdmin
mark_pdf_for_generation	./silver/admin.py	/^    def mark_pdf_for_generation(self, request, queryset):$/;"	m	class:ProformaAdmin
max_amount	./silver/api/filters.py	/^    max_amount = NumberFilter(name='amount', lookup_expr='lte')$/;"	v	class:TransactionFilter
max_digits	./silver/migrations/0008_auto_20150430_1804.py	/^                max_digits=19,$/;"	v	class:Migration
max_length	./silver/models/billing_entities/customer.py	/^        max_length=128,$/;"	v	class:Customer.Meta
max_length	./silver/models/billing_entities/provider.py	/^        max_length=128,$/;"	v	class:Provider.Meta
max_length	./silver/models/billing_entities/provider.py	/^        max_length=20,$/;"	v	class:Provider.Meta
max_length	./silver/models/plans.py	/^        max_length=200,$/;"	v	class:MeteredFeature
max_page_size	./silver/api/pagination.py	/^    max_page_size = 100$/;"	v	class:LinkHeaderPagination
message	./silver/validators.py	/^    message=u'Reference must not contain commas.'$/;"	v
meta	./silver/api/serializers/billing_entities_serializers.py	/^    meta = JSONField(required=False)$/;"	v	class:CustomerSerializer
meta	./silver/api/serializers/billing_entities_serializers.py	/^    meta = JSONField(required=False)$/;"	v	class:ProviderSerializer
meta	./silver/api/serializers/subscriptions_serializers.py	/^    meta = JSONField(required=False)$/;"	v	class:SubscriptionSerializer
meta	./silver/models/billing_entities/base.py	/^    meta = JSONField(blank=True, null=True, default={})$/;"	v	class:BaseBillingEntity
meta	./silver/models/subscriptions.py	/^    meta = JSONField(blank=True, null=True)$/;"	v	class:Subscription
meta	./silver/tests/factories.py	/^    meta = factory.Sequence(lambda n: {"something": [n, n + 1]})$/;"	v	class:CustomerFactory
meta	./silver/tests/factories.py	/^    meta = factory.Sequence(lambda n: {"something": [n, n + 1]})$/;"	v	class:ProviderFactory
meta	./silver/tests/factories.py	/^    meta = factory.Sequence(lambda n: {"something": [n, n + 1]})$/;"	v	class:SubscriptionFactory
metadata	./silver/admin.py	/^def metadata(obj):$/;"	f
metered_feature	./silver/models/subscriptions.py	/^    metered_feature = models.ForeignKey('MeteredFeature', related_name='consumed')$/;"	v	class:MeteredFeatureUnitsLog
metered_feature	./silver/tests/factories.py	/^    metered_feature = factory.SubFactory(MeteredFeatureFactory)$/;"	v	class:MeteredFeatureUnitsLogFactory
metered_features	./silver/api/serializers/plans_serializer.py	/^    metered_features = MeteredFeatureSerializer($/;"	v	class:PlanSerializer
metered_features	./silver/models/plans.py	/^    metered_features = models.ManyToManyField($/;"	v	class:Plan
metered_features	./silver/tests/factories.py	/^    def metered_features(self, create, extracted, **kwargs):$/;"	m	class:PlanFactory
metered_features	./silver/tests/factories.py	/^    def metered_features(self, create, extracted, **kwargs):$/;"	m	class:SubscriptionFactory
metered_features_billed_up_to	./silver/models/subscriptions.py	/^    metered_features_billed_up_to = models.DateField($/;"	v	class:BillingLog
min_amount	./silver/api/filters.py	/^    min_amount = NumberFilter(name='amount', lookup_expr='gte')$/;"	v	class:TransactionFilter
model	./silver/admin.py	/^        model = DocumentEntry$/;"	v	class:DocumentEntryForm.Meta
model	./silver/admin.py	/^        model = Invoice$/;"	v	class:InvoiceForm.Meta
model	./silver/admin.py	/^        model = Plan$/;"	v	class:PlanForm.Meta
model	./silver/admin.py	/^        model = Proforma$/;"	v	class:ProformaForm.Meta
model	./silver/admin.py	/^        model = Transaction$/;"	v	class:TransactionForm.Meta
model	./silver/admin.py	/^    model = BillingLog$/;"	v	class:BillingLogInLine
model	./silver/admin.py	/^    model = DocumentEntry$/;"	v	class:DocumentEntryInline
model	./silver/admin.py	/^    model = MeteredFeatureUnitsLog$/;"	v	class:MeteredFeatureUnitsLogInLine
model	./silver/api/filters.py	/^        model = BillingDocumentBase$/;"	v	class:BillingDocumentFilter.Meta
model	./silver/api/filters.py	/^        model = Customer$/;"	v	class:CustomerFilter.Meta
model	./silver/api/filters.py	/^        model = Invoice$/;"	v	class:InvoiceFilter.Meta
model	./silver/api/filters.py	/^        model = MeteredFeature$/;"	v	class:MeteredFeaturesFilter.Meta
model	./silver/api/filters.py	/^        model = PaymentMethod$/;"	v	class:PaymentMethodFilter.Meta
model	./silver/api/filters.py	/^        model = Plan$/;"	v	class:PlanFilter.Meta
model	./silver/api/filters.py	/^        model = Proforma$/;"	v	class:ProformaFilter.Meta
model	./silver/api/filters.py	/^        model = Provider$/;"	v	class:ProviderFilter.Meta
model	./silver/api/filters.py	/^        model = Subscription$/;"	v	class:SubscriptionFilter.Meta
model	./silver/api/filters.py	/^        model = Transaction$/;"	v	class:TransactionFilter.Meta
model	./silver/api/serializers/billing_entities_serializers.py	/^        model = Customer$/;"	v	class:CustomerSerializer.Meta
model	./silver/api/serializers/billing_entities_serializers.py	/^        model = Provider$/;"	v	class:ProviderSerializer.Meta
model	./silver/api/serializers/common.py	/^        model = MeteredFeature$/;"	v	class:MeteredFeatureSerializer.Meta
model	./silver/api/serializers/documents_serializers.py	/^        model = BillingDocumentBase$/;"	v	class:DocumentSerializer.Meta
model	./silver/api/serializers/documents_serializers.py	/^        model = DocumentEntry$/;"	v	class:DocumentEntrySerializer.Meta
model	./silver/api/serializers/documents_serializers.py	/^        model = Invoice$/;"	v	class:InvoiceSerializer.Meta
model	./silver/api/serializers/documents_serializers.py	/^        model = Proforma$/;"	v	class:ProformaSerializer.Meta
model	./silver/api/serializers/payment_methods_serializers.py	/^        model = PaymentMethod$/;"	v	class:PaymentMethodSerializer.Meta
model	./silver/api/serializers/plans_serializer.py	/^        model = Plan$/;"	v	class:PlanSerializer.Meta
model	./silver/api/serializers/product_codes_serializer.py	/^        model = ProductCode$/;"	v	class:ProductCodeSerializer.Meta
model	./silver/api/serializers/subscriptions_serializers.py	/^        model = MeteredFeatureUnitsLog$/;"	v	class:MFUnitsLogSerializer.Meta
model	./silver/api/serializers/subscriptions_serializers.py	/^        model = Subscription$/;"	v	class:SubscriptionSerializer.Meta
model	./silver/api/serializers/transaction_serializers.py	/^        model = Transaction$/;"	v	class:TransactionSerializer.Meta
model	./silver/api/views/billing_entities_views.py	/^    model = Customer$/;"	v	class:CustomerDetail
model	./silver/api/views/plan_views.py	/^    model = MeteredFeature$/;"	v	class:PlanMeteredFeatures
model	./silver/api/views/plan_views.py	/^    model = Plan$/;"	v	class:PlanDetail
model	./silver/api/views/subscription_views.py	/^    model = MeteredFeature$/;"	v	class:MeteredFeatureDetail
model	./silver/tests/factories.py	/^        model = Customer$/;"	v	class:CustomerFactory.Meta
model	./silver/tests/factories.py	/^        model = DocumentEntry$/;"	v	class:DocumentEntryFactory.Meta
model	./silver/tests/factories.py	/^        model = Invoice$/;"	v	class:InvoiceFactory.Meta
model	./silver/tests/factories.py	/^        model = MeteredFeature$/;"	v	class:MeteredFeatureFactory.Meta
model	./silver/tests/factories.py	/^        model = MeteredFeatureUnitsLog$/;"	v	class:MeteredFeatureUnitsLogFactory.Meta
model	./silver/tests/factories.py	/^        model = PDF$/;"	v	class:PDFFactory.Meta
model	./silver/tests/factories.py	/^        model = PaymentMethod$/;"	v	class:PaymentMethodFactory.Meta
model	./silver/tests/factories.py	/^        model = Plan$/;"	v	class:PlanFactory.Meta
model	./silver/tests/factories.py	/^        model = ProductCode$/;"	v	class:ProductCodeFactory.Meta
model	./silver/tests/factories.py	/^        model = Proforma$/;"	v	class:ProformaFactory.Meta
model	./silver/tests/factories.py	/^        model = Provider$/;"	v	class:ProviderFactory.Meta
model	./silver/tests/factories.py	/^        model = Subscription$/;"	v	class:SubscriptionFactory.Meta
model	./silver/tests/factories.py	/^        model = Transaction$/;"	v	class:TransactionFactory.Meta
model	./silver/tests/factories.py	/^        model = get_user_model()$/;"	v	class:AdminUserFactory.Meta
model_field	./silver/api/serializers/payment_methods_serializers.py	/^        model_field=PaymentMethod()._meta.get_field('payment_processor'),$/;"	v	class:PaymentMethodSerializer
model_name	./silver/migrations/0001_initial.py	/^            model_name='billinglog',$/;"	v	class:Migration
model_name	./silver/migrations/0001_initial.py	/^            model_name='documententry',$/;"	v	class:Migration
model_name	./silver/migrations/0001_initial.py	/^            model_name='invoice',$/;"	v	class:Migration
model_name	./silver/migrations/0001_initial.py	/^            model_name='meteredfeature',$/;"	v	class:Migration
model_name	./silver/migrations/0001_initial.py	/^            model_name='meteredfeatureunitslog',$/;"	v	class:Migration
model_name	./silver/migrations/0001_initial.py	/^            model_name='plan',$/;"	v	class:Migration
model_name	./silver/migrations/0001_initial.py	/^            model_name='proforma',$/;"	v	class:Migration
model_name	./silver/migrations/0002_auto_20150416_1009.py	/^            model_name='documententry',$/;"	v	class:Migration
model_name	./silver/migrations/0002_auto_20150416_1009.py	/^            model_name='plan',$/;"	v	class:Migration
model_name	./silver/migrations/0003_auto_20150417_0634.py	/^            model_name='customer',$/;"	v	class:Migration
model_name	./silver/migrations/0003_auto_20150417_0634.py	/^            model_name='provider',$/;"	v	class:Migration
model_name	./silver/migrations/0003_auto_20150417_0634.py	/^            model_name='subscription',$/;"	v	class:Migration
model_name	./silver/migrations/0004_auto_20150429_1731.py	/^            model_name='invoice',$/;"	v	class:Migration
model_name	./silver/migrations/0004_auto_20150429_1731.py	/^            model_name='proforma',$/;"	v	class:Migration
model_name	./silver/migrations/0006_auto_20150430_1457.py	/^            model_name='invoice',$/;"	v	class:Migration
model_name	./silver/migrations/0006_auto_20150430_1457.py	/^            model_name='meteredfeature',$/;"	v	class:Migration
model_name	./silver/migrations/0006_auto_20150430_1457.py	/^            model_name='plan',$/;"	v	class:Migration
model_name	./silver/migrations/0006_auto_20150430_1457.py	/^            model_name='proforma',$/;"	v	class:Migration
model_name	./silver/migrations/0007_auto_20150430_1549.py	/^            model_name='plan',$/;"	v	class:Migration
model_name	./silver/migrations/0008_auto_20150430_1804.py	/^            model_name='documententry',$/;"	v	class:Migration
model_name	./silver/migrations/0008_auto_20150430_1804.py	/^            model_name='meteredfeature',$/;"	v	class:Migration
model_name	./silver/migrations/0008_auto_20150430_1804.py	/^            model_name='meteredfeatureunitslog',$/;"	v	class:Migration
model_name	./silver/migrations/0008_auto_20150430_1804.py	/^            model_name='plan',$/;"	v	class:Migration
model_name	./silver/migrations/0009_auto_20150717_1428.py	/^            model_name='plan',$/;"	v	class:Migration
model_name	./silver/migrations/0009_auto_20150717_1428.py	/^            model_name='subscription',$/;"	v	class:Migration
model_name	./silver/migrations/0031_auto_20170125_1343.py	/^            model_name='customer',$/;"	v	class:Migration
model_name	./silver/migrations/0031_auto_20170125_1343.py	/^            model_name='invoice',$/;"	v	class:Migration
model_name	./silver/migrations/0031_auto_20170125_1343.py	/^            model_name='proforma',$/;"	v	class:Migration
model_name	./silver/migrations/0033_auto_20170203_1540.py	/^            model_name='paymentmethod',$/;"	v	class:Migration
model_name	./silver/migrations/0034_auto_20170203_1644.py	/^            model_name='Document',$/;"	v	class:Migration
model_name	./silver/migrations/0035_auto_20170206_0941.py	/^            model_name='customer',$/;"	v	class:Migration
model_name	./silver/migrations/0035_auto_20170206_0941.py	/^            model_name='invoice',$/;"	v	class:Migration
model_name	./silver/migrations/0035_auto_20170206_0941.py	/^            model_name='plan',$/;"	v	class:Migration
model_name	./silver/migrations/0035_auto_20170206_0941.py	/^            model_name='proforma',$/;"	v	class:Migration
model_name	./silver/migrations/0035_auto_20170206_0941.py	/^            model_name='provider',$/;"	v	class:Migration
model_name	./silver/migrations/0035_auto_20170206_0941.py	/^            model_name='transaction',$/;"	v	class:Migration
model_name	./silver/migrations/0037_auto_20170719_1159.py	/^            model_name='customer',$/;"	v	class:Migration
model_name	./silver/migrations/0037_auto_20170719_1159.py	/^            model_name='invoice',$/;"	v	class:Migration
model_name	./silver/migrations/0037_auto_20170719_1159.py	/^            model_name='paymentmethod',$/;"	v	class:Migration
model_name	./silver/migrations/0037_auto_20170719_1159.py	/^            model_name='plan',$/;"	v	class:Migration
model_name	./silver/migrations/0037_auto_20170719_1159.py	/^            model_name='proforma',$/;"	v	class:Migration
model_name	./silver/migrations/0037_auto_20170719_1159.py	/^            model_name='provider',$/;"	v	class:Migration
model_name	./silver/migrations/0037_auto_20170719_1159.py	/^            model_name='subscription',$/;"	v	class:Migration
model_name	./silver/migrations/0037_auto_20170719_1159.py	/^            model_name='transaction',$/;"	v	class:Migration
model_name	./silver/migrations/0038_auto_20170724_0708.py	/^            model_name='pdf',$/;"	v	class:Migration
model_name	./silver/migrations/0039_auto_20170811_1101.py	/^            model_name='billinglog',$/;"	v	class:Migration
model_name	./silver/migrations/0040_auto_20170925_0646.py	/^            model_name='billinglog',$/;"	v	class:Migration
model_name	./silver/migrations/0040_auto_20170925_0646.py	/^            model_name='paymentmethod',$/;"	v	class:Migration
model_name	./silver/migrations/0040_auto_20170925_0646.py	/^            model_name='plan',$/;"	v	class:Migration
model_name	./silver/migrations/0040_auto_20170925_0646.py	/^            model_name='provider',$/;"	v	class:Migration
model_name	./silver/migrations/0041_auto_20170929_1045.py	/^            model_name='billinglog',$/;"	v	class:Migration
model_name	./silver/migrations/0041_auto_20170929_1045.py	/^            model_name='plan',$/;"	v	class:Migration
model_name	./silver/migrations/0041_auto_20170929_1045.py	/^            model_name='provider',$/;"	v	class:Migration
model_name	./silver/migrations/0042_compute_totals_in_document_view.py	/^            model_name='Document',$/;"	v	class:Migration
model_name	./silver/migrations/0042_compute_totals_in_document_view.py	/^            model_name='invoice',$/;"	v	class:Migration
model_name	./silver/migrations/0042_compute_totals_in_document_view.py	/^            model_name='proforma',$/;"	v	class:Migration
model_name	./silver/migrations/0043_auto_20171113_1048.py	/^            model_name='billinglog',$/;"	v	class:Migration
model_name	./silver/migrations/0043_auto_20171113_1048.py	/^            model_name='documententry',$/;"	v	class:Migration
model_name	./silver/migrations/0043_auto_20171113_1048.py	/^            model_name='invoice',$/;"	v	class:Migration
model_name	./silver/migrations/0043_auto_20171113_1048.py	/^            model_name='proforma',$/;"	v	class:Migration
model_name	./silver/migrations/0043_auto_20171113_1048.py	/^            model_name='transaction',$/;"	v	class:Migration
model_name	./silver/migrations/0044_auto_20171115_1809.py	/^            model_name='billinglog',$/;"	v	class:Migration
move_documents_to_billing_document	./silver/migrations/0043_auto_20171113_1048.py	/^def move_documents_to_billing_document(apps, schema_editor):$/;"	f
move_pdf_from_documents_to_model	./silver/migrations/0036_auto_20170514_1627.py	/^    def move_pdf_from_documents_to_model(apps, schema_editor):$/;"	m	class:Migration
move_pdf_from_model_to_documents	./silver/migrations/0036_auto_20170514_1627.py	/^    def move_pdf_from_model_to_documents(apps, schema_editor):$/;"	m	class:Migration
name	./silver/api/filters.py	/^        name='payment_method__payment_processor',$/;"	v	class:TransactionFilter
name	./silver/api/filters.py	/^    name = CharFilter(name='name', lookup_expr='icontains')$/;"	v	class:MeteredFeaturesFilter
name	./silver/api/filters.py	/^    name = CharFilter(name='name', lookup_expr='icontains')$/;"	v	class:PlanFilter
name	./silver/api/serializers/payment_methods_serializers.py	/^    name = serializers.CharField(max_length=64)$/;"	v	class:PaymentProcessorSerializer
name	./silver/api/urls.py	/^        name='pdf'),$/;"	v
name	./silver/api/urls.py	/^        name='proforma-entry-update'),$/;"	v
name	./silver/api/urls.py	/^        name='proforma-invoice'),$/;"	v
name	./silver/migrations/0001_initial.py	/^            name='BillingLog',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='Customer',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='DocumentEntry',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='Invoice',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='MeteredFeature',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='MeteredFeatureUnitsLog',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='Plan',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='ProductCode',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='Proforma',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='Provider',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='Subscription',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='invoice',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='meteredfeatureunitslog',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='product_code',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='proforma',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='provider',$/;"	v	class:Migration
name	./silver/migrations/0001_initial.py	/^            name='subscription',$/;"	v	class:Migration
name	./silver/migrations/0002_auto_20150416_1009.py	/^            name='description',$/;"	v	class:Migration
name	./silver/migrations/0002_auto_20150416_1009.py	/^            name='product_code',$/;"	v	class:Migration
name	./silver/migrations/0002_auto_20150416_1009.py	/^            name='unit',$/;"	v	class:Migration
name	./silver/migrations/0003_auto_20150417_0634.py	/^            name='meta',$/;"	v	class:Migration
name	./silver/migrations/0004_auto_20150429_1731.py	/^            name='series',$/;"	v	class:Migration
name	./silver/migrations/0005_auto_20150429_1732.py	/^            name='invoice',$/;"	v	class:Migration
name	./silver/migrations/0005_auto_20150429_1732.py	/^            name='proforma',$/;"	v	class:Migration
name	./silver/migrations/0006_auto_20150430_1457.py	/^            name='customer',$/;"	v	class:Migration
name	./silver/migrations/0006_auto_20150430_1457.py	/^            name='issue_date',$/;"	v	class:Migration
name	./silver/migrations/0006_auto_20150430_1457.py	/^            name='meteredfeature',$/;"	v	class:Migration
name	./silver/migrations/0006_auto_20150430_1457.py	/^            name='name',$/;"	v	class:Migration
name	./silver/migrations/0006_auto_20150430_1457.py	/^            name='number',$/;"	v	class:Migration
name	./silver/migrations/0006_auto_20150430_1457.py	/^            name='plan',$/;"	v	class:Migration
name	./silver/migrations/0006_auto_20150430_1457.py	/^            name='provider',$/;"	v	class:Migration
name	./silver/migrations/0006_auto_20150430_1457.py	/^            name='series',$/;"	v	class:Migration
name	./silver/migrations/0007_auto_20150430_1549.py	/^            name='trial_period_days',$/;"	v	class:Migration
name	./silver/migrations/0008_auto_20150430_1804.py	/^            name='amount',$/;"	v	class:Migration
name	./silver/migrations/0008_auto_20150430_1804.py	/^            name='consumed_units',$/;"	v	class:Migration
name	./silver/migrations/0008_auto_20150430_1804.py	/^            name='included_units',$/;"	v	class:Migration
name	./silver/migrations/0008_auto_20150430_1804.py	/^            name='included_units_during_trial',$/;"	v	class:Migration
name	./silver/migrations/0008_auto_20150430_1804.py	/^            name='price_per_unit',$/;"	v	class:Migration
name	./silver/migrations/0008_auto_20150430_1804.py	/^            name='quantity',$/;"	v	class:Migration
name	./silver/migrations/0008_auto_20150430_1804.py	/^            name='unit_price',$/;"	v	class:Migration
name	./silver/migrations/0009_auto_20150717_1428.py	/^            name='cancel_date',$/;"	v	class:Migration
name	./silver/migrations/0009_auto_20150717_1428.py	/^            name='invoice',$/;"	v	class:Migration
name	./silver/migrations/0009_auto_20150717_1428.py	/^            name='proforma',$/;"	v	class:Migration
name	./silver/migrations/0009_auto_20150717_1428.py	/^            name='trial_period_days',$/;"	v	class:Migration
name	./silver/migrations/0031_auto_20170125_1343.py	/^            name='currency',$/;"	v	class:Migration
name	./silver/migrations/0031_auto_20170125_1343.py	/^            name='transaction_currency',$/;"	v	class:Migration
name	./silver/migrations/0031_auto_20170125_1343.py	/^            name='transaction_xe_date',$/;"	v	class:Migration
name	./silver/migrations/0031_auto_20170125_1343.py	/^            name='transaction_xe_rate',$/;"	v	class:Migration
name	./silver/migrations/0033_auto_20170203_1540.py	/^            name='display_info',$/;"	v	class:Migration
name	./silver/migrations/0033_auto_20170203_1540.py	/^            name='valid_until',$/;"	v	class:Migration
name	./silver/migrations/0034_auto_20170203_1644.py	/^            name='transaction_currency',$/;"	v	class:Migration
name	./silver/migrations/0035_auto_20170206_0941.py	/^            name='country',$/;"	v	class:Migration
name	./silver/migrations/0035_auto_20170206_0941.py	/^            name='currency',$/;"	v	class:Migration
name	./silver/migrations/0035_auto_20170206_0941.py	/^            name='fail_code',$/;"	v	class:Migration
name	./silver/migrations/0035_auto_20170206_0941.py	/^            name='transaction_currency',$/;"	v	class:Migration
name	./silver/migrations/0035_auto_20170206_0941.py	/^            name='transaction_xe_rate',$/;"	v	class:Migration
name	./silver/migrations/0037_auto_20170719_1159.py	/^            name='archived_customer',$/;"	v	class:Migration
name	./silver/migrations/0037_auto_20170719_1159.py	/^            name='archived_provider',$/;"	v	class:Migration
name	./silver/migrations/0037_auto_20170719_1159.py	/^            name='country',$/;"	v	class:Migration
name	./silver/migrations/0037_auto_20170719_1159.py	/^            name='currency',$/;"	v	class:Migration
name	./silver/migrations/0037_auto_20170719_1159.py	/^            name='data',$/;"	v	class:Migration
name	./silver/migrations/0037_auto_20170719_1159.py	/^            name='meta',$/;"	v	class:Migration
name	./silver/migrations/0037_auto_20170719_1159.py	/^            name='transaction_currency',$/;"	v	class:Migration
name	./silver/migrations/0038_auto_20170724_0708.py	/^            name='dirty',$/;"	v	class:Migration
name	./silver/migrations/0038_auto_20170724_0708.py	/^            name='dirty_old',$/;"	v	class:Migration
name	./silver/migrations/0039_auto_20170811_1101.py	/^            name='total',$/;"	v	class:Migration
name	./silver/migrations/0040_auto_20170925_0646.py	/^            name='generate_documents_on_trial_end',$/;"	v	class:Migration
name	./silver/migrations/0040_auto_20170925_0646.py	/^            name='metered_features_billed_up_to',$/;"	v	class:Migration
name	./silver/migrations/0040_auto_20170925_0646.py	/^            name='payment_processor',$/;"	v	class:Migration
name	./silver/migrations/0040_auto_20170925_0646.py	/^            name='paymentmethod',$/;"	v	class:Migration
name	./silver/migrations/0040_auto_20170925_0646.py	/^            name='plan_billed_up_to',$/;"	v	class:Migration
name	./silver/migrations/0040_auto_20170925_0646.py	/^            name='prebill_plan',$/;"	v	class:Migration
name	./silver/migrations/0040_auto_20170925_0646.py	/^            name='separate_cycles_during_trial',$/;"	v	class:Migration
name	./silver/migrations/0040_auto_20170925_0646.py	/^            name='transaction',$/;"	v	class:Migration
name	./silver/migrations/0041_auto_20170929_1045.py	/^            name='created_at',$/;"	v	class:Migration
name	./silver/migrations/0041_auto_20170929_1045.py	/^            name='cycle_billing_duration',$/;"	v	class:Migration
name	./silver/migrations/0042_compute_totals_in_document_view.py	/^            name='_total',$/;"	v	class:Migration
name	./silver/migrations/0042_compute_totals_in_document_view.py	/^            name='_total_in_transaction_currency',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='BillingDocumentBase',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='Invoice',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='Proforma',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='billingdocumentbase',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='customer',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='invoice',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='invoice_old',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='pdf',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='proforma',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='proforma_old',$/;"	v	class:Migration
name	./silver/migrations/0043_auto_20171113_1048.py	/^            name='provider',$/;"	v	class:Migration
name	./silver/migrations/0044_auto_20171115_1809.py	/^            name='subscription',$/;"	v	class:Migration
name	./silver/models/billing_entities/customer.py	/^    def name(self):$/;"	m	class:Customer
name	./silver/models/billing_entities/provider.py	/^    name = models.CharField($/;"	v	class:Provider
name	./silver/models/plans.py	/^    name = models.CharField($/;"	v	class:MeteredFeature
name	./silver/models/plans.py	/^    name = models.CharField($/;"	v	class:Plan
name	./silver/tests/factories.py	/^    name = factory.Sequence(lambda n: faker.name())$/;"	v	class:PlanFactory
name	./silver/tests/factories.py	/^    name = factory.Sequence(lambda n: faker.name())$/;"	v	class:ProviderFactory
name	./silver/tests/factories.py	/^    name = factory.Sequence(lambda n: faker.sentence(nb_words=2))$/;"	v	class:MeteredFeatureFactory
namespace	./silver/urls.py	/^                               namespace='rest_framework')),$/;"	v
new_name	./silver/migrations/0038_auto_20170724_0708.py	/^            new_name='dirty_old'$/;"	v	class:Migration
new_name	./silver/migrations/0043_auto_20171113_1048.py	/^            new_name='invoice_old'$/;"	v	class:Migration
new_name	./silver/migrations/0043_auto_20171113_1048.py	/^            new_name='proforma_old'$/;"	v	class:Migration
next_month	./silver/utils/dates.py	/^def next_month(date):$/;"	f
not_implemented_view	./silver/tests/fixtures.py	/^def not_implemented_view(*args):$/;"	f
null	./silver/migrations/0001_initial.py	/^                null=True),$/;"	v	class:Migration
null	./silver/migrations/0008_auto_20150430_1804.py	/^                null=True),$/;"	v	class:Migration
null	./silver/migrations/0009_auto_20150717_1428.py	/^                null=True,$/;"	v	class:Migration
number	./silver/api/filters.py	/^    number = NumberFilter(name='number', lookup_expr='iexact')$/;"	v	class:BillingDocumentFilter
number	./silver/models/documents/base.py	/^    number = models.IntegerField(blank=True, null=True, db_index=True)$/;"	v	class:BillingDocumentBase
objects	./silver/models/documents/base.py	/^    objects = BillingDocumentManager.from_queryset(BillingDocumentQuerySet)()$/;"	v	class:BillingDocumentBase
objects	./silver/models/documents/invoice.py	/^    objects = InvoiceManager.from_queryset(BillingDocumentQuerySet)()$/;"	v	class:Invoice
objects	./silver/models/documents/proforma.py	/^    objects = ProformaManager.from_queryset(BillingDocumentQuerySet)()$/;"	v	class:Proforma
objects	./silver/models/payment_methods.py	/^    objects = InheritanceManager()$/;"	v	class:PaymentMethod
objects	./silver/models/plans.py	/^    objects = PlanManager()$/;"	v	class:Plan
old_name	./silver/migrations/0038_auto_20170724_0708.py	/^            old_name='dirty',$/;"	v	class:Migration
old_name	./silver/migrations/0043_auto_20171113_1048.py	/^            old_name='invoice',$/;"	v	class:Migration
old_name	./silver/migrations/0043_auto_20171113_1048.py	/^            old_name='proforma',$/;"	v	class:Migration
on_trial	./silver/models/subscriptions.py	/^    def on_trial(self, date):$/;"	m	class:Subscription
operations	./silver/migrations/0001_initial.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0002_auto_20150416_1009.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0003_auto_20150417_0634.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0004_auto_20150429_1731.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0005_auto_20150429_1732.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0006_auto_20150430_1457.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0007_auto_20150430_1549.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0008_auto_20150430_1804.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0009_auto_20150717_1428.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0031_auto_20170125_1343.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0032_auto_20170201_1342.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0033_auto_20170203_1540.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0034_auto_20170203_1644.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0035_auto_20170206_0941.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0036_auto_20170514_1627.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0037_auto_20170719_1159.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0038_auto_20170724_0708.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0039_auto_20170811_1101.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0040_auto_20170925_0646.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0041_auto_20170929_1045.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0042_compute_totals_in_document_view.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0043_auto_20171113_1048.py	/^    operations = [$/;"	v	class:Migration
operations	./silver/migrations/0044_auto_20171115_1809.py	/^    operations = [$/;"	v	class:Migration
option_list	./silver/management/commands/tweak_billing_log.py	/^    option_list = BaseCommand.option_list + ($/;"	v	class:Command
options	./silver/migrations/0001_initial.py	/^            options={$/;"	v	class:Migration
options	./silver/migrations/0005_auto_20150429_1732.py	/^            options={'ordering': ('-issue_date', 'series', 'number')},$/;"	v	class:Migration
options	./silver/migrations/0006_auto_20150430_1457.py	/^            options={'ordering': ('name',)},$/;"	v	class:Migration
options	./silver/migrations/0006_auto_20150430_1457.py	/^            options={'ordering': ['name', 'company']},$/;"	v	class:Migration
options	./silver/migrations/0009_auto_20150717_1428.py	/^            options={'ordering': ('-issue_date', 'series', '-number')},$/;"	v	class:Migration
options	./silver/migrations/0040_auto_20170925_0646.py	/^            options={'ordering': ['-id']},$/;"	v	class:Migration
options	./silver/migrations/0043_auto_20171113_1048.py	/^            options={$/;"	v	class:Migration
ordering	./silver/admin.py	/^    ordering = ['-created_at']$/;"	v	class:TransactionAdmin
ordering	./silver/api/views/documents_views.py	/^    ordering = ('-due_date', '-number')$/;"	v	class:DocumentList
ordering	./silver/api/views/payment_method_views.py	/^    ordering = ('-name', )$/;"	v	class:PaymentProcessorDetail
ordering	./silver/api/views/payment_method_views.py	/^    ordering = ('-name', )$/;"	v	class:PaymentProcessorList
ordering	./silver/models/billing_entities/customer.py	/^        ordering = ['first_name', 'last_name', 'company']$/;"	v	class:Customer.Meta
ordering	./silver/models/billing_entities/provider.py	/^        ordering = ['name', 'company']$/;"	v	class:Provider.Meta
ordering	./silver/models/documents/base.py	/^        ordering = ('-issue_date', 'series', '-number')$/;"	v	class:BillingDocumentBase.Meta
ordering	./silver/models/payment_methods.py	/^        ordering = ['-id']$/;"	v	class:PaymentMethod.Meta
ordering	./silver/models/plans.py	/^        ordering = ('name',)$/;"	v	class:MeteredFeature.Meta
ordering	./silver/models/plans.py	/^        ordering = ('name',)$/;"	v	class:Plan.Meta
ordering	./silver/models/subscriptions.py	/^        ordering = ['-billing_date']$/;"	v	class:BillingLog.Meta
ordering	./silver/models/transactions/transaction.py	/^        ordering = ['-id']$/;"	v	class:Transaction.Meta
ordering_fields	./silver/api/views/documents_views.py	/^    ordering_fields = ('due_date', )$/;"	v	class:DocumentList
overdue	./silver/models/documents/base.py	/^    def overdue(self):$/;"	m	class:BillingDocumentQuerySet
overdue_since_last_month	./silver/models/documents/base.py	/^    def overdue_since_last_month(self):$/;"	m	class:BillingDocumentQuerySet
page_size	./silver/api/pagination.py	/^    page_size = api_settings.PAGE_SIZE or 30$/;"	v	class:LinkHeaderPagination
page_size_query_param	./silver/api/pagination.py	/^    page_size_query_param = 'page_size'$/;"	v	class:LinkHeaderPagination
paginate_by	./silver/api/views/subscription_views.py	/^    paginate_by = None$/;"	v	class:MeteredFeatureUnitsLogDetail
paid_date	./silver/api/filters.py	/^    paid_date = DateFilter(name='due_date', lookup_expr='iexact')$/;"	v	class:BillingDocumentFilter
paid_date	./silver/models/documents/base.py	/^    paid_date = models.DateField(null=True, blank=True)$/;"	v	class:BillingDocumentBase
paid_date	./silver/tests/factories.py	/^    paid_date = factory.LazyAttribute($/;"	v	class:InvoiceFactory
paid_date	./silver/tests/factories.py	/^    paid_date = factory.LazyAttribute($/;"	v	class:ProformaFactory
parameter_name	./silver/admin.py	/^    parameter_name = 'due_date_filter'$/;"	v	class:DueDateFilter
password	./silver/tests/factories.py	/^    password = factory.PostGenerationMethodCall('set_password', 'admin')$/;"	v	class:AdminUserFactory
patch	./silver/api/views/plan_views.py	/^    def patch(self, request, *args, **kwargs):$/;"	m	class:PlanDetail
patch	./silver/api/views/subscription_views.py	/^    def patch(self, request, *args, **kwargs):$/;"	m	class:MeteredFeatureUnitsLogDetail
patch	./silver/api/views/subscription_views.py	/^    def patch(self, request, *args, **kwargs):$/;"	m	class:SubscriptionDetail
pay	./silver/admin.py	/^    def pay(self, request, queryset):$/;"	m	class:InvoiceAdmin
pay	./silver/admin.py	/^    def pay(self, request, queryset):$/;"	m	class:ProformaAdmin
pay	./silver/models/documents/base.py	/^    def pay(self, paid_date=None):$/;"	m	class:BillingDocumentBase
pay	./silver/models/documents/proforma.py	/^    def pay(self, paid_date=None):$/;"	m	class:Proforma
pay_transaction_view	./silver/views.py	/^def pay_transaction_view(request, transaction, expired=None):$/;"	f
pay_url	./silver/api/serializers/transaction_serializers.py	/^    pay_url = TransactionPaymentUrl(lookup_url_kwarg='token',$/;"	v	class:TransactionSerializer
payment_due_days	./silver/models/billing_entities/customer.py	/^    payment_due_days = models.PositiveIntegerField($/;"	v	class:Customer
payment_due_days	./silver/tests/factories.py	/^    payment_due_days = 5$/;"	v	class:CustomerFactory
payment_method	./silver/api/serializers/transaction_serializers.py	/^    payment_method = PaymentMethodUrl(view_name='payment-method-detail',$/;"	v	class:TransactionSerializer
payment_method	./silver/models/transactions/transaction.py	/^    payment_method = models.ForeignKey('PaymentMethod')$/;"	v	class:Transaction
payment_method	./silver/tests/factories.py	/^    payment_method = factory.SubFactory(PaymentMethodFactory)$/;"	v	class:TransactionFactory
payment_method_class	./silver/payment_processors/base.py	/^    payment_method_class = None$/;"	v	class:PaymentProcessorBase
payment_methods	./silver/api/serializers/billing_entities_serializers.py	/^    payment_methods = serializers.HyperlinkedIdentityField($/;"	v	class:CustomerSerializer
payment_processor	./silver/api/filters.py	/^    payment_processor = CharFilter($/;"	v	class:TransactionFilter
payment_processor	./silver/api/serializers/payment_methods_serializers.py	/^    payment_processor = serializers.SerializerMethodField()$/;"	v	class:PaymentMethodSerializer
payment_processor	./silver/models/payment_methods.py	/^    payment_processor = models.CharField(choices=PaymentProcessors.as_choices(),$/;"	v	class:PaymentMethod
payment_processor	./silver/models/transactions/transaction.py	/^    def payment_processor(self):$/;"	m	class:Transaction
payment_processor	./silver/tests/factories.py	/^    payment_processor = manual_processor$/;"	v	class:PaymentMethodFactory
payment_processor_name	./silver/api/serializers/payment_methods_serializers.py	/^    payment_processor_name = serializers.ModelField($/;"	v	class:PaymentMethodSerializer
pdf	./silver/models/documents/base.py	/^    pdf = ForeignKey(PDF, null=True)$/;"	v	class:BillingDocumentBase
pdf_file	./silver/models/documents/pdf.py	/^    pdf_file = FileField(null=True, blank=True, editable=False,$/;"	v	class:PDF
pdf_url	./silver/api/serializers/documents_serializers.py	/^    pdf_url = PDFUrl(view_name='pdf', source='*', read_only=True)$/;"	v	class:DocumentSerializer
pdf_url	./silver/api/serializers/documents_serializers.py	/^    pdf_url = PDFUrl(view_name='pdf', source='*', read_only=True)$/;"	v	class:InvoiceSerializer
pdf_url	./silver/api/serializers/documents_serializers.py	/^    pdf_url = PDFUrl(view_name='pdf', source='*', read_only=True)$/;"	v	class:ProformaSerializer
perform_action	./silver/admin.py	/^    def perform_action(self, request, action, queryset):$/;"	m	class:SubscriptionAdmin
perform_action	./silver/admin.py	/^    def perform_action(self, request, queryset, action):$/;"	m	class:BillingDocumentAdmin
perform_action	./silver/admin.py	/^    def perform_action(self, request, queryset, action, display_verb=None):$/;"	m	class:TransactionAdmin
perform_create	./silver/api/views/payment_method_views.py	/^    def perform_create(self, serializer):$/;"	m	class:PaymentMethodList
perform_create	./silver/api/views/transaction_views.py	/^    def perform_create(self, serializer):$/;"	m	class:TransactionList
permission_classes	./silver/api/views/billing_entities_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:CustomerDetail
permission_classes	./silver/api/views/billing_entities_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:CustomerList
permission_classes	./silver/api/views/billing_entities_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:ProviderListCreate
permission_classes	./silver/api/views/billing_entities_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:ProviderRetrieveUpdateDestroy
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAdminUser,)$/;"	v	class:PDFRetrieve
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:DocumentList
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:InvoiceEntryCreate
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:InvoiceEntryUpdateDestroy
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:InvoiceListCreate
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:InvoiceRetrieveUpdate
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:InvoiceStateHandler
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:ProformaEntryCreate
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:ProformaEntryUpdateDestroy
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:ProformaInvoiceRetrieveCreate
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:ProformaListCreate
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:ProformaRetrieveUpdate
permission_classes	./silver/api/views/documents_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:ProformaStateHandler
permission_classes	./silver/api/views/payment_method_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:PaymentMethodAction
permission_classes	./silver/api/views/payment_method_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:PaymentMethodDetail
permission_classes	./silver/api/views/payment_method_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:PaymentMethodList
permission_classes	./silver/api/views/payment_method_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:PaymentProcessorDetail
permission_classes	./silver/api/views/payment_method_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:PaymentProcessorList
permission_classes	./silver/api/views/plan_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:PlanDetail
permission_classes	./silver/api/views/plan_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:PlanList
permission_classes	./silver/api/views/plan_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:PlanMeteredFeatures
permission_classes	./silver/api/views/product_code_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:ProductCodeListCreate
permission_classes	./silver/api/views/product_code_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:ProductCodeRetrieveUpdate
permission_classes	./silver/api/views/subscription_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:MeteredFeatureDetail
permission_classes	./silver/api/views/subscription_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:MeteredFeatureList
permission_classes	./silver/api/views/subscription_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:MeteredFeatureUnitsLogDetail
permission_classes	./silver/api/views/subscription_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:SubscriptionActivate
permission_classes	./silver/api/views/subscription_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:SubscriptionCancel
permission_classes	./silver/api/views/subscription_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:SubscriptionDetail
permission_classes	./silver/api/views/subscription_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:SubscriptionList
permission_classes	./silver/api/views/subscription_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:SubscriptionReactivate
permission_classes	./silver/api/views/transaction_views.py	/^    permission_classes = (permissions.AllowAny,)$/;"	v	class:TransactionDetail
permission_classes	./silver/api/views/transaction_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:TransactionAction
permission_classes	./silver/api/views/transaction_views.py	/^    permission_classes = (permissions.IsAuthenticated,)$/;"	v	class:TransactionList
phone	./silver/models/billing_entities/base.py	/^    phone = models.CharField(max_length=15, blank=True, null=True)$/;"	v	class:BaseBillingEntity
phone	./silver/tests/factories.py	/^    phone = factory.Sequence(lambda n: faker.phone_number())$/;"	v	class:CustomerFactory
plan	./silver/api/filters.py	/^    plan = CharFilter(name='plan__name', lookup_expr='iexact')$/;"	v	class:SubscriptionFilter
plan	./silver/api/serializers/subscriptions_serializers.py	/^    plan = PlanSerializer(read_only=True)$/;"	v	class:SubscriptionDetailSerializer
plan	./silver/models/subscriptions.py	/^    plan = models.ForeignKey($/;"	v	class:Subscription
plan	./silver/tests/factories.py	/^    plan = factory.SubFactory(PlanFactory)$/;"	v	class:SubscriptionFactory
plan_billed_up_to	./silver/models/subscriptions.py	/^    plan_billed_up_to = models.DateField($/;"	v	class:BillingLog
post	./silver/api/views/documents_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:DocEntryCreate
post	./silver/api/views/documents_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:InvoiceEntryCreate
post	./silver/api/views/documents_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:ProformaEntryCreate
post	./silver/api/views/documents_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:ProformaInvoiceRetrieveCreate
post	./silver/api/views/payment_method_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:PaymentMethodAction
post	./silver/api/views/subscription_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:SubscriptionActivate
post	./silver/api/views/subscription_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:SubscriptionCancel
post	./silver/api/views/subscription_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:SubscriptionList
post	./silver/api/views/subscription_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:SubscriptionReactivate
post	./silver/api/views/transaction_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:TransactionAction
post	./silver/payment_processors/views.py	/^    def post(self, request):$/;"	m	class:GenericTransactionView
post_document_save	./silver/models/documents/base.py	/^def post_document_save(sender, instance, created=False, **kwargs):$/;"	f
post_invoice_save	./silver/models/documents/invoice.py	/^def post_invoice_save(sender, instance, created=False, **kwargs):$/;"	f
post_payment_method_save	./silver/models/payment_methods.py	/^def post_payment_method_save(sender, instance, **kwargs):$/;"	f
post_transaction_save	./silver/models/transactions/transaction.py	/^def post_transaction_save(sender, instance, **kwargs):$/;"	f
post_transition_callback	./silver/models/documents/base.py	/^def post_transition_callback(sender, instance, name, source, target, **kwargs):$/;"	f
post_transition_callback	./silver/models/transactions/transaction.py	/^def post_transition_callback(sender, instance, name, source, target, **kwargs):$/;"	f
pre_payment_method_save	./silver/models/payment_methods.py	/^def pre_payment_method_save(sender, instance=None, **kwargs):$/;"	f
pre_save	./silver/utils/models.py	/^    def pre_save(self, model_instance, add):$/;"	m	class:AutoDateTimeField
prebill_plan	./silver/models/billing_entities/provider.py	/^    prebill_plan = models.BooleanField($/;"	v	class:Provider
prebill_plan	./silver/models/plans.py	/^    prebill_plan = models.NullBooleanField($/;"	v	class:Plan
prebill_plan	./silver/models/subscriptions.py	/^    def prebill_plan(self):$/;"	m	class:Subscription
precision	./silver/tests/factories.py	/^                                                precision=4)$/;"	v	class:MeteredFeatureFactory.Meta
precision	./silver/tests/factories.py	/^                                                precision=4)$/;"	v	class:MeteredFeatureUnitsLogFactory.Meta
preserve_default	./silver/migrations/0040_auto_20170925_0646.py	/^            preserve_default=False,$/;"	v	class:Migration
preserve_default	./silver/migrations/0041_auto_20170929_1045.py	/^            preserve_default=False,$/;"	v	class:Migration
prev_month	./silver/utils/dates.py	/^def prev_month(date):$/;"	f
price_per_unit	./silver/models/plans.py	/^    price_per_unit = models.DecimalField($/;"	v	class:MeteredFeature
price_per_unit	./silver/tests/factories.py	/^    price_per_unit = factory.fuzzy.FuzzyDecimal(low=0.01, high=100.00,$/;"	v	class:MeteredFeatureFactory
private	./silver/api/filters.py	/^    private = BooleanFilter(name='private', lookup_expr='iexact')$/;"	v	class:PlanFilter
private	./silver/models/plans.py	/^    private = models.BooleanField(default=False,$/;"	v	class:Plan
private	./silver/tests/factories.py	/^    private = factory.Sequence(lambda n: n % 2 != 0)$/;"	v	class:PlanFactory
process	./silver/admin.py	/^    def process(self, request, queryset):$/;"	m	class:TransactionAdmin
process	./silver/models/transactions/transaction.py	/^    def process(self):$/;"	m	class:Transaction
processor	./silver/api/filters.py	/^    processor = CharFilter(name='payment_processor', lookup_expr='iexact')$/;"	v	class:PaymentMethodFilter
product_code	./silver/api/filters.py	/^    product_code = CharFilter(name='product_code', lookup_expr='icontains')$/;"	v	class:PlanFilter
product_code	./silver/api/serializers/common.py	/^    product_code = ProductCodeRelatedField()$/;"	v	class:MeteredFeatureSerializer
product_code	./silver/api/serializers/documents_serializers.py	/^    product_code = serializers.SlugRelatedField($/;"	v	class:DocumentEntrySerializer
product_code	./silver/api/serializers/plans_serializer.py	/^    product_code = ProductCodeRelatedField()$/;"	v	class:PlanSerializer
product_code	./silver/models/documents/entries.py	/^    product_code = models.ForeignKey('ProductCode', null=True, blank=True,$/;"	v	class:DocumentEntry
product_code	./silver/models/plans.py	/^    product_code = UnsavedForeignKey($/;"	v	class:MeteredFeature
product_code	./silver/models/plans.py	/^    product_code = models.ForeignKey($/;"	v	class:Plan
product_code	./silver/tests/factories.py	/^    product_code = factory.SubFactory(ProductCodeFactory)$/;"	v	class:DocumentEntryFactory
product_code	./silver/tests/factories.py	/^    product_code = factory.SubFactory(ProductCodeFactory)$/;"	v	class:MeteredFeatureFactory
product_code	./silver/tests/factories.py	/^    product_code = factory.SubFactory(ProductCodeFactory)$/;"	v	class:PlanFactory
proforma	./silver/models/documents/entries.py	/^    proforma = models.ForeignKey('BillingDocumentBase', related_name='proforma_entries',$/;"	v	class:DocumentEntry
proforma	./silver/models/subscriptions.py	/^    proforma = models.ForeignKey('BillingDocumentBase', null=True, blank=True,$/;"	v	class:BillingLog
proforma	./silver/models/transactions/transaction.py	/^    proforma = models.ForeignKey("BillingDocumentBase", null=True, blank=True,$/;"	v	class:Transaction
proforma	./silver/tests/factories.py	/^    proforma = factory.SubFactory($/;"	v	class:TransactionFactory
proforma_entries	./silver/api/serializers/documents_serializers.py	/^    proforma_entries = DocumentEntrySerializer(many=True)$/;"	v	class:ProformaSerializer
proforma_entries	./silver/tests/factories.py	/^    def proforma_entries(self, create, extracted, **kwargs):$/;"	m	class:ProformaFactory
proforma_link	./silver/admin.py	/^    def proforma_link(self, obj):$/;"	m	class:BillingLogInLine
proforma_pdf	./silver/admin.py	/^    def proforma_pdf(self, proforma):$/;"	m	class:ProformaAdmin
proforma_pdf	./silver/views.py	/^def proforma_pdf(request, proforma_id):$/;"	f
proforma_series	./silver/models/billing_entities/provider.py	/^    proforma_series = models.CharField($/;"	v	class:Provider
proforma_series	./silver/tests/factories.py	/^    proforma_series = 'ProformaSeries'$/;"	v	class:ProviderFactory
proforma_series_list_display	./silver/admin.py	/^    def proforma_series_list_display(self, obj):$/;"	m	class:ProviderAdmin
proforma_starting_number	./silver/models/billing_entities/provider.py	/^    proforma_starting_number = models.PositiveIntegerField($/;"	v	class:Provider
proforma_starting_number	./silver/tests/factories.py	/^    proforma_starting_number = 1$/;"	v	class:ProviderFactory
prorated	./silver/models/documents/entries.py	/^    prorated = models.BooleanField(default=False)$/;"	v	class:DocumentEntry
prorated	./silver/tests/factories.py	/^    prorated = factory.Sequence(lambda n: n % 2 == 1)$/;"	v	class:DocumentEntryFactory
provider	./silver/api/filters.py	/^    provider = CharFilter(name='provider__company', lookup_expr='icontains')$/;"	v	class:PlanFilter
provider	./silver/api/serializers/plans_serializer.py	/^    provider = serializers.HyperlinkedRelatedField($/;"	v	class:PlanSerializer
provider	./silver/api/serializers/transaction_serializers.py	/^    provider = ProviderUrl(view_name='provider-detail', read_only=True)$/;"	v	class:TransactionSerializer
provider	./silver/models/documents/base.py	/^    provider = models.ForeignKey('Provider')$/;"	v	class:BillingDocumentBase
provider	./silver/models/plans.py	/^    provider = models.ForeignKey($/;"	v	class:Plan
provider	./silver/models/subscriptions.py	/^    def provider(self):$/;"	m	class:Subscription
provider	./silver/models/transactions/transaction.py	/^    def provider(self):$/;"	m	class:Transaction
provider	./silver/models/transactions/transaction.py	/^    def provider(self, provider):$/;"	m	class:Transaction
provider	./silver/tests/factories.py	/^    provider = factory.SubFactory(ProviderFactory)$/;"	v	class:InvoiceFactory
provider	./silver/tests/factories.py	/^    provider = factory.SubFactory(ProviderFactory)$/;"	v	class:PlanFactory
provider	./silver/tests/factories.py	/^    provider = factory.SubFactory(ProviderFactory)$/;"	v	class:ProformaFactory
provider_company	./silver/api/filters.py	/^    provider_company = CharFilter(name='provider__company',$/;"	v	class:BillingDocumentFilter
provider_flow	./silver/models/plans.py	/^    def provider_flow(self):$/;"	m	class:Plan
provider_name	./silver/api/filters.py	/^    provider_name = CharFilter(name='provider__name', lookup_expr='icontains')$/;"	v	class:BillingDocumentFilter
provider_search_fields	./silver/admin.py	/^    provider_search_fields = ['provider__{field}'.format(field=field)$/;"	v	class:BillingDocumentAdmin
proxy	./silver/models/documents/invoice.py	/^        proxy = True$/;"	v	class:Invoice.Meta
proxy	./silver/models/documents/proforma.py	/^        proxy = True$/;"	v	class:Proforma.Meta
public_data	./silver/models/payment_methods.py	/^    def public_data(self):$/;"	m	class:PaymentMethod
put	./silver/api/views/documents_views.py	/^    def put(self, request, *args, **kwargs):$/;"	m	class:DocEntryUpdateDestroy
put	./silver/api/views/documents_views.py	/^    def put(self, request, *args, **kwargs):$/;"	m	class:InvoiceEntryUpdateDestroy
put	./silver/api/views/documents_views.py	/^    def put(self, request, *args, **kwargs):$/;"	m	class:InvoiceStateHandler
put	./silver/api/views/documents_views.py	/^    def put(self, request, *args, **kwargs):$/;"	m	class:ProformaEntryUpdateDestroy
put	./silver/api/views/documents_views.py	/^    def put(self, request, *args, **kwargs):$/;"	m	class:ProformaStateHandler
put	./silver/api/views/subscription_views.py	/^    def put(self, request, *args, **kwargs):$/;"	m	class:SubscriptionDetail
quantity	./silver/models/documents/entries.py	/^    quantity = models.DecimalField(max_digits=19, decimal_places=4,$/;"	v	class:DocumentEntry
quantity	./silver/tests/factories.py	/^    quantity = factory.fuzzy.FuzzyDecimal(low=1.00, high=50000.00, precision=4)$/;"	v	class:DocumentEntryFactory
queryset	./silver/admin.py	/^    def queryset(self, request, queryset):$/;"	m	class:DueDateFilter
queryset	./silver/api/serializers/documents_serializers.py	/^                           queryset=Customer.objects.all())$/;"	v	class:DocumentSerializer
queryset	./silver/api/serializers/documents_serializers.py	/^                           queryset=Customer.objects.all())$/;"	v	class:InvoiceSerializer
queryset	./silver/api/serializers/documents_serializers.py	/^                           queryset=Customer.objects.all())$/;"	v	class:ProformaSerializer
queryset	./silver/api/serializers/plans_serializer.py	/^        queryset=Provider.objects.all(),$/;"	v	class:PlanSerializer
queryset	./silver/api/serializers/subscriptions_serializers.py	/^                          queryset=Subscription.objects.all(), required=False)$/;"	v	class:SubscriptionSerializer
queryset	./silver/api/serializers/transaction_serializers.py	/^                                      queryset=PaymentMethod.objects.all())$/;"	v	class:TransactionSerializer
queryset	./silver/api/views/billing_entities_views.py	/^    queryset = Customer.objects.all()$/;"	v	class:CustomerList
queryset	./silver/api/views/billing_entities_views.py	/^    queryset = Provider.objects.all()$/;"	v	class:ProviderListCreate
queryset	./silver/api/views/billing_entities_views.py	/^    queryset = Provider.objects.all()$/;"	v	class:ProviderRetrieveUpdateDestroy
queryset	./silver/api/views/documents_views.py	/^        .prefetch_related('invoice_transactions')$/;"	v	class:InvoiceListCreate
queryset	./silver/api/views/documents_views.py	/^        .prefetch_related('proforma_transactions')$/;"	v	class:ProformaListCreate
queryset	./silver/api/views/documents_views.py	/^    queryset = DocumentEntry.objects.all()$/;"	v	class:InvoiceEntryCreate
queryset	./silver/api/views/documents_views.py	/^    queryset = DocumentEntry.objects.all()$/;"	v	class:InvoiceEntryUpdateDestroy
queryset	./silver/api/views/documents_views.py	/^    queryset = DocumentEntry.objects.all()$/;"	v	class:ProformaEntryCreate
queryset	./silver/api/views/documents_views.py	/^    queryset = DocumentEntry.objects.all()$/;"	v	class:ProformaEntryUpdateDestroy
queryset	./silver/api/views/documents_views.py	/^    queryset = Invoice.objects.all()$/;"	v	class:InvoiceRetrieveUpdate
queryset	./silver/api/views/documents_views.py	/^    queryset = PDF.objects.all()$/;"	v	class:PDFRetrieve
queryset	./silver/api/views/documents_views.py	/^    queryset = Proforma.objects.all()$/;"	v	class:ProformaRetrieveUpdate
queryset	./silver/api/views/plan_views.py	/^    queryset = Plan.objects.all().prefetch_related('metered_features')$/;"	v	class:PlanList
queryset	./silver/api/views/product_code_views.py	/^    queryset = ProductCode.objects.all()$/;"	v	class:ProductCodeListCreate
queryset	./silver/api/views/product_code_views.py	/^    queryset = ProductCode.objects.all()$/;"	v	class:ProductCodeRetrieveUpdate
queryset	./silver/api/views/subscription_views.py	/^    queryset = MeteredFeature.objects.all()$/;"	v	class:MeteredFeatureList
reactivate	./silver/admin.py	/^    def reactivate(self, request, queryset):$/;"	m	class:SubscriptionAdmin
read	./setup.py	/^def read(fname):$/;"	f
read_only	./silver/api/serializers/billing_entities_serializers.py	/^                                    read_only=True)$/;"	v	class:CustomerSerializer
read_only	./silver/api/serializers/documents_serializers.py	/^        read_only=True$/;"	v	class:DocumentEntrySerializer
read_only	./silver/api/serializers/payment_methods_serializers.py	/^                           read_only=True)$/;"	v	class:PaymentMethodSerializer
read_only	./silver/api/serializers/payment_methods_serializers.py	/^        read_only=True$/;"	v	class:PaymentProcessorSerializer
read_only_fields	./silver/api/serializers/documents_serializers.py	/^        read_only_fields = ('archived_provider', 'archived_customer', 'total',$/;"	v	class:InvoiceSerializer.Meta
read_only_fields	./silver/api/serializers/documents_serializers.py	/^        read_only_fields = ('archived_provider', 'archived_customer', 'total',$/;"	v	class:ProformaSerializer.Meta
read_only_fields	./silver/api/serializers/documents_serializers.py	/^        read_only_fields = fields$/;"	v	class:DocumentSerializer.Meta
read_only_fields	./silver/api/serializers/subscriptions_serializers.py	/^        read_only_fields = ('state', 'updateable_buckets')$/;"	v	class:SubscriptionSerializer.Meta
read_only_fields	./silver/api/serializers/transaction_serializers.py	/^        read_only_fields = ('customer', 'provider', 'can_be_consumed', 'pay_url',$/;"	v	class:TransactionSerializer.Meta
readonly_fields	./silver/admin.py	/^        readonly_fields = ['state', 'uuid', 'last_access']$/;"	v	class:TransactionForm.Meta
readonly_fields	./silver/admin.py	/^    readonly_fields = ('start_date', 'end_date', )$/;"	v	class:MeteredFeatureUnitsLogInLine
readonly_fields	./silver/admin.py	/^    readonly_fields = ('state', 'total', 'related_document')$/;"	v	class:BillingDocumentAdmin
readonly_fields	./silver/admin.py	/^    readonly_fields = ['state', ]$/;"	v	class:SubscriptionAdmin
readonly_fields	./silver/admin.py	/^    readonly_fields = fields$/;"	v	class:BillingLogInLine
redis	./silver/vendors/redis_server.py	/^redis = StrictRedis.from_url($/;"	v
reference	./silver/api/filters.py	/^    reference = MultipleCharFilter(name='customer_reference',$/;"	v	class:CustomerFilter
reference	./silver/api/filters.py	/^    reference = MultipleCharFilter(name='reference', lookup_expr='iexact')$/;"	v	class:SubscriptionFilter
reference	./silver/models/subscriptions.py	/^    reference = models.CharField($/;"	v	class:Subscription
reference	./silver/tests/factories.py	/^    reference = factory.Sequence(lambda n: "{}".format(n))$/;"	v	class:SubscriptionFactory
refund	./silver/models/transactions/transaction.py	/^    def refund(self, refund_code='default', refund_reason='Unknown refund reason'):$/;"	m	class:Transaction
refund_code	./silver/models/transactions/transaction.py	/^    refund_code = models.CharField($/;"	v	class:Transaction
refund_transaction	./silver/payment_processors/mixins.py	/^    def refund_transaction(self, transaction, payment_method=None):$/;"	m	class:BaseActionableProcessor
regex	./silver/validators.py	/^    regex=r'^[^,]*$',$/;"	v
related_document	./silver/models/documents/base.py	/^    related_document = models.ForeignKey('self', blank=True, null=True,$/;"	v	class:BillingDocumentBase
related_invoice	./silver/admin.py	/^    def related_invoice(self, obj):$/;"	m	class:TransactionAdmin
related_name	./silver/migrations/0001_initial.py	/^                related_name='billing_log_entries',$/;"	v	class:Migration
related_name	./silver/migrations/0001_initial.py	/^                related_name='invoice_entries',$/;"	v	class:Migration
related_name	./silver/migrations/0001_initial.py	/^                related_name='invoices',$/;"	v	class:Migration
related_name	./silver/migrations/0001_initial.py	/^                related_name='mf_log_entries',$/;"	v	class:Migration
related_name	./silver/migrations/0001_initial.py	/^                related_name='plans',$/;"	v	class:Migration
related_name	./silver/migrations/0001_initial.py	/^                related_name='proforma_entries',$/;"	v	class:Migration
related_name	./silver/migrations/0001_initial.py	/^                related_name='related_proforma',$/;"	v	class:Migration
related_name	./silver/models/documents/base.py	/^                                         related_name='reverse_related_document')$/;"	v	class:BillingDocumentBase.STATES
related_name	./silver/models/documents/entries.py	/^                                     related_name='invoices')$/;"	v	class:DocumentEntry
related_name	./silver/models/subscriptions.py	/^                                     related_name='billing_logs')$/;"	v	class:BillingLog
related_name	./silver/models/subscriptions.py	/^                                 related_name='proforma_billing_logs')$/;"	v	class:BillingLog
related_name	./silver/models/subscriptions.py	/^                                related_name='invoice_billing_logs')$/;"	v	class:BillingLog
related_proforma	./silver/admin.py	/^    def related_proforma(self, obj):$/;"	m	class:TransactionAdmin
render_template	./silver/payment_processors/views.py	/^    def render_template(self):$/;"	m	class:GenericTransactionView
request	./silver/payment_processors/views.py	/^    request = None$/;"	v	class:GenericTransactionView
reverse	./silver/tests/spec/test_transactions.py	/^def reverse(*args, **kwargs):$/;"	f
reverse_sql	./silver/migrations/0043_auto_20171113_1048.py	/^            reverse_sql=""$/;"	v	class:Migration
sales_tax_name	./silver/api/filters.py	/^    sales_tax_name = CharFilter(name='sales_tax_name', lookup_expr='icontains')$/;"	v	class:CustomerFilter
sales_tax_name	./silver/api/filters.py	/^    sales_tax_name = MultipleCharFilter(name='sales_tax_name', lookup_expr='icontains')$/;"	v	class:BillingDocumentFilter
sales_tax_name	./silver/models/billing_entities/customer.py	/^    sales_tax_name = models.CharField($/;"	v	class:Customer
sales_tax_name	./silver/models/documents/base.py	/^    sales_tax_name = models.CharField(max_length=64, blank=True, null=True)$/;"	v	class:BillingDocumentBase
sales_tax_name	./silver/tests/factories.py	/^    sales_tax_name = factory.Sequence(lambda n: 'VAT')$/;"	v	class:CustomerFactory
sales_tax_number	./silver/api/filters.py	/^    sales_tax_number = CharFilter(name='sales_tax_number',$/;"	v	class:CustomerFilter
sales_tax_number	./silver/models/billing_entities/customer.py	/^    sales_tax_number = models.CharField(max_length=64, blank=True, null=True)$/;"	v	class:Customer
sales_tax_percent	./silver/models/billing_entities/customer.py	/^    sales_tax_percent = models.DecimalField($/;"	v	class:Customer
sales_tax_percent	./silver/models/documents/base.py	/^    sales_tax_percent = models.DecimalField(max_digits=4, decimal_places=2,$/;"	v	class:BillingDocumentBase
sales_tax_percent	./silver/tests/factories.py	/^    sales_tax_percent = Decimal(1.0)$/;"	v	class:CustomerFactory
save	./silver/admin.py	/^    def save(self, commit=True, *args, **kwargs):$/;"	m	class:BillingDocumentForm
save	./silver/models/documents/base.py	/^    def save(self, *args, **kwargs):$/;"	m	class:BillingDocumentBase
save	./silver/models/subscriptions.py	/^    def save(self, *args, **kwargs):$/;"	m	class:MeteredFeatureUnitsLog
save	./silver/models/transactions/transaction.py	/^    def save(self, *args, **kwargs):$/;"	m	class:Transaction
search_fields	./silver/admin.py	/^    search_fields = ('external_reference',)$/;"	v	class:TransactionAdmin
search_fields	./silver/admin.py	/^    search_fields = (customer_search_fields + provider_search_fields +$/;"	v	class:BillingDocumentAdmin
search_fields	./silver/admin.py	/^    search_fields = ['customer__first_name', 'customer__last_name',$/;"	v	class:PaymentMethodAdmin
search_fields	./silver/admin.py	/^    search_fields = ['customer__first_name', 'customer__last_name',$/;"	v	class:SubscriptionAdmin
search_fields	./silver/admin.py	/^    search_fields = ['customer_reference', 'first_name', 'last_name', 'company',$/;"	v	class:CustomerAdmin
search_fields	./silver/admin.py	/^    search_fields = ['customer_reference', 'name', 'company', 'address_1',$/;"	v	class:ProviderAdmin
search_fields	./silver/admin.py	/^    search_fields = ['name']$/;"	v	class:PlanAdmin
separate_cycles_during_trial	./silver/models/billing_entities/provider.py	/^    separate_cycles_during_trial = models.BooleanField($/;"	v	class:Provider
separate_cycles_during_trial	./silver/models/plans.py	/^    separate_cycles_during_trial = models.NullBooleanField($/;"	v	class:Plan
separate_cycles_during_trial	./silver/models/subscriptions.py	/^    def separate_cycles_during_trial(self):$/;"	m	class:Subscription
serialize_hook	./silver/models/documents/base.py	/^    def serialize_hook(self, hook):$/;"	m	class:BillingDocumentBase
serializer_class	./silver/api/views/billing_entities_views.py	/^    serializer_class = CustomerSerializer$/;"	v	class:CustomerDetail
serializer_class	./silver/api/views/billing_entities_views.py	/^    serializer_class = CustomerSerializer$/;"	v	class:CustomerList
serializer_class	./silver/api/views/billing_entities_views.py	/^    serializer_class = ProviderSerializer$/;"	v	class:ProviderListCreate
serializer_class	./silver/api/views/billing_entities_views.py	/^    serializer_class = ProviderSerializer$/;"	v	class:ProviderRetrieveUpdateDestroy
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = DocumentEntrySerializer$/;"	v	class:InvoiceEntryCreate
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = DocumentEntrySerializer$/;"	v	class:InvoiceEntryUpdateDestroy
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = DocumentEntrySerializer$/;"	v	class:ProformaEntryCreate
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = DocumentEntrySerializer$/;"	v	class:ProformaEntryUpdateDestroy
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = DocumentSerializer$/;"	v	class:DocumentList
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = InvoiceSerializer$/;"	v	class:InvoiceListCreate
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = InvoiceSerializer$/;"	v	class:InvoiceRetrieveUpdate
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = InvoiceSerializer$/;"	v	class:InvoiceStateHandler
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = InvoiceSerializer$/;"	v	class:ProformaInvoiceRetrieveCreate
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = ProformaSerializer$/;"	v	class:ProformaListCreate
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = ProformaSerializer$/;"	v	class:ProformaRetrieveUpdate
serializer_class	./silver/api/views/documents_views.py	/^    serializer_class = ProformaSerializer$/;"	v	class:ProformaStateHandler
serializer_class	./silver/api/views/payment_method_views.py	/^    serializer_class = PaymentMethodSerializer$/;"	v	class:PaymentMethodDetail
serializer_class	./silver/api/views/payment_method_views.py	/^    serializer_class = PaymentMethodSerializer$/;"	v	class:PaymentMethodList
serializer_class	./silver/api/views/payment_method_views.py	/^    serializer_class = PaymentProcessorSerializer$/;"	v	class:PaymentProcessorDetail
serializer_class	./silver/api/views/payment_method_views.py	/^    serializer_class = PaymentProcessorSerializer$/;"	v	class:PaymentProcessorList
serializer_class	./silver/api/views/plan_views.py	/^    serializer_class = MeteredFeatureSerializer$/;"	v	class:PlanMeteredFeatures
serializer_class	./silver/api/views/plan_views.py	/^    serializer_class = PlanSerializer$/;"	v	class:PlanDetail
serializer_class	./silver/api/views/plan_views.py	/^    serializer_class = PlanSerializer$/;"	v	class:PlanList
serializer_class	./silver/api/views/product_code_views.py	/^    serializer_class = ProductCodeSerializer$/;"	v	class:ProductCodeListCreate
serializer_class	./silver/api/views/product_code_views.py	/^    serializer_class = ProductCodeSerializer$/;"	v	class:ProductCodeRetrieveUpdate
serializer_class	./silver/api/views/subscription_views.py	/^    serializer_class = MeteredFeatureSerializer$/;"	v	class:MeteredFeatureDetail
serializer_class	./silver/api/views/subscription_views.py	/^    serializer_class = MeteredFeatureSerializer$/;"	v	class:MeteredFeatureList
serializer_class	./silver/api/views/subscription_views.py	/^    serializer_class = SubscriptionDetailSerializer$/;"	v	class:SubscriptionDetail
serializer_class	./silver/api/views/subscription_views.py	/^    serializer_class = SubscriptionSerializer$/;"	v	class:SubscriptionList
serializer_class	./silver/api/views/transaction_views.py	/^    serializer_class = TransactionSerializer$/;"	v	class:TransactionDetail
serializer_class	./silver/api/views/transaction_views.py	/^    serializer_class = TransactionSerializer$/;"	v	class:TransactionList
serializer_class	./silver/tests/spec/test_payment_method.py	/^    serializer_class = PaymentMethodSerializer$/;"	v	class:TestPaymentMethodEndpoints
serializer_class	./silver/tests/spec/util/api_get_assert.py	/^    serializer_class = None$/;"	v	class:APIGetAssert
series	./silver/api/filters.py	/^    series = CharFilter(name='provider__invoice_series',$/;"	v	class:InvoiceFilter
series	./silver/api/filters.py	/^    series = CharFilter(name='provider__proforma_series',$/;"	v	class:ProformaFilter
series	./silver/models/documents/base.py	/^    series = models.CharField(max_length=20, blank=True, null=True,$/;"	v	class:BillingDocumentBase
series_number	./silver/models/documents/base.py	/^    def series_number(self):$/;"	m	class:BillingDocumentBase
series_number	./silver/models/documents/base.py	/^    series_number = property(series_number)$/;"	v	class:BillingDocumentBase
setUp	./silver/tests/admin/test_invoice.py	/^    def setUp(self):$/;"	m	class:InvoiceAdminTestCase
setUp	./silver/tests/admin/test_proforma.py	/^    def setUp(self):$/;"	m	class:ProformaAdminTestCase
setUp	./silver/tests/commands/test_generate_docs_args.py	/^    def setUp(self):$/;"	m	class:TestGenerateDocsArguments
setUp	./silver/tests/spec/test_customer.py	/^    def setUp(self):$/;"	m	class:TestCustomerEndpoints
setUp	./silver/tests/spec/test_documents.py	/^    def setUp(self):$/;"	m	class:TestDocumentEndpoints
setUp	./silver/tests/spec/test_invoice.py	/^    def setUp(self):$/;"	m	class:TestInvoiceEndpoints
setUp	./silver/tests/spec/test_metered_feature.py	/^    def setUp(self):$/;"	m	class:TestMeteredFeatureEndpoint
setUp	./silver/tests/spec/test_payment_method.py	/^    def setUp(self):$/;"	m	class:TestPaymentMethodEndpoints
setUp	./silver/tests/spec/test_payment_processors.py	/^    def setUp(self):$/;"	m	class:TestPaymentProcessorsEndpoints
setUp	./silver/tests/spec/test_payments.py	/^    def setUp(self):$/;"	m	class:TestPaymentUrls
setUp	./silver/tests/spec/test_plan.py	/^    def setUp(self):$/;"	m	class:TestPlanEndpoint
setUp	./silver/tests/spec/test_proforma.py	/^    def setUp(self):$/;"	m	class:TestProformaEndpoints
setUp	./silver/tests/spec/test_provider.py	/^    def setUp(self):$/;"	m	class:TestProviderEndpoints
setUp	./silver/tests/spec/test_subscription.py	/^    def setUp(self):$/;"	m	class:TestSubscriptionEndpoint
setUp	./silver/tests/spec/test_transactions.py	/^    def setUp(self):$/;"	m	class:TestTransactionEndpoint
setUp	./silver/tests/spec/util/api_get_assert.py	/^    def setUp(self):$/;"	m	class:APIGetAssert
settle	./silver/admin.py	/^    def settle(self, request, queryset):$/;"	m	class:TransactionAdmin
settle	./silver/models/transactions/transaction.py	/^    def settle(self, new_inactive_subscription=None):$/;"	m	class:Transaction
setup_automated_payments	./silver/payment_processors/mixins.py	/^    def setup_automated_payments(self, customer):$/;"	m	class:AutomaticProcessorMixin
should_be_billed	./silver/models/subscriptions.py	/^    def should_be_billed(self, billing_date, generate_documents_datetime=None):$/;"	m	class:Subscription
slug	./silver/models/billing_entities/base.py	/^    def slug(self):$/;"	m	class:BaseBillingEntity
slug_field	./silver/api/serializers/documents_serializers.py	/^        slug_field='value',$/;"	v	class:DocumentEntrySerializer
source	./silver/api/serializers/payment_methods_serializers.py	/^        source="payment_processor",$/;"	v	class:PaymentMethodSerializer
sql	./silver/migrations/0043_auto_20171113_1048.py	/^            sql="DROP VIEW IF EXISTS silver_document;",$/;"	v	class:Migration
start_date	./silver/api/serializers/subscriptions_serializers.py	/^    start_date = serializers.DateField(read_only=True)$/;"	v	class:MFUnitsLogSerializer
start_date	./silver/api/serializers/subscriptions_serializers.py	/^    start_date = serializers.DateField(required=False)$/;"	v	class:SubscriptionSerializer
start_date	./silver/models/documents/entries.py	/^    start_date = models.DateField(null=True, blank=True)$/;"	v	class:DocumentEntry
start_date	./silver/models/subscriptions.py	/^    start_date = models.DateField($/;"	v	class:Subscription
start_date	./silver/models/subscriptions.py	/^    start_date = models.DateField(editable=False)$/;"	v	class:MeteredFeatureUnitsLog
start_date	./silver/tests/factories.py	/^    start_date = datetime.date.today()$/;"	v	class:DocumentEntryFactory
start_date	./silver/tests/factories.py	/^    start_date = timezone.now().date()$/;"	v	class:SubscriptionFactory
state	./silver/api/filters.py	/^    state = CharFilter(name='state')$/;"	v	class:TransactionFilter
state	./silver/api/filters.py	/^    state = MultipleCharFilter(name='state', lookup_expr='iexact')$/;"	v	class:BillingDocumentFilter
state	./silver/models/billing_entities/base.py	/^    state = models.CharField(max_length=128, blank=True, null=True)$/;"	v	class:BaseBillingEntity
state	./silver/models/documents/base.py	/^    state = FSMField(choices=STATE_CHOICES, max_length=10, default=STATES.DRAFT,$/;"	v	class:BillingDocumentBase
state	./silver/models/subscriptions.py	/^    state = FSMField($/;"	v	class:Subscription
state	./silver/models/transactions/transaction.py	/^    state = FSMField(max_length=8, choices=States.as_choices(),$/;"	v	class:Transaction
state	./silver/tests/factories.py	/^        state=Invoice.STATES.ISSUED,$/;"	v	class:TransactionFactory.Meta
state	./silver/tests/factories.py	/^        state=Proforma.STATES.ISSUED,$/;"	v	class:TransactionFactory.Meta
state	./silver/tests/factories.py	/^    state = Invoice.STATES.DRAFT$/;"	v	class:InvoiceFactory
state	./silver/tests/factories.py	/^    state = Proforma.STATES.DRAFT$/;"	v	class:ProformaFactory
state	./silver/tests/factories.py	/^    state = Transaction.States.Initial$/;"	v	class:TransactionFactory
state	./silver/tests/factories.py	/^    state = factory.Sequence(lambda n: faker.city_part())$/;"	v	class:CustomerFactory
state	./silver/tests/factories.py	/^    state = factory.Sequence(lambda n: faker.city_part())$/;"	v	class:ProviderFactory
status_code	./silver/api/exceptions.py	/^    status_code = status.HTTP_409_CONFLICT$/;"	v	class:APIConflictException
storage	./silver/models/documents/pdf.py	/^                         storage=get_storage(), upload_to=get_upload_path)$/;"	v	class:PDF
string_to_list	./silver/management/commands/execute_transactions.py	/^def string_to_list(list_as_string):$/;"	f
string_to_list	./silver/management/commands/fetch_transactions_status.py	/^def string_to_list(list_as_string):$/;"	f
subscription	./silver/models/subscriptions.py	/^    subscription = models.ForeignKey('Subscription', related_name='mf_log_entries')$/;"	v	class:MeteredFeatureUnitsLog
subscription	./silver/models/subscriptions.py	/^    subscription = models.ForeignKey('Subscription',$/;"	v	class:BillingLog
subscription	./silver/tests/factories.py	/^    subscription = factory.SubFactory(SubscriptionFactory)$/;"	v	class:MeteredFeatureUnitsLogFactory
subscriptions	./silver/api/serializers/billing_entities_serializers.py	/^    subscriptions = SubscriptionUrl(view_name='subscription-detail', many=True,$/;"	v	class:CustomerSerializer
subscriptions	./silver/tests/factories.py	/^    def subscriptions(self, create, extracted, **kwargs):$/;"	m	class:ProformaFactory
sync_related_document_state	./silver/models/documents/base.py	/^    def sync_related_document_state(self):$/;"	m	class:BillingDocumentBase
tax	./silver/admin.py	/^def tax(obj):$/;"	f
tax_value	./silver/models/documents/base.py	/^    def tax_value(self):$/;"	m	class:BillingDocumentBase
tax_value	./silver/models/documents/entries.py	/^    def tax_value(self):$/;"	m	class:DocumentEntry
tax_value_in_transaction_currency	./silver/models/documents/base.py	/^    def tax_value_in_transaction_currency(self):$/;"	m	class:BillingDocumentBase
tax_value_in_transaction_currency	./silver/models/documents/entries.py	/^    def tax_value_in_transaction_currency(self):$/;"	m	class:DocumentEntry
template	./silver/payment_processors/views.py	/^    template = None$/;"	v	class:GenericTransactionView
template_slug	./silver/payment_processors/base.py	/^    template_slug = None$/;"	v	class:PaymentProcessorBase
test_2nd_sub_after_prorated_month_without_trial_without_consumed_units	./silver/tests/commands/test_generate_docs.py	/^    def test_2nd_sub_after_prorated_month_without_trial_without_consumed_units(self):$/;"	m	class:TestInvoiceGenerationCommand
test_2nd_sub_after_trial_with_consumed_units_underflow	./silver/tests/commands/test_generate_docs.py	/^    def test_2nd_sub_after_trial_with_consumed_units_underflow(self):$/;"	m	class:TestInvoiceGenerationCommand
test_2nd_sub_billing_after_trial_with_all_consumed_units_overflow	./silver/tests/commands/test_generate_docs.py	/^    def test_2nd_sub_billing_after_trial_with_all_consumed_units_overflow(self):$/;"	m	class:TestInvoiceGenerationCommand
test_2nd_sub_billing_after_trial_with_some_consumed_units_overflow	./silver/tests/commands/test_generate_docs.py	/^    def test_2nd_sub_billing_after_trial_with_some_consumed_units_overflow(self):$/;"	m	class:TestInvoiceGenerationCommand
test_POST_bulk_providers	./silver/tests/spec/test_provider.py	/^    def test_POST_bulk_providers(self):$/;"	m	class:TestProviderEndpoints
test_actions_failed_no_log_entries	./silver/tests/admin/test_invoice.py	/^    def test_actions_failed_no_log_entries(self):$/;"	m	class:InvoiceAdminTestCase
test_actions_failed_no_log_entries	./silver/tests/admin/test_proforma.py	/^    def test_actions_failed_no_log_entries(self):$/;"	m	class:ProformaAdminTestCase
test_actions_log_entries	./silver/tests/admin/test_invoice.py	/^    def test_actions_log_entries(self):$/;"	m	class:InvoiceAdminTestCase
test_actions_log_entries	./silver/tests/admin/test_proforma.py	/^    def test_actions_log_entries(self):$/;"	m	class:ProformaAdminTestCase
test_activate_subscription	./silver/tests/spec/test_subscription.py	/^    def test_activate_subscription(self):$/;"	m	class:TestSubscriptionEndpoint
test_activate_subscription_from_terminal_state	./silver/tests/spec/test_subscription.py	/^    def test_activate_subscription_from_terminal_state(self):$/;"	m	class:TestSubscriptionEndpoint
test_add_invoice_entry_in_canceled_state	./silver/tests/spec/test_invoice.py	/^    def test_add_invoice_entry_in_canceled_state(self):$/;"	m	class:TestInvoiceEndpoints
test_add_invoice_entry_in_issued_state	./silver/tests/spec/test_invoice.py	/^    def test_add_invoice_entry_in_issued_state(self):$/;"	m	class:TestInvoiceEndpoints
test_add_invoice_entry_in_paid_state	./silver/tests/spec/test_invoice.py	/^    def test_add_invoice_entry_in_paid_state(self):$/;"	m	class:TestInvoiceEndpoints
test_add_multiple_invoice_entries	./silver/tests/spec/test_invoice.py	/^    def test_add_multiple_invoice_entries(self):$/;"	m	class:TestInvoiceEndpoints
test_add_multiple_proforma_entries	./silver/tests/spec/test_proforma.py	/^    def test_add_multiple_proforma_entries(self):$/;"	m	class:TestProformaEndpoints
test_add_proforma_entry_in_canceled_state	./silver/tests/spec/test_proforma.py	/^    def test_add_proforma_entry_in_canceled_state(self):$/;"	m	class:TestProformaEndpoints
test_add_proforma_entry_in_issued_state	./silver/tests/spec/test_proforma.py	/^    def test_add_proforma_entry_in_issued_state(self):$/;"	m	class:TestProformaEndpoints
test_add_proforma_entry_in_paid_state	./silver/tests/spec/test_proforma.py	/^    def test_add_proforma_entry_in_paid_state(self):$/;"	m	class:TestProformaEndpoints
test_add_single_invoice_entry	./silver/tests/spec/test_invoice.py	/^    def test_add_single_invoice_entry(self):$/;"	m	class:TestInvoiceEndpoints
test_add_single_proforma_entry	./silver/tests/spec/test_proforma.py	/^    def test_add_single_proforma_entry(self):$/;"	m	class:TestProformaEndpoints
test_add_transaction	./silver/tests/spec/test_transactions.py	/^    def test_add_transaction(self):$/;"	m	class:TestTransactionEndpoint
test_add_transaction_with_amount_greater_than_what_should_be_charged	./silver/tests/spec/test_transactions.py	/^    def test_add_transaction_with_amount_greater_than_what_should_be_charged(self):$/;"	m	class:TestTransactionEndpoint
test_add_transaction_with_currency_different_from_document	./silver/tests/spec/test_transactions.py	/^    def test_add_transaction_with_currency_different_from_document(self):$/;"	m	class:TestTransactionEndpoint
test_add_transaction_with_documents_for_a_different_customer	./silver/tests/spec/test_transactions.py	/^    def test_add_transaction_with_documents_for_a_different_customer(self):$/;"	m	class:TestTransactionEndpoint
test_add_transaction_with_draft_document	./silver/tests/spec/test_transactions.py	/^    def test_add_transaction_with_draft_document(self):$/;"	m	class:TestTransactionEndpoint
test_add_transaction_with_unrelated_documents	./silver/tests/spec/test_transactions.py	/^    def test_add_transaction_with_unrelated_documents(self):$/;"	m	class:TestTransactionEndpoint
test_add_transaction_without_currency_and_amount	./silver/tests/spec/test_transactions.py	/^    def test_add_transaction_without_currency_and_amount(self):$/;"	m	class:TestTransactionEndpoint
test_add_transaction_without_documents	./silver/tests/spec/test_transactions.py	/^    def test_add_transaction_without_documents(self):$/;"	m	class:TestTransactionEndpoint
test_already_billed_sub_w_cb_on_trial_last_billing_date	./silver/tests/unit/test_subscription.py	/^    def test_already_billed_sub_w_cb_on_trial_last_billing_date(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_already_billed_sub_wa_cb	./silver/tests/unit/test_subscription.py	/^    def test_already_billed_sub_wa_cb(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_already_billed_sub_wa_cb_on_trial_last_billing_date	./silver/tests/unit/test_subscription.py	/^    def test_already_billed_sub_wa_cb_on_trial_last_billing_date(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_cancel_action	./silver/tests/spec/test_payment_method.py	/^    def test_cancel_action(self):$/;"	m	class:TestPaymentMethodEndpoints
test_cancel_action	./silver/tests/spec/test_transactions.py	/^    def test_cancel_action(self):$/;"	m	class:TestTransactionEndpoint
test_cancel_action_failed_void	./silver/tests/spec/test_payment_method.py	/^    def test_cancel_action_failed_void(self):$/;"	m	class:TestPaymentMethodEndpoints
test_cancel_invoice_in_canceled_state	./silver/tests/spec/test_invoice.py	/^    def test_cancel_invoice_in_canceled_state(self):$/;"	m	class:TestInvoiceEndpoints
test_cancel_invoice_in_draft_state	./silver/tests/spec/test_invoice.py	/^    def test_cancel_invoice_in_draft_state(self):$/;"	m	class:TestInvoiceEndpoints
test_cancel_invoice_in_paid_state	./silver/tests/spec/test_invoice.py	/^    def test_cancel_invoice_in_paid_state(self):$/;"	m	class:TestInvoiceEndpoints
test_cancel_invoice_with_default_dates	./silver/tests/spec/test_invoice.py	/^    def test_cancel_invoice_with_default_dates(self):$/;"	m	class:TestInvoiceEndpoints
test_cancel_invoice_with_provided_date	./silver/tests/spec/test_invoice.py	/^    def test_cancel_invoice_with_provided_date(self):$/;"	m	class:TestInvoiceEndpoints
test_cancel_issued_invoice_with_related_proforma	./silver/tests/unit/test_invoice.py	/^    def test_cancel_issued_invoice_with_related_proforma(self):$/;"	m	class:TestInvoice
test_cancel_issued_proforma_with_related_invoice	./silver/tests/unit/test_proforma.py	/^    def test_cancel_issued_proforma_with_related_invoice(self):$/;"	m	class:TestProforma
test_cancel_proforma_in_canceled_state	./silver/tests/spec/test_proforma.py	/^    def test_cancel_proforma_in_canceled_state(self):$/;"	m	class:TestProformaEndpoints
test_cancel_proforma_in_draft_state	./silver/tests/spec/test_proforma.py	/^    def test_cancel_proforma_in_draft_state(self):$/;"	m	class:TestProformaEndpoints
test_cancel_proforma_in_paid_state	./silver/tests/spec/test_proforma.py	/^    def test_cancel_proforma_in_paid_state(self):$/;"	m	class:TestProformaEndpoints
test_cancel_proforma_with_default_dates	./silver/tests/spec/test_proforma.py	/^    def test_cancel_proforma_with_default_dates(self):$/;"	m	class:TestProformaEndpoints
test_cancel_proforma_with_provided_date	./silver/tests/spec/test_proforma.py	/^    def test_cancel_proforma_with_provided_date(self):$/;"	m	class:TestProformaEndpoints
test_cancel_sub_without_trial_at_end_of_billing_cycle	./silver/tests/commands/test_generate_docs.py	/^    def test_cancel_sub_without_trial_at_end_of_billing_cycle(self):$/;"	m	class:TestInvoiceGenerationCommand
test_cancel_subscription	./silver/tests/spec/test_subscription.py	/^    def test_cancel_subscription(self):$/;"	m	class:TestSubscriptionEndpoint
test_cancel_subscription_from_terminal_state	./silver/tests/spec/test_subscription.py	/^    def test_cancel_subscription_from_terminal_state(self):$/;"	m	class:TestSubscriptionEndpoint
test_canceled_sub_w_date_before_cancel_date	./silver/tests/unit/test_subscription.py	/^    def test_canceled_sub_w_date_before_cancel_date(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_canceled_sub_wa_consolidated_billing	./silver/tests/unit/test_subscription.py	/^    def test_canceled_sub_wa_consolidated_billing(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_canceled_subscription_with_metered_features_to_draft	./silver/tests/commands/test_generate_docs.py	/^    def test_canceled_subscription_with_metered_features_to_draft(self):$/;"	m	class:TestInvoiceGenerationCommand
test_canceled_subscription_with_trial_and_consumed_metered_features_draft	./silver/tests/commands/test_generate_docs.py	/^    def test_canceled_subscription_with_trial_and_consumed_metered_features_draft(self):$/;"	m	class:TestInvoiceGenerationCommand
test_canceled_subscription_with_trial_and_trial_overflow	./silver/tests/commands/test_generate_docs.py	/^    def test_canceled_subscription_with_trial_and_trial_overflow(self):$/;"	m	class:TestInvoiceGenerationCommand
test_canceled_subscription_with_trial_and_trial_underflow	./silver/tests/commands/test_generate_docs.py	/^    def test_canceled_subscription_with_trial_and_trial_underflow(self):$/;"	m	class:TestInvoiceGenerationCommand
test_clone_invoice_into_draft	./silver/tests/unit/test_invoice.py	/^    def test_clone_invoice_into_draft(self):$/;"	m	class:TestInvoice
test_clone_proforma_into_draft	./silver/tests/unit/test_proforma.py	/^    def test_clone_proforma_into_draft(self):$/;"	m	class:TestProforma
test_complete_payment_view_with_return_url	./silver/tests/spec/test_payments.py	/^    def test_complete_payment_view_with_return_url(self):$/;"	m	class:TestPaymentUrls
test_complete_payment_view_without_return_url	./silver/tests/spec/test_payments.py	/^    def test_complete_payment_view_without_return_url(self):$/;"	m	class:TestPaymentUrls
test_create_one_without_required_fields	./silver/tests/spec/test_transactions.py	/^    def test_create_one_without_required_fields(self):$/;"	m	class:TestTransactionEndpoint
test_create_plan	./silver/tests/spec/test_plan.py	/^    def test_create_plan(self):$/;"	m	class:TestPlanEndpoint
test_create_plan_without_required_fields	./silver/tests/spec/test_plan.py	/^    def test_create_plan_without_required_fields(self):$/;"	m	class:TestPlanEndpoint
test_create_post_customer	./silver/tests/spec/test_customer.py	/^    def test_create_post_customer(self):$/;"	m	class:TestCustomerEndpoints
test_create_post_customer_without_required_field	./silver/tests/spec/test_customer.py	/^    def test_create_post_customer_without_required_field(self):$/;"	m	class:TestCustomerEndpoints
test_create_post_metered_feature	./silver/tests/spec/test_metered_feature.py	/^    def test_create_post_metered_feature(self):$/;"	m	class:TestMeteredFeatureEndpoint
test_create_post_metered_feature_without_required_field	./silver/tests/spec/test_metered_feature.py	/^    def test_create_post_metered_feature_without_required_field(self):$/;"	m	class:TestMeteredFeatureEndpoint
test_create_post_subscription	./silver/tests/spec/test_subscription.py	/^    def test_create_post_subscription(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_post_subscription_description	./silver/tests/spec/test_subscription.py	/^    def test_create_post_subscription_description(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_post_subscription_reference	./silver/tests/spec/test_subscription.py	/^    def test_create_post_subscription_reference(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_post_subscription_with_invalid_trial_end	./silver/tests/spec/test_subscription.py	/^    def test_create_post_subscription_with_invalid_trial_end(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_subscription_mf_units_log_active_sub	./silver/tests/spec/test_subscription.py	/^    def test_create_subscription_mf_units_log_active_sub(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_subscription_mf_units_log_sub_canceled_at_end_of_month	./silver/tests/spec/test_subscription.py	/^    def test_create_subscription_mf_units_log_sub_canceled_at_end_of_month(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_subscription_mf_units_log_with_ended_sub	./silver/tests/spec/test_subscription.py	/^    def test_create_subscription_mf_units_log_with_ended_sub(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_subscription_mf_units_log_with_inactive_sub	./silver/tests/spec/test_subscription.py	/^    def test_create_subscription_mf_units_log_with_inactive_sub(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_subscription_mf_units_log_with_insufficient_data	./silver/tests/spec/test_subscription.py	/^    def test_create_subscription_mf_units_log_with_insufficient_data(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_subscription_mf_units_log_with_invalid_date	./silver/tests/spec/test_subscription.py	/^    def test_create_subscription_mf_units_log_with_invalid_date(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_subscription_mf_units_log_with_sub_canceled_before	./silver/tests/spec/test_subscription.py	/^    def test_create_subscription_mf_units_log_with_sub_canceled_before(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_subscription_mf_units_log_with_sub_canceled_now	./silver/tests/spec/test_subscription.py	/^    def test_create_subscription_mf_units_log_with_sub_canceled_now(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_subscription_mf_units_log_with_unexisting_mf	./silver/tests/spec/test_subscription.py	/^    def test_create_subscription_mf_units_log_with_unexisting_mf(self):$/;"	m	class:TestSubscriptionEndpoint
test_create_transaction_with_not_allowed_currency	./silver/tests/integration/test_transactions_payment_methods.py	/^    def test_create_transaction_with_not_allowed_currency(self):$/;"	m	class:TestDocumentsTransactions
test_create_transactions_on_payment_method_verify	./silver/tests/integration/test_transactions_payment_methods.py	/^    def test_create_transactions_on_payment_method_verify(self):$/;"	m	class:TestDocumentsTransactions
test_create_transactions_on_verified_payment_method_creation	./silver/tests/integration/test_transactions_payment_methods.py	/^    def test_create_transactions_on_verified_payment_method_creation(self):$/;"	m	class:TestDocumentsTransactions
test_customer_currency_used_for_transaction_currency	./silver/tests/unit/test_invoice.py	/^    def test_customer_currency_used_for_transaction_currency(self):$/;"	m	class:TestInvoice
test_customer_currency_used_for_transaction_currency	./silver/tests/unit/test_proforma.py	/^    def test_customer_currency_used_for_transaction_currency(self):$/;"	m	class:TestProforma
test_delete_customer	./silver/tests/spec/test_customer.py	/^    def test_delete_customer(self):$/;"	m	class:TestCustomerEndpoints
test_delete_invoice	./silver/tests/spec/test_invoice.py	/^    def test_delete_invoice(self):$/;"	m	class:TestInvoiceEndpoints
test_delete_invoice_entry	./silver/tests/spec/test_invoice.py	/^    def test_delete_invoice_entry(self):$/;"	m	class:TestInvoiceEndpoints
test_delete_plan	./silver/tests/spec/test_plan.py	/^    def test_delete_plan(self):$/;"	m	class:TestPlanEndpoint
test_delete_plan_unexisting	./silver/tests/spec/test_plan.py	/^    def test_delete_plan_unexisting(self):$/;"	m	class:TestPlanEndpoint
test_delete_proforma	./silver/tests/spec/test_proforma.py	/^    def test_delete_proforma(self):$/;"	m	class:TestProformaEndpoints
test_delete_proforma_entry	./silver/tests/spec/test_proforma.py	/^    def test_delete_proforma_entry(self):$/;"	m	class:TestProformaEndpoints
test_delete_provider	./silver/tests/spec/test_provider.py	/^    def test_delete_provider(self):$/;"	m	class:TestProviderEndpoints
test_delete_unexisting_customer	./silver/tests/spec/test_customer.py	/^    def test_delete_unexisting_customer(self):$/;"	m	class:TestCustomerEndpoints
test_delete_unexisting_provider	./silver/tests/spec/test_provider.py	/^    def test_delete_unexisting_provider(self):$/;"	m	class:TestProviderEndpoints
test_documents_list_case_1	./silver/tests/spec/test_documents.py	/^    def test_documents_list_case_1(self):$/;"	m	class:TestDocumentEndpoints
test_documents_list_case_2	./silver/tests/spec/test_documents.py	/^    def test_documents_list_case_2(self):$/;"	m	class:TestDocumentEndpoints
test_draft_invoice_series_number	./silver/tests/unit/test_invoice.py	/^    def test_draft_invoice_series_number(self):$/;"	m	class:TestInvoice
test_draft_proforma_series_number	./silver/tests/unit/test_proforma.py	/^    def test_draft_proforma_series_number(self):$/;"	m	class:TestProforma
test_edit_invoice_in_canceled_state	./silver/tests/spec/test_invoice.py	/^    def test_edit_invoice_in_canceled_state(self):$/;"	m	class:TestInvoiceEndpoints
test_edit_invoice_in_issued_state	./silver/tests/spec/test_invoice.py	/^    def test_edit_invoice_in_issued_state(self):$/;"	m	class:TestInvoiceEndpoints
test_edit_invoice_in_paid_state	./silver/tests/spec/test_invoice.py	/^    def test_edit_invoice_in_paid_state(self):$/;"	m	class:TestInvoiceEndpoints
test_edit_patch_customer	./silver/tests/spec/test_customer.py	/^    def test_edit_patch_customer(self):$/;"	m	class:TestCustomerEndpoints
test_edit_proforma_in_canceled_state	./silver/tests/spec/test_proforma.py	/^    def test_edit_proforma_in_canceled_state(self):$/;"	m	class:TestProformaEndpoints
test_edit_proforma_in_issued_state	./silver/tests/spec/test_proforma.py	/^    def test_edit_proforma_in_issued_state(self):$/;"	m	class:TestProformaEndpoints
test_edit_proforma_in_paid_state	./silver/tests/spec/test_proforma.py	/^    def test_edit_proforma_in_paid_state(self):$/;"	m	class:TestProformaEndpoints
test_edit_put_customer	./silver/tests/spec/test_customer.py	/^    def test_edit_put_customer(self):$/;"	m	class:TestCustomerEndpoints
test_encoding	./silver/tests/unit/test_payment_method_serializer.py	/^    def test_encoding(self):$/;"	m	class:TestPaymentMethodSerializer
test_end_subscription	./silver/tests/spec/test_subscription.py	/^    def test_end_subscription(self):$/;"	m	class:TestSubscriptionEndpoint
test_end_subscription_from_terminal_state	./silver/tests/spec/test_subscription.py	/^    def test_end_subscription_from_terminal_state(self):$/;"	m	class:TestSubscriptionEndpoint
test_exception_logging	./silver/tests/commands/test_execute_transactions.py	/^    def test_exception_logging(self, mock_logger):$/;"	m	class:TestExecuteTransactionsCommand
test_fetch_transaction_status_call	./silver/tests/commands/test_update_transactions_status.py	/^    def test_fetch_transaction_status_call(self):$/;"	m	class:TestUpdateTransactionsStatusCommand
test_fetch_transaction_status_transactions_filtering	./silver/tests/commands/test_update_transactions_status.py	/^    def test_fetch_transaction_status_transactions_filtering(self):$/;"	m	class:TestUpdateTransactionsStatusCommand
test_filter_canceled	./silver/tests/spec/test_payment_method.py	/^    def test_filter_canceled(self):$/;"	m	class:TestPaymentMethodEndpoints
test_filter_min_max_amount	./silver/tests/spec/test_transactions.py	/^    def test_filter_min_max_amount(self):$/;"	m	class:TestTransactionEndpoint
test_filter_payment_method	./silver/tests/spec/test_transactions.py	/^    def test_filter_payment_method(self):$/;"	m	class:TestTransactionEndpoint
test_filter_processor	./silver/tests/spec/test_payment_method.py	/^    def test_filter_processor(self):$/;"	m	class:TestPaymentMethodEndpoints
test_filter_verified	./silver/tests/spec/test_payment_method.py	/^    def test_filter_verified(self):$/;"	m	class:TestPaymentMethodEndpoints
test_full_month_with_consumed_units	./silver/tests/commands/test_generate_docs.py	/^    def test_full_month_with_consumed_units(self):$/;"	m	class:TestInvoiceGenerationCommand
test_full_month_without_consumed_units	./silver/tests/commands/test_generate_docs.py	/^    def test_full_month_without_consumed_units(self):$/;"	m	class:TestInvoiceGenerationCommand
test_gen_active_and_canceled_selection	./silver/tests/commands/test_generate_docs.py	/^    def test_gen_active_and_canceled_selection(self):$/;"	m	class:TestInvoiceGenerationCommand
test_gen_consolidated_billing_with_consumed_mfs	./silver/tests/commands/test_generate_docs.py	/^    def test_gen_consolidated_billing_with_consumed_mfs(self):$/;"	m	class:TestInvoiceGenerationCommand
test_gen_consolidated_billing_without_mfs	./silver/tests/commands/test_generate_docs.py	/^    def test_gen_consolidated_billing_without_mfs(self):$/;"	m	class:TestInvoiceGenerationCommand
test_gen_for_non_consolidated_billing_with_consumed_units	./silver/tests/commands/test_generate_docs.py	/^    def test_gen_for_non_consolidated_billing_with_consumed_units(self):$/;"	m	class:TestInvoiceGenerationCommand
test_gen_for_non_consolidated_billing_without_consumed_units	./silver/tests/commands/test_generate_docs.py	/^    def test_gen_for_non_consolidated_billing_without_consumed_units(self):$/;"	m	class:TestInvoiceGenerationCommand
test_gen_for_single_canceled_subscription_during_trial	./silver/tests/commands/test_generate_docs.py	/^    def test_gen_for_single_canceled_subscription_during_trial(self):$/;"	m	class:TestInvoiceGenerationCommand
test_gen_mixed_states_for_multiple_providers	./silver/tests/commands/test_generate_docs.py	/^    def test_gen_mixed_states_for_multiple_providers(self):$/;"	m	class:TestInvoiceGenerationCommand
test_gen_proforma_to_issued_state_for_one_provider	./silver/tests/commands/test_generate_docs.py	/^    def test_gen_proforma_to_issued_state_for_one_provider(self):$/;"	m	class:TestInvoiceGenerationCommand
test_generate_docs_date_argparser	./silver/tests/commands/test_generate_docs_args.py	/^    def test_generate_docs_date_argparser(self):$/;"	m	class:TestGenerateDocsArguments
test_generate_docs_date_options	./silver/tests/commands/test_generate_docs_args.py	/^    def test_generate_docs_date_options(self):$/;"	m	class:TestGenerateDocsArguments
test_generate_docs_date_sub_argparser	./silver/tests/commands/test_generate_docs_args.py	/^    def test_generate_docs_date_sub_argparser(self):$/;"	m	class:TestGenerateDocsArguments
test_generate_docs_date_sub_options	./silver/tests/commands/test_generate_docs_args.py	/^    def test_generate_docs_date_sub_options(self):$/;"	m	class:TestGenerateDocsArguments
test_generate_docs_no_args	./silver/tests/commands/test_generate_docs_args.py	/^    def test_generate_docs_no_args(self):$/;"	m	class:TestGenerateDocsArguments
test_generate_docs_subscription_argparser	./silver/tests/commands/test_generate_docs_args.py	/^    def test_generate_docs_subscription_argparser(self):$/;"	m	class:TestGenerateDocsArguments
test_generate_docs_subscription_options	./silver/tests/commands/test_generate_docs_args.py	/^    def test_generate_docs_subscription_options(self):$/;"	m	class:TestGenerateDocsArguments
test_generate_pdf_task	./silver/tests/tasks/test_generate_pdfs.py	/^def test_generate_pdf_task(mock_http_response, mock_get_template, settings,$/;"	f
test_generate_pdfs_task	./silver/tests/tasks/test_generate_pdfs.py	/^def test_generate_pdfs_task(monkeypatch):$/;"	f
test_get_customer_detail	./silver/tests/spec/test_customer.py	/^    def test_get_customer_detail(self):$/;"	m	class:TestCustomerEndpoints
test_get_customer_detail_unexisting	./silver/tests/spec/test_customer.py	/^    def test_get_customer_detail_unexisting(self):$/;"	m	class:TestCustomerEndpoints
test_get_customer_list	./silver/tests/spec/test_customer.py	/^    def test_get_customer_list(self):$/;"	m	class:TestCustomerEndpoints
test_get_detail	./silver/tests/spec/test_payment_method.py	/^    def test_get_detail(self):$/;"	m	class:TestPaymentMethodEndpoints
test_get_detail_no_customer	./silver/tests/spec/test_payment_method.py	/^    def test_get_detail_no_customer(self):$/;"	m	class:TestPaymentMethodEndpoints
test_get_detail_no_payment_method	./silver/tests/spec/test_payment_method.py	/^    def test_get_detail_no_payment_method(self):$/;"	m	class:TestPaymentMethodEndpoints
test_get_invoice	./silver/tests/spec/test_invoice.py	/^    def test_get_invoice(self, mocked_settings):$/;"	m	class:TestInvoiceEndpoints
test_get_invoices	./silver/tests/spec/test_invoice.py	/^    def test_get_invoices(self):$/;"	m	class:TestInvoiceEndpoints
test_get_jwt_token	./silver/tests/unit/test_payments_util.py	/^    def test_get_jwt_token(self):$/;"	m	class:TestPaymentsUtilMethods
test_get_listing	./silver/tests/spec/test_payment_method.py	/^    def test_get_listing(self):$/;"	m	class:TestPaymentMethodEndpoints
test_get_listing_no_customer	./silver/tests/spec/test_payment_method.py	/^    def test_get_listing_no_customer(self):$/;"	m	class:TestPaymentMethodEndpoints
test_get_metered_feature_list	./silver/tests/spec/test_metered_feature.py	/^    def test_get_metered_feature_list(self):$/;"	m	class:TestMeteredFeatureEndpoint
test_get_payment_complete_url	./silver/tests/unit/test_payments_util.py	/^    def test_get_payment_complete_url(self):$/;"	m	class:TestPaymentsUtilMethods
test_get_payment_url	./silver/tests/unit/test_payments_util.py	/^    def test_get_payment_url(self):$/;"	m	class:TestPaymentsUtilMethods
test_get_plan_detail	./silver/tests/spec/test_plan.py	/^    def test_get_plan_detail(self):$/;"	m	class:TestPlanEndpoint
test_get_plan_detail_unexisting	./silver/tests/spec/test_plan.py	/^    def test_get_plan_detail_unexisting(self):$/;"	m	class:TestPlanEndpoint
test_get_plan_list	./silver/tests/spec/test_plan.py	/^    def test_get_plan_list(self):$/;"	m	class:TestPlanEndpoint
test_get_proforma	./silver/tests/spec/test_proforma.py	/^    def test_get_proforma(self, mocked_settings):$/;"	m	class:TestProformaEndpoints
test_get_proformas	./silver/tests/spec/test_proforma.py	/^    def test_get_proformas(self):$/;"	m	class:TestProformaEndpoints
test_get_provider	./silver/tests/spec/test_provider.py	/^    def test_get_provider(self):$/;"	m	class:TestProviderEndpoints
test_get_providers	./silver/tests/spec/test_provider.py	/^    def test_get_providers(self):$/;"	m	class:TestProviderEndpoints
test_get_subscription_detail	./silver/tests/spec/test_subscription.py	/^    def test_get_subscription_detail(self):$/;"	m	class:TestSubscriptionEndpoint
test_get_subscription_detail_unexisting	./silver/tests/spec/test_subscription.py	/^    def test_get_subscription_detail_unexisting(self):$/;"	m	class:TestSubscriptionEndpoint
test_get_subscription_list	./silver/tests/spec/test_subscription.py	/^    def test_get_subscription_list(self):$/;"	m	class:TestSubscriptionEndpoint
test_get_subscription_list_reference_filter	./silver/tests/spec/test_subscription.py	/^    def test_get_subscription_list_reference_filter(self):$/;"	m	class:TestSubscriptionEndpoint
test_get_transaction	./silver/tests/spec/test_transactions.py	/^    def test_get_transaction(self):$/;"	m	class:TestTransactionEndpoint
test_get_transaction_from_expired_token	./silver/tests/unit/test_payments_util.py	/^    def test_get_transaction_from_expired_token(self):$/;"	m	class:TestPaymentsUtilMethods
test_get_transaction_from_token	./silver/tests/unit/test_payments_util.py	/^    def test_get_transaction_from_token(self):$/;"	m	class:TestPaymentsUtilMethods
test_get_unexisting_provider	./silver/tests/spec/test_provider.py	/^    def test_get_unexisting_provider(self):$/;"	m	class:TestProviderEndpoints
test_illegal_state_change_when_in_draft_state	./silver/tests/spec/test_invoice.py	/^    def test_illegal_state_change_when_in_draft_state(self):$/;"	m	class:TestInvoiceEndpoints
test_illegal_state_change_when_in_draft_state	./silver/tests/spec/test_proforma.py	/^    def test_illegal_state_change_when_in_draft_state(self):$/;"	m	class:TestProformaEndpoints
test_illegal_state_change_when_in_issued_state	./silver/tests/spec/test_invoice.py	/^    def test_illegal_state_change_when_in_issued_state(self):$/;"	m	class:TestInvoiceEndpoints
test_illegal_state_change_when_in_issued_state	./silver/tests/spec/test_proforma.py	/^    def test_illegal_state_change_when_in_issued_state(self):$/;"	m	class:TestProformaEndpoints
test_illegal_state_change_when_in_paid_state	./silver/tests/spec/test_invoice.py	/^    def test_illegal_state_change_when_in_paid_state(self):$/;"	m	class:TestInvoiceEndpoints
test_illegal_state_change_when_in_paid_state	./silver/tests/spec/test_proforma.py	/^    def test_illegal_state_change_when_in_paid_state(self):$/;"	m	class:TestProformaEndpoints
test_invalid_transaction_action	./silver/tests/spec/test_transactions.py	/^    def test_invalid_transaction_action(self):$/;"	m	class:TestTransactionEndpoint
test_invoice_currency_used_for_transaction_currency	./silver/tests/unit/test_invoice.py	/^    def test_invoice_currency_used_for_transaction_currency(self):$/;"	m	class:TestInvoice
test_invoice_due_this_month_queryset	./silver/tests/unit/test_invoice.py	/^    def test_invoice_due_this_month_queryset(self):$/;"	m	class:TestInvoice
test_invoice_due_today_queryset	./silver/tests/unit/test_invoice.py	/^    def test_invoice_due_today_queryset(self):$/;"	m	class:TestInvoice
test_invoice_overdue_queryset	./silver/tests/unit/test_invoice.py	/^    def test_invoice_overdue_queryset(self):$/;"	m	class:TestInvoice
test_invoice_overdue_since_last_month_queryset	./silver/tests/unit/test_invoice.py	/^    def test_invoice_overdue_since_last_month_queryset(self):$/;"	m	class:TestInvoice
test_invoice_tax_value_decimal_places	./silver/tests/unit/test_invoice.py	/^    def test_invoice_tax_value_decimal_places(self):$/;"	m	class:TestInvoice
test_invoice_total_before_tax_decimal_places	./silver/tests/unit/test_invoice.py	/^    def test_invoice_total_before_tax_decimal_places(self):$/;"	m	class:TestInvoice
test_invoice_total_decimal_points	./silver/tests/unit/test_invoice.py	/^    def test_invoice_total_decimal_points(self):$/;"	m	class:TestInvoice
test_invoice_total_with_tax_integrity	./silver/tests/unit/test_invoice.py	/^    def test_invoice_total_with_tax_integrity(self):$/;"	m	class:TestInvoice
test_issue_invoice_when_in_issued_state	./silver/tests/spec/test_invoice.py	/^    def test_issue_invoice_when_in_issued_state(self):$/;"	m	class:TestInvoiceEndpoints
test_issue_invoice_when_in_paid_state	./silver/tests/spec/test_invoice.py	/^    def test_issue_invoice_when_in_paid_state(self):$/;"	m	class:TestInvoiceEndpoints
test_issue_invoice_with_custom_issue_date	./silver/tests/spec/test_invoice.py	/^    def test_issue_invoice_with_custom_issue_date(self):$/;"	m	class:TestInvoiceEndpoints
test_issue_invoice_with_custom_issue_date_and_due_date	./silver/tests/spec/test_invoice.py	/^    def test_issue_invoice_with_custom_issue_date_and_due_date(self):$/;"	m	class:TestInvoiceEndpoints
test_issue_invoice_with_default_dates	./silver/tests/spec/test_invoice.py	/^    def test_issue_invoice_with_default_dates(self):$/;"	m	class:TestInvoiceEndpoints
test_issue_proforma_when_in_issued_state	./silver/tests/spec/test_proforma.py	/^    def test_issue_proforma_when_in_issued_state(self):$/;"	m	class:TestProformaEndpoints
test_issue_proforma_when_in_paid_state	./silver/tests/spec/test_proforma.py	/^    def test_issue_proforma_when_in_paid_state(self):$/;"	m	class:TestProformaEndpoints
test_issue_proforma_with_custom_issue_date	./silver/tests/spec/test_proforma.py	/^    def test_issue_proforma_with_custom_issue_date(self):$/;"	m	class:TestProformaEndpoints
test_issue_proforma_with_custom_issue_date_and_due_date	./silver/tests/spec/test_proforma.py	/^    def test_issue_proforma_with_custom_issue_date_and_due_date(self):$/;"	m	class:TestProformaEndpoints
test_issue_proforma_with_default_dates	./silver/tests/spec/test_proforma.py	/^    def test_issue_proforma_with_default_dates(self):$/;"	m	class:TestProformaEndpoints
test_issues_invoice_series_number	./silver/tests/unit/test_invoice.py	/^    def test_issues_invoice_series_number(self):$/;"	m	class:TestInvoice
test_issues_proforma_series_number	./silver/tests/unit/test_proforma.py	/^    def test_issues_proforma_series_number(self):$/;"	m	class:TestProforma
test_list_transactions	./silver/tests/spec/test_transactions.py	/^    def test_list_transactions(self):$/;"	m	class:TestTransactionEndpoint
test_new_active_sub_no_trial_w_consolidated_billing	./silver/tests/unit/test_subscription.py	/^    def test_new_active_sub_no_trial_w_consolidated_billing(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_new_active_sub_no_trial_wa_consolidated_billing	./silver/tests/unit/test_subscription.py	/^    def test_new_active_sub_no_trial_wa_consolidated_billing(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_new_active_sub_trial_end_different_month_from_start_date_w_cb	./silver/tests/unit/test_subscription.py	/^    def test_new_active_sub_trial_end_different_month_from_start_date_w_cb(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_new_active_sub_trial_end_same_month_as_start_date_w_cb	./silver/tests/unit/test_subscription.py	/^    def test_new_active_sub_trial_end_same_month_as_start_date_w_cb(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_new_active_sub_trial_end_same_month_as_start_date_wa_cb	./silver/tests/unit/test_subscription.py	/^    def test_new_active_sub_trial_end_same_month_as_start_date_wa_cb(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_new_active_sub_with_smaller_billing_date_than_start_date	./silver/tests/unit/test_subscription.py	/^    def test_new_active_sub_with_smaller_billing_date_than_start_date(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_no_transaction_creation_at_invoice_creation_from_proforma	./silver/tests/integration/test_documents_transactions.py	/^    def test_no_transaction_creation_at_invoice_creation_from_proforma(self):$/;"	m	class:TestDocumentsTransactions
test_no_transaction_creation_at_proforma_pay	./silver/tests/integration/test_documents_transactions.py	/^    def test_no_transaction_creation_at_proforma_pay(self):$/;"	m	class:TestDocumentsTransactions
test_no_transaction_creation_for_issued_documents_case2	./silver/tests/integration/test_documents_transactions.py	/^    def test_no_transaction_creation_for_issued_documents_case2(self):$/;"	m	class:TestDocumentsTransactions
test_no_transaction_creation_for_issued_documents_case3	./silver/tests/integration/test_documents_transactions.py	/^    def test_no_transaction_creation_for_issued_documents_case3(self):$/;"	m	class:TestDocumentsTransactions
test_no_transaction_creation_for_issued_documents_case_1	./silver/tests/integration/test_documents_transactions.py	/^    def test_no_transaction_creation_for_issued_documents_case_1(self):$/;"	m	class:TestDocumentsTransactions
test_no_transaction_settle_with_only_related_proforma	./silver/tests/integration/test_documents_transactions.py	/^    def test_no_transaction_settle_with_only_related_proforma(self):$/;"	m	class:TestDocumentsTransactions
test_not_allowed_methods	./silver/tests/spec/test_transactions.py	/^    def test_not_allowed_methods(self):$/;"	m	class:TestTransactionEndpoint
test_on_trial_with_consumed_units_overflow	./silver/tests/commands/test_generate_docs.py	/^    def test_on_trial_with_consumed_units_overflow(self):$/;"	m	class:TestInvoiceGenerationCommand
test_on_trial_with_consumed_units_underflow	./silver/tests/commands/test_generate_docs.py	/^    def test_on_trial_with_consumed_units_underflow(self):$/;"	m	class:TestInvoiceGenerationCommand
test_patch_after_initial_state	./silver/tests/spec/test_transactions.py	/^    def test_patch_after_initial_state(self):$/;"	m	class:TestTransactionEndpoint
test_patch_plan	./silver/tests/spec/test_plan.py	/^    def test_patch_plan(self):$/;"	m	class:TestPlanEndpoint
test_patch_plan_non_editable_field	./silver/tests/spec/test_plan.py	/^    def test_patch_plan_non_editable_field(self):$/;"	m	class:TestPlanEndpoint
test_patch_provider	./silver/tests/spec/test_provider.py	/^    def test_patch_provider(self):$/;"	m	class:TestProviderEndpoints
test_patch_transaction_not_allowed_fields	./silver/tests/spec/test_transactions.py	/^    def test_patch_transaction_not_allowed_fields(self):$/;"	m	class:TestTransactionEndpoint
test_patch_transaction_with_initial_status	./silver/tests/spec/test_transactions.py	/^    def test_patch_transaction_with_initial_status(self):$/;"	m	class:TestTransactionEndpoint
test_pay_documents_on_transaction_settle	./silver/tests/integration/test_documents_transactions.py	/^    def test_pay_documents_on_transaction_settle(self):$/;"	m	class:TestDocumentsTransactions
test_pay_invoice_related_proforma_state_change_to_paid	./silver/tests/unit/test_invoice.py	/^    def test_pay_invoice_related_proforma_state_change_to_paid(self):$/;"	m	class:TestInvoice
test_pay_invoice_when_in_draft_state	./silver/tests/spec/test_invoice.py	/^    def test_pay_invoice_when_in_draft_state(self):$/;"	m	class:TestInvoiceEndpoints
test_pay_invoice_when_in_paid_state	./silver/tests/spec/test_invoice.py	/^    def test_pay_invoice_when_in_paid_state(self):$/;"	m	class:TestInvoiceEndpoints
test_pay_invoice_with_default_dates	./silver/tests/spec/test_invoice.py	/^    def test_pay_invoice_with_default_dates(self):$/;"	m	class:TestInvoiceEndpoints
test_pay_invoice_with_provided_date	./silver/tests/spec/test_invoice.py	/^    def test_pay_invoice_with_provided_date(self):$/;"	m	class:TestInvoiceEndpoints
test_pay_proforma_related_invoice_state_change_to_paid	./silver/tests/unit/test_proforma.py	/^    def test_pay_proforma_related_invoice_state_change_to_paid(self):$/;"	m	class:TestProforma
test_pay_proforma_when_in_draft_state	./silver/tests/spec/test_proforma.py	/^    def test_pay_proforma_when_in_draft_state(self):$/;"	m	class:TestProformaEndpoints
test_pay_proforma_when_in_paid_state	./silver/tests/spec/test_proforma.py	/^    def test_pay_proforma_when_in_paid_state(self):$/;"	m	class:TestProformaEndpoints
test_pay_proforma_with_default_dates	./silver/tests/spec/test_proforma.py	/^    def test_pay_proforma_with_default_dates(self):$/;"	m	class:TestProformaEndpoints
test_pay_proforma_with_provided_date	./silver/tests/spec/test_proforma.py	/^    def test_pay_proforma_with_provided_date(self):$/;"	m	class:TestProformaEndpoints
test_pay_transaction_not_implemented_get_call	./silver/tests/spec/test_payments.py	/^    def test_pay_transaction_not_implemented_get_call(self):$/;"	m	class:TestPaymentUrls
test_pay_transaction_view_expired	./silver/tests/spec/test_payments.py	/^    def test_pay_transaction_view_expired(self):$/;"	m	class:TestPaymentUrls
test_pay_transaction_view_invalid_state	./silver/tests/spec/test_payments.py	/^    def test_pay_transaction_view_invalid_state(self):$/;"	m	class:TestPaymentUrls
test_pay_transaction_view_missing_view	./silver/tests/spec/test_payments.py	/^    def test_pay_transaction_view_missing_view(self):$/;"	m	class:TestPaymentUrls
test_pay_transaction_view_not_consumable_transaction	./silver/tests/spec/test_payments.py	/^    def test_pay_transaction_view_not_consumable_transaction(self):$/;"	m	class:TestPaymentUrls
test_payment_processors_detail	./silver/tests/spec/test_payment_processors.py	/^    def test_payment_processors_detail(self):$/;"	m	class:TestPaymentProcessorsEndpoints
test_payment_processors_detail_not_found	./silver/tests/spec/test_payment_processors.py	/^    def test_payment_processors_detail_not_found(self):$/;"	m	class:TestPaymentProcessorsEndpoints
test_payment_processors_list	./silver/tests/spec/test_payment_processors.py	/^    def test_payment_processors_list(self):$/;"	m	class:TestPaymentProcessorsEndpoints
test_permissions	./silver/tests/spec/test_payment_method.py	/^    def test_permissions(self):$/;"	m	class:TestPaymentMethodEndpoints
test_post_invoice_with_invoice_entries	./silver/tests/spec/test_invoice.py	/^    def test_post_invoice_with_invoice_entries(self):$/;"	m	class:TestInvoiceEndpoints
test_post_invoice_without_invoice_entries	./silver/tests/spec/test_invoice.py	/^    def test_post_invoice_without_invoice_entries(self):$/;"	m	class:TestInvoiceEndpoints
test_post_listing	./silver/tests/spec/test_payment_method.py	/^    def test_post_listing(self):$/;"	m	class:TestPaymentMethodEndpoints
test_post_listing_incomplete_body_1	./silver/tests/spec/test_payment_method.py	/^    def test_post_listing_incomplete_body_1(self):$/;"	m	class:TestPaymentMethodEndpoints
test_post_listing_no_customer	./silver/tests/spec/test_payment_method.py	/^    def test_post_listing_no_customer(self):$/;"	m	class:TestPaymentMethodEndpoints
test_post_proforma_with_proforma_entries	./silver/tests/spec/test_proforma.py	/^    def test_post_proforma_with_proforma_entries(self):$/;"	m	class:TestProformaEndpoints
test_post_proforma_without_proforma_entries	./silver/tests/spec/test_proforma.py	/^    def test_post_proforma_without_proforma_entries(self):$/;"	m	class:TestProformaEndpoints
test_post_provider_without_required_fields	./silver/tests/spec/test_provider.py	/^    def test_post_provider_without_required_fields(self):$/;"	m	class:TestProviderEndpoints
test_post_valid_provider	./silver/tests/spec/test_provider.py	/^    def test_post_valid_provider(self):$/;"	m	class:TestProviderEndpoints
test_proforma_currency_used_for_transaction_currency	./silver/tests/unit/test_proforma.py	/^    def test_proforma_currency_used_for_transaction_currency(self):$/;"	m	class:TestProforma
test_proforma_tax_value_decimal_places	./silver/tests/unit/test_proforma.py	/^    def test_proforma_tax_value_decimal_places(self):$/;"	m	class:TestProforma
test_proforma_total_before_tax_decimal_places	./silver/tests/unit/test_proforma.py	/^    def test_proforma_total_before_tax_decimal_places(self):$/;"	m	class:TestProforma
test_proforma_total_decimal_points	./silver/tests/unit/test_proforma.py	/^    def test_proforma_total_decimal_points(self):$/;"	m	class:TestProforma
test_proforma_total_with_tax_integrity	./silver/tests/unit/test_proforma.py	/^    def test_proforma_total_with_tax_integrity(self):$/;"	m	class:TestProforma
test_prorated_subscription_with_consumed_mfs_overflow	./silver/tests/commands/test_generate_docs.py	/^    def test_prorated_subscription_with_consumed_mfs_overflow(self):$/;"	m	class:TestInvoiceGenerationCommand
test_prorated_subscription_with_consumed_mfs_underflow	./silver/tests/commands/test_generate_docs.py	/^    def test_prorated_subscription_with_consumed_mfs_underflow(self):$/;"	m	class:TestInvoiceGenerationCommand
test_put_detail	./silver/tests/spec/test_payment_method.py	/^    def test_put_detail(self):$/;"	m	class:TestPaymentMethodEndpoints
test_put_detail_cannot_change_processor	./silver/tests/spec/test_payment_method.py	/^    def test_put_detail_cannot_change_processor(self):$/;"	m	class:TestPaymentMethodEndpoints
test_put_detail_ignore_customer_change	./silver/tests/spec/test_payment_method.py	/^    def test_put_detail_ignore_customer_change(self):$/;"	m	class:TestPaymentMethodEndpoints
test_put_detail_reenable_payment_method	./silver/tests/spec/test_payment_method.py	/^    def test_put_detail_reenable_payment_method(self):$/;"	m	class:TestPaymentMethodEndpoints
test_put_detail_unverify_payment_method	./silver/tests/spec/test_payment_method.py	/^    def test_put_detail_unverify_payment_method(self):$/;"	m	class:TestPaymentMethodEndpoints
test_put_plan	./silver/tests/spec/test_plan.py	/^    def test_put_plan(self):$/;"	m	class:TestPlanEndpoint
test_put_provider_correctly	./silver/tests/spec/test_provider.py	/^    def test_put_provider_correctly(self):$/;"	m	class:TestProviderEndpoints
test_put_provider_without_required_field	./silver/tests/spec/test_provider.py	/^    def test_put_provider_without_required_field(self):$/;"	m	class:TestProviderEndpoints
test_reactivate_subscription	./silver/tests/spec/test_subscription.py	/^    def test_reactivate_subscription(self):$/;"	m	class:TestSubscriptionEndpoint
test_reactivate_subscription_from_terminal_state	./silver/tests/spec/test_subscription.py	/^    def test_reactivate_subscription_from_terminal_state(self):$/;"	m	class:TestSubscriptionEndpoint
test_skip_transaction_with_unverified_payment_method	./silver/tests/commands/test_execute_transactions.py	/^    def test_skip_transaction_with_unverified_payment_method(self):$/;"	m	class:TestExecuteTransactionsCommand
test_sub_canceled_at_end_of_bc_w_consolidated_billing	./silver/tests/unit/test_subscription.py	/^    def test_sub_canceled_at_end_of_bc_w_consolidated_billing(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_sub_canceled_now_w_consolidated_billing	./silver/tests/unit/test_subscription.py	/^    def test_sub_canceled_now_w_consolidated_billing(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_subscription_billing_cycle_intervals_1	./silver/tests/unit/test_subscription.py	/^    def test_subscription_billing_cycle_intervals_1(self):$/;"	m	class:TestSubscription
test_subscription_billing_cycle_intervals_2	./silver/tests/unit/test_subscription.py	/^    def test_subscription_billing_cycle_intervals_2(self):$/;"	m	class:TestSubscription
test_subscription_billing_cycle_intervals_3	./silver/tests/unit/test_subscription.py	/^    def test_subscription_billing_cycle_intervals_3(self):$/;"	m	class:TestSubscription
test_subscription_billing_cycle_intervals_4	./silver/tests/unit/test_subscription.py	/^    def test_subscription_billing_cycle_intervals_4(self):$/;"	m	class:TestSubscription
test_subscription_cycle_billing_duration	./silver/tests/commands/test_generate_docs.py	/^    def test_subscription_cycle_billing_duration(self):$/;"	m	class:TestInvoiceGenerationCommand
test_subscription_mf_units_log_intervals_1	./silver/tests/unit/test_subscription.py	/^    def test_subscription_mf_units_log_intervals_1(self):$/;"	m	class:TestSubscription
test_subscription_mf_units_log_intervals_2	./silver/tests/unit/test_subscription.py	/^    def test_subscription_mf_units_log_intervals_2(self):$/;"	m	class:TestSubscription
test_subscription_mf_units_log_intervals_3	./silver/tests/unit/test_subscription.py	/^    def test_subscription_mf_units_log_intervals_3(self):$/;"	m	class:TestSubscription
test_subscription_mf_units_log_intervals_4	./silver/tests/unit/test_subscription.py	/^    def test_subscription_mf_units_log_intervals_4(self):$/;"	m	class:TestSubscription
test_subscription_with_documents_generation_during_and_after_trial	./silver/tests/commands/test_generate_docs.py	/^    def test_subscription_with_documents_generation_during_and_after_trial(self):$/;"	m	class:TestInvoiceGenerationCommand
test_subscription_with_documents_generation_on_trial_end	./silver/tests/commands/test_generate_docs.py	/^    def test_subscription_with_documents_generation_on_trial_end(self):$/;"	m	class:TestInvoiceGenerationCommand
test_subscription_with_separate_cycles_during_trial	./silver/tests/commands/test_generate_docs.py	/^    def test_subscription_with_separate_cycles_during_trial(self):$/;"	m	class:TestInvoiceGenerationCommand
test_subscription_with_trial_with_metered_features_overflow_to_draft	./silver/tests/commands/test_generate_docs.py	/^    def test_subscription_with_trial_with_metered_features_overflow_to_draft(self):$/;"	m	class:TestInvoiceGenerationCommand
test_subscription_with_trial_with_metered_features_underflow_to_draft	./silver/tests/commands/test_generate_docs.py	/^    def test_subscription_with_trial_with_metered_features_underflow_to_draft(self):$/;"	m	class:TestInvoiceGenerationCommand
test_subscription_with_trial_without_metered_features_to_draft	./silver/tests/commands/test_generate_docs.py	/^    def test_subscription_with_trial_without_metered_features_to_draft(self):$/;"	m	class:TestInvoiceGenerationCommand
test_transaction_creation_for_issued_documents	./silver/tests/integration/test_documents_transactions.py	/^    def test_transaction_creation_for_issued_documents(self):$/;"	m	class:TestDocumentsTransactions
test_transaction_executing	./silver/tests/commands/test_execute_transactions.py	/^    def test_transaction_executing(self):$/;"	m	class:TestExecuteTransactionsCommand
test_transaction_filtering	./silver/tests/commands/test_execute_transactions.py	/^    def test_transaction_filtering(self):$/;"	m	class:TestExecuteTransactionsCommand
test_transaction_invoice_on_transaction_settle	./silver/tests/integration/test_documents_transactions.py	/^    def test_transaction_invoice_on_transaction_settle(self):$/;"	m	class:TestDocumentsTransactions
test_transaction_update_status_exception_logging	./silver/tests/commands/test_update_transactions_status.py	/^    def test_transaction_update_status_exception_logging(self, mock_logger):$/;"	m	class:TestUpdateTransactionsStatusCommand
test_trial_spanning_over_multiple_months	./silver/tests/commands/test_generate_docs.py	/^    def test_trial_spanning_over_multiple_months(self):$/;"	m	class:TestInvoiceGenerationCommand
test_try_to_get_invoice_entries	./silver/tests/spec/test_invoice.py	/^    def test_try_to_get_invoice_entries(self):$/;"	m	class:TestInvoiceEndpoints
test_try_to_get_proforma_entries	./silver/tests/spec/test_proforma.py	/^    def test_try_to_get_proforma_entries(self):$/;"	m	class:TestProformaEndpoints
test_updateable_buckets_2_months_active_subscription	./silver/tests/unit/test_subscription.py	/^    def test_updateable_buckets_2_months_active_subscription(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_updateable_buckets_2_months_canceled_subscription_at_end_of_month	./silver/tests/unit/test_subscription.py	/^    def test_updateable_buckets_2_months_canceled_subscription_at_end_of_month(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_updateable_buckets_2_months_canceled_subscription_last_month	./silver/tests/unit/test_subscription.py	/^    def test_updateable_buckets_2_months_canceled_subscription_last_month(self):$/;"	m	class:TestSubscriptionShouldBeBilled
test_updateable_buckets_active_subscription	./silver/tests/unit/test_subscription.py	/^    def test_updateable_buckets_active_subscription(self):$/;"	m	class:TestSubscriptionShouldBeBilled
time_limit	./silver/tasks.py	/^             time_limit=EXECUTE_TRANSACTION_TIME_LIMIT)$/;"	v
time_limit	./silver/tasks.py	/^             time_limit=FETCH_TRANSACTION_STATUS_TIME_LIMIT)$/;"	v
time_limit	./silver/tasks.py	/^             time_limit=PDF_GENERATION_TIME_LIMIT)$/;"	v
title	./silver/admin.py	/^    title = 'due date'$/;"	v	class:DueDateFilter
to	./silver/migrations/0001_initial.py	/^                to='silver.Invoice',$/;"	v	class:Migration
to	./silver/migrations/0001_initial.py	/^                to='silver.ProductCode'),$/;"	v	class:Migration
to	./silver/migrations/0001_initial.py	/^                to='silver.ProductCode',$/;"	v	class:Migration
to	./silver/migrations/0001_initial.py	/^                to='silver.Proforma',$/;"	v	class:Migration
to	./silver/migrations/0001_initial.py	/^                to='silver.Provider',$/;"	v	class:Migration
to	./silver/migrations/0001_initial.py	/^                to='silver.Subscription'),$/;"	v	class:Migration
to_internal_value	./silver/api/serializers/product_codes_serializer.py	/^    def to_internal_value(self, data):$/;"	m	class:ProductCodeRelatedField
total	./silver/admin.py	/^    def total(self, obj):$/;"	m	class:BillingDocumentAdmin
total	./silver/models/documents/base.py	/^    def total(self):$/;"	m	class:BillingDocumentBase
total	./silver/models/documents/entries.py	/^    def total(self):$/;"	m	class:DocumentEntry
total	./silver/models/subscriptions.py	/^    total = models.DecimalField($/;"	v	class:BillingLog
total_before_tax	./silver/models/documents/base.py	/^    def total_before_tax(self):$/;"	m	class:BillingDocumentBase
total_before_tax	./silver/models/documents/entries.py	/^    def total_before_tax(self):$/;"	m	class:DocumentEntry
total_before_tax_in_transaction_currency	./silver/models/documents/base.py	/^    def total_before_tax_in_transaction_currency(self):$/;"	m	class:BillingDocumentBase
total_before_tax_in_transaction_currency	./silver/models/documents/entries.py	/^    def total_before_tax_in_transaction_currency(self):$/;"	m	class:DocumentEntry
total_in_transaction_currency	./silver/models/documents/base.py	/^    def total_in_transaction_currency(self):$/;"	m	class:BillingDocumentBase
total_in_transaction_currency	./silver/models/documents/entries.py	/^    def total_in_transaction_currency(self):$/;"	m	class:DocumentEntry
transaction	./silver/payment_processors/views.py	/^    transaction = None$/;"	v	class:GenericTransactionView
transaction_currency	./silver/admin.py	/^    transaction_currency = ChoiceField($/;"	v	class:BillingDocumentForm
transaction_currency	./silver/models/documents/base.py	/^    transaction_currency = models.CharField($/;"	v	class:BillingDocumentBase
transaction_currency	./silver/tests/factories.py	/^    transaction_currency = 'RON'$/;"	v	class:InvoiceFactory
transaction_currency	./silver/tests/factories.py	/^    transaction_currency = 'RON'$/;"	v	class:ProformaFactory
transaction_total	./silver/admin.py	/^    def transaction_total(self, obj):$/;"	m	class:BillingDocumentAdmin
transaction_view_class	./silver/payment_processors/base.py	/^    transaction_view_class = None$/;"	v	class:PaymentProcessorBase
transaction_view_class	./silver/payment_processors/manual.py	/^    transaction_view_class = GenericTransactionView$/;"	v	class:ManualProcessor
transaction_view_class	./silver/tests/fixtures.py	/^    transaction_view_class = GenericTransactionView$/;"	v	class:ManualProcessor
transaction_view_class	./silver/tests/fixtures.py	/^    transaction_view_class = GenericTransactionView$/;"	v	class:TriggeredProcessor
transaction_xe_date	./silver/models/documents/base.py	/^    transaction_xe_date = models.DateField($/;"	v	class:BillingDocumentBase
transaction_xe_rate	./silver/models/documents/base.py	/^    transaction_xe_rate = models.DecimalField($/;"	v	class:BillingDocumentBase
transaction_xe_rate	./silver/tests/factories.py	/^        transaction_xe_rate=Decimal('1')$/;"	v	class:TransactionFactory.Meta
transaction_xe_rate	./silver/tests/factories.py	/^    transaction_xe_rate = Decimal(1)$/;"	v	class:InvoiceFactory
transaction_xe_rate	./silver/tests/factories.py	/^    transaction_xe_rate = Decimal(1)$/;"	v	class:ProformaFactory
transactions	./silver/api/serializers/billing_entities_serializers.py	/^    transactions = serializers.HyperlinkedIdentityField($/;"	v	class:CustomerSerializer
transactions	./silver/api/serializers/documents_serializers.py	/^    transactions = TransactionSerializer(many=True, read_only=True)$/;"	v	class:InvoiceSerializer
transactions	./silver/api/serializers/documents_serializers.py	/^    transactions = TransactionSerializer(many=True, read_only=True)$/;"	v	class:ProformaSerializer
transactions	./silver/api/serializers/documents_serializers.py	/^    transactions = serializers.SerializerMethodField()$/;"	v	class:DocumentSerializer
transactions	./silver/api/serializers/payment_methods_serializers.py	/^    transactions = PaymentMethodTransactionsUrl($/;"	v	class:PaymentMethodSerializer
transactions	./silver/models/documents/invoice.py	/^    def transactions(self):$/;"	m	class:Invoice
transactions	./silver/models/documents/proforma.py	/^    def transactions(self):$/;"	m	class:Proforma
transactions	./silver/models/payment_methods.py	/^    def transactions(self):$/;"	m	class:PaymentMethod
trial_end	./silver/api/serializers/subscriptions_serializers.py	/^    trial_end = serializers.DateField(required=False)$/;"	v	class:SubscriptionSerializer
trial_end	./silver/models/subscriptions.py	/^    trial_end = models.DateField($/;"	v	class:Subscription
trial_end	./silver/tests/factories.py	/^    trial_end = factory.LazyAttribute($/;"	v	class:SubscriptionFactory
trial_period_days	./silver/models/plans.py	/^    trial_period_days = models.PositiveIntegerField($/;"	v	class:Plan
triggered_processor	./settings_test.py	/^triggered_processor = 'triggered'$/;"	v
triggered_processor	./silver/tests/fixtures.py	/^triggered_processor = 'triggered'$/;"	v
type	./silver/api/serializers/payment_methods_serializers.py	/^    type = serializers.CharField(max_length=64)$/;"	v	class:PaymentProcessorSerializer
type	./silver/payment_processors/mixins.py	/^    type = PaymentProcessorTypes.Automatic$/;"	v	class:AutomaticProcessorMixin
type	./silver/payment_processors/mixins.py	/^    type = PaymentProcessorTypes.Manual$/;"	v	class:ManualProcessorMixin
type	./silver/payment_processors/mixins.py	/^    type = PaymentProcessorTypes.Triggered$/;"	v	class:TriggeredProcessorMixin
unique_together	./silver/migrations/0001_initial.py	/^            unique_together=set($/;"	v	class:Migration
unique_together	./silver/migrations/0001_initial.py	/^            unique_together=set([('provider', 'number')]),$/;"	v	class:Migration
unique_together	./silver/migrations/0005_auto_20150429_1732.py	/^            unique_together=set([('provider', 'series', 'number')]),$/;"	v	class:Migration
unique_together	./silver/migrations/0043_auto_20171113_1048.py	/^            unique_together=set([('kind', 'provider', 'series', 'number')]),$/;"	v	class:Migration
unique_together	./silver/migrations/0043_auto_20171113_1048.py	/^            unique_together=set([]),$/;"	v	class:Migration
unique_together	./silver/models/documents/base.py	/^        unique_together = ('kind', 'provider', 'series', 'number')$/;"	v	class:BillingDocumentBase.Meta
unique_together	./silver/models/subscriptions.py	/^        unique_together = ('metered_feature', 'subscription', 'start_date',$/;"	v	class:MeteredFeatureUnitsLog.Meta
unit	./silver/models/documents/entries.py	/^    unit = models.CharField(max_length=1024, blank=True, null=True)$/;"	v	class:DocumentEntry
unit	./silver/models/plans.py	/^    unit = models.CharField(max_length=20)$/;"	v	class:MeteredFeature
unit	./silver/tests/factories.py	/^    unit = factory.Sequence(lambda n: 'MeteredFeature{cnt}Unit'.format(cnt=n))$/;"	v	class:MeteredFeatureFactory
unit	./silver/tests/factories.py	/^    unit = factory.Sequence(lambda n: 'Unit{cnt}'.format(cnt=n))$/;"	v	class:DocumentEntryFactory
unit_price	./silver/models/documents/entries.py	/^    unit_price = models.DecimalField(max_digits=19, decimal_places=4)$/;"	v	class:DocumentEntry
unit_price	./silver/tests/factories.py	/^    unit_price = factory.fuzzy.FuzzyDecimal(low=0.01, high=100.00, precision=4)$/;"	v	class:DocumentEntryFactory
unit_price_in_transaction_currency	./silver/models/documents/entries.py	/^    def unit_price_in_transaction_currency(self):$/;"	m	class:DocumentEntry
update	./silver/api/serializers/documents_serializers.py	/^    def update(self, instance, validated_data):$/;"	m	class:InvoiceSerializer
update	./silver/api/serializers/documents_serializers.py	/^    def update(self, instance, validated_data):$/;"	m	class:ProformaSerializer
update	./silver/api/serializers/plans_serializer.py	/^    def update(self, instance, validated_data):$/;"	m	class:PlanSerializer
update_document_state	./silver/models/transactions/transaction.py	/^    def update_document_state(self):$/;"	m	class:Transaction
update_draft_billing_documents	./silver/models/billing_entities/provider.py	/^def update_draft_billing_documents(sender, instance, **kwargs):$/;"	f
updateable_buckets	./silver/api/serializers/subscriptions_serializers.py	/^    updateable_buckets = serializers.ReadOnlyField()$/;"	v	class:SubscriptionSerializer
updateable_buckets	./silver/models/subscriptions.py	/^    def updateable_buckets(self):$/;"	m	class:Subscription
updateable_fields	./silver/api/serializers/transaction_serializers.py	/^        updateable_fields = ('valid_until', 'success_url', 'failed_url')$/;"	v	class:TransactionSerializer.Meta
updateable_fields	./silver/models/documents/base.py	/^    def updateable_fields(self):$/;"	m	class:BillingDocumentBase
updated_at	./silver/models/transactions/transaction.py	/^    updated_at = AutoDateTimeField(default=timezone.now)$/;"	v	class:Transaction
upload	./silver/models/documents/pdf.py	/^    def upload(self, pdf_file_object, filename):$/;"	m	class:PDF
upload_path	./silver/models/documents/pdf.py	/^    upload_path = TextField(null=True, blank=True)$/;"	v	class:PDF
url	./silver/admin.py	/^                url='autocomplete-invoice'$/;"	v	class:TransactionForm.Meta
url	./silver/admin.py	/^                url='autocomplete-payment-method'$/;"	v	class:TransactionForm.Meta
url	./silver/admin.py	/^                url='autocomplete-proforma'$/;"	v	class:TransactionForm.Meta
url	./silver/api/serializers/billing_entities_serializers.py	/^    url = CustomerUrl(view_name='customer-detail', read_only=True, source='*')$/;"	v	class:CustomerSerializer
url	./silver/api/serializers/documents_serializers.py	/^    url = DocumentUrl(proforma_view_name='proforma-detail',$/;"	v	class:DocumentSerializer
url	./silver/api/serializers/payment_methods_serializers.py	/^    url = PaymentMethodUrl(view_name='payment-method-detail', source="*",$/;"	v	class:PaymentMethodSerializer
url	./silver/api/serializers/payment_methods_serializers.py	/^    url = PaymentProcessorUrl($/;"	v	class:PaymentProcessorSerializer
url	./silver/api/serializers/subscriptions_serializers.py	/^    url = MFUnitsLogUrl(view_name='mf-log-units', source='*', read_only=True)$/;"	v	class:MeteredFeatureInSubscriptionSerializer
url	./silver/api/serializers/subscriptions_serializers.py	/^    url = SubscriptionUrl(view_name='subscription-detail', source='*',$/;"	v	class:SubscriptionSerializer
url	./silver/api/serializers/transaction_serializers.py	/^    url = TransactionUrl(view_name='transaction-detail', lookup_field='uuid', )$/;"	v	class:TransactionSerializer
url	./silver/models/documents/pdf.py	/^    def url(self):$/;"	m	class:PDF
urlpatterns	./silver/api/urls.py	/^urlpatterns = [$/;"	v
urlpatterns	./silver/urls.py	/^urlpatterns = [$/;"	v
use_pk_only_optimization	./silver/api/serializers/billing_entities_serializers.py	/^    def use_pk_only_optimization(self):$/;"	m	class:ProviderUrl
use_pk_only_optimization	./silver/api/serializers/common.py	/^    def use_pk_only_optimization(self):$/;"	m	class:CustomerUrl
username	./silver/tests/factories.py	/^    username = 'admin'$/;"	v	class:AdminUserFactory
uuid	./silver/models/documents/pdf.py	/^    uuid = UUIDField(default=uuid.uuid4, unique=True)$/;"	v	class:PDF
uuid	./silver/models/transactions/transaction.py	/^    uuid = models.UUIDField(default=uuid.uuid4)$/;"	v	class:Transaction
valid_until	./silver/models/payment_methods.py	/^    valid_until = models.DateTimeField(null=True, blank=True)$/;"	v	class:PaymentMethod
valid_until	./silver/models/transactions/transaction.py	/^    valid_until = models.DateTimeField(null=True, blank=True)$/;"	v	class:Transaction
validate	./silver/api/serializers/billing_entities_serializers.py	/^    def validate(self, data):$/;"	m	class:ProviderSerializer
validate	./silver/api/serializers/documents_serializers.py	/^    def validate(self, data):$/;"	m	class:InvoiceSerializer
validate	./silver/api/serializers/documents_serializers.py	/^    def validate(self, data):$/;"	m	class:ProformaSerializer
validate	./silver/api/serializers/payment_methods_serializers.py	/^    def validate(self, attrs):$/;"	m	class:PaymentMethodSerializer
validate	./silver/api/serializers/subscriptions_serializers.py	/^    def validate(self, attrs):$/;"	m	class:SubscriptionSerializer
validate	./silver/api/serializers/transaction_serializers.py	/^    def validate(self, attrs):$/;"	m	class:TransactionSerializer
validate_metered_features	./silver/api/serializers/plans_serializer.py	/^    def validate_metered_features(self, value):$/;"	m	class:PlanSerializer
validate_metered_features	./silver/models/plans.py	/^    def validate_metered_features(metered_features):$/;"	m	class:Plan
validate_payment_processor_name	./silver/api/serializers/payment_methods_serializers.py	/^    def validate_payment_processor_name(self, value):$/;"	m	class:PaymentMethodSerializer
validate_reference	./silver/validators.py	/^validate_reference = validators.RegexValidator($/;"	v
validate_verified	./silver/api/serializers/payment_methods_serializers.py	/^    def validate_verified(self, value):$/;"	m	class:PaymentMethodSerializer
validators	./silver/migrations/0001_initial.py	/^                 validators=[django.core.validators.MinValueValidator(0.0)])),$/;"	v	class:Migration
validators	./silver/migrations/0008_auto_20150430_1804.py	/^                validators=[django.core.validators.MinValueValidator(0.0)]),$/;"	v	class:Migration
validators	./silver/migrations/0008_auto_20150430_1804.py	/^                validators=[django.core.validators.MinValueValidator(0.0)],$/;"	v	class:Migration
validators	./silver/models/billing_entities/customer.py	/^        validators=[MinValueValidator(0.0)],$/;"	v	class:Customer.Meta
validators	./silver/models/documents/base.py	/^                                            validators=[MinValueValidator(0.0)],$/;"	v	class:BillingDocumentBase.STATES
validators	./silver/models/documents/entries.py	/^                                   validators=[MinValueValidator(0.0)])$/;"	v	class:DocumentEntry
validators	./silver/models/subscriptions.py	/^                                         validators=[MinValueValidator(0.0)])$/;"	v	class:MeteredFeatureUnitsLog
validators	./silver/models/transactions/transaction.py	/^        validators=[MinValueValidator(Decimal('0.00'))]$/;"	v	class:Transaction
value	./silver/models/product_codes.py	/^    value = models.CharField(max_length=128, unique=True)$/;"	v	class:ProductCode
value	./silver/tests/factories.py	/^    value = factory.Sequence(lambda n: faker.ean8())$/;"	v	class:ProductCodeFactory
verbose_name	./silver/admin.py	/^    verbose_name = 'Automatic billing log'$/;"	v	class:BillingLogInLine
verbose_name	./silver/migrations/0009_auto_20150717_1428.py	/^                verbose_name=b'Trial days',$/;"	v	class:Migration
verbose_name	./silver/models/documents/base.py	/^                     verbose_name="State",$/;"	v	class:BillingDocumentBase.STATES
verbose_name	./silver/models/documents/entries.py	/^        verbose_name = 'Entry'$/;"	v	class:DocumentEntry.Meta
verbose_name	./silver/models/plans.py	/^        verbose_name='Trial days'$/;"	v	class:Plan.INTERVALS
verbose_name_plural	./silver/admin.py	/^    verbose_name_plural = verbose_name$/;"	v	class:BillingLogInLine
verbose_name_plural	./silver/models/documents/entries.py	/^        verbose_name_plural = 'Entries'$/;"	v	class:DocumentEntry.Meta
verified	./silver/api/filters.py	/^    verified = BooleanFilter(name='verified')$/;"	v	class:PaymentMethodFilter
verified	./silver/models/payment_methods.py	/^    verified = models.BooleanField(default=False)$/;"	v	class:PaymentMethod
view_name	./silver/api/serializers/plans_serializer.py	/^        view_name='provider-detail',$/;"	v	class:PlanSerializer
view_name	./silver/api/serializers/transaction_serializers.py	/^                                    view_name='payment')$/;"	v	class:TransactionSerializer
void_transaction	./silver/payment_processors/mixins.py	/^    def void_transaction(self, transaction, payment_method=None):$/;"	m	class:BaseActionableProcessor
void_transaction	./silver/tests/fixtures.py	/^    def void_transaction(self, transaction):$/;"	m	class:FailingVoidTriggeredProcessor
void_transaction	./silver/tests/fixtures.py	/^    def void_transaction(self, transaction):$/;"	m	class:TriggeredProcessor
widgets	./silver/admin.py	/^        widgets = {$/;"	v	class:DocumentEntryForm.Meta
widgets	./silver/admin.py	/^        widgets = {$/;"	v	class:TransactionForm.Meta
zip_code	./silver/models/billing_entities/base.py	/^    zip_code = models.CharField(max_length=32, blank=True, null=True)$/;"	v	class:BaseBillingEntity
zip_code	./silver/tests/factories.py	/^    zip_code = factory.Sequence(lambda n: faker.postcode())$/;"	v	class:CustomerFactory
zip_code	./silver/tests/factories.py	/^    zip_code = factory.Sequence(lambda n: faker.postcode())$/;"	v	class:ProviderFactory
